//
// Generated by JTB 1.2.1
//

package jde.parser.visitor;
import jde.parser.syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */
public interface Visitor {
   //
   // void Auto class visitors
   //
   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * nodeOptional -> [ PackageDeclaration() ]
    * nodeListOptional -> ( ImportDeclaration() )*
    * nodeListOptional1 -> ( TypeDeclaration() )*
    * nodeToken -> &lt;EOF&gt;
    * </PRE>
    */
   public void visit(CompilationUnit n);

   /**
    * <PRE>
    * nodeToken -> "package"
    * name -> Name()
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(PackageDeclaration n);

   /**
    * <PRE>
    * nodeToken -> "import"
    * name -> Name()
    * nodeOptional -> [ "." "*" ]
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(ImportDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> ClassDeclaration()
    *       | InterfaceDeclaration()
    *       | ";"
    * </PRE>
    */
   public void visit(TypeDeclaration n);

   /**
    * <PRE>
    * nodeListOptional -> ( "abstract" | "final" | "public" )*
    * unmodifiedClassDeclaration -> UnmodifiedClassDeclaration()
    * </PRE>
    */
   public void visit(ClassDeclaration n);

   /**
    * <PRE>
    * nodeToken -> "class"
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * nodeOptional -> [ "extends" Name() ]
    * nodeOptional1 -> [ "implements" NameList() ]
    * classBody -> ClassBody()
    * </PRE>
    */
   public void visit(UnmodifiedClassDeclaration n);

   /**
    * <PRE>
    * nodeToken -> "{"
    * nodeListOptional -> ( ClassBodyDeclaration() )*
    * nodeToken1 -> "}"
    * </PRE>
    */
   public void visit(ClassBody n);

   /**
    * <PRE>
    * nodeListOptional -> ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
    * unmodifiedClassDeclaration -> UnmodifiedClassDeclaration()
    * </PRE>
    */
   public void visit(NestedClassDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> Initializer()
    *       | NestedClassDeclaration()
    *       | NestedInterfaceDeclaration()
    *       | ConstructorDeclaration()
    *       | MethodDeclaration()
    *       | FieldDeclaration()
    * </PRE>
    */
   public void visit(ClassBodyDeclaration n);

   /**
    * <PRE>
    * nodeListOptional -> ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
    * resultType -> ResultType()
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeToken1 -> "("
    * </PRE>
    */
   public void visit(MethodDeclarationLookahead n);

   /**
    * <PRE>
    * nodeListOptional -> ( "abstract" | "public" )*
    * unmodifiedInterfaceDeclaration -> UnmodifiedInterfaceDeclaration()
    * </PRE>
    */
   public void visit(InterfaceDeclaration n);

   /**
    * <PRE>
    * nodeListOptional -> ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
    * unmodifiedInterfaceDeclaration -> UnmodifiedInterfaceDeclaration()
    * </PRE>
    */
   public void visit(NestedInterfaceDeclaration n);

   /**
    * <PRE>
    * nodeToken -> "interface"
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * nodeOptional -> [ "extends" NameList() ]
    * nodeToken2 -> "{"
    * nodeListOptional -> ( InterfaceMemberDeclaration() )*
    * nodeToken3 -> "}"
    * </PRE>
    */
   public void visit(UnmodifiedInterfaceDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> NestedClassDeclaration()
    *       | NestedInterfaceDeclaration()
    *       | MethodDeclaration()
    *       | FieldDeclaration()
    * </PRE>
    */
   public void visit(InterfaceMemberDeclaration n);

   /**
    * <PRE>
    * nodeListOptional -> ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
    * type -> Type()
    * variableDeclarator -> VariableDeclarator()
    * nodeListOptional1 -> ( "," VariableDeclarator() )*
    * nodeToken -> ";"
    * </PRE>
    */
   public void visit(FieldDeclaration n);

   /**
    * <PRE>
    * variableDeclaratorId -> VariableDeclaratorId()
    * nodeOptional -> [ "=" VariableInitializer() ]
    * </PRE>
    */
   public void visit(VariableDeclarator n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeListOptional -> ( "[" "]" )*
    * </PRE>
    */
   public void visit(VariableDeclaratorId n);

   /**
    * <PRE>
    * nodeChoice -> ArrayInitializer()
    *       | Expression()
    * </PRE>
    */
   public void visit(VariableInitializer n);

   /**
    * <PRE>
    * nodeToken -> "{"
    * nodeOptional -> [ VariableInitializer() ( "," VariableInitializer() )* ]
    * nodeOptional1 -> [ "," ]
    * nodeToken1 -> "}"
    * </PRE>
    */
   public void visit(ArrayInitializer n);

   /**
    * <PRE>
    * nodeListOptional -> ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
    * resultType -> ResultType()
    * methodDeclarator -> MethodDeclarator()
    * nodeOptional -> [ "throws" NameList() ]
    * nodeChoice -> ( Block() | ";" )
    * </PRE>
    */
   public void visit(MethodDeclaration n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * formalParameters -> FormalParameters()
    * nodeListOptional -> ( "[" "]" )*
    * </PRE>
    */
   public void visit(MethodDeclarator n);

   /**
    * <PRE>
    * nodeToken -> "("
    * nodeOptional -> [ FormalParameter() ( "," FormalParameter() )* ]
    * nodeToken1 -> ")"
    * </PRE>
    */
   public void visit(FormalParameters n);

   /**
    * <PRE>
    * nodeOptional -> [ "final" ]
    * type -> Type()
    * variableDeclaratorId -> VariableDeclaratorId()
    * </PRE>
    */
   public void visit(FormalParameter n);

   /**
    * <PRE>
    * nodeOptional -> [ "public" | "protected" | "private" ]
    * nodeToken -> &lt;IDENTIFIER&gt;
    * formalParameters -> FormalParameters()
    * nodeOptional1 -> [ "throws" NameList() ]
    * nodeToken1 -> "{"
    * nodeOptional2 -> [ ExplicitConstructorInvocation() ]
    * nodeListOptional -> ( BlockStatement() )*
    * nodeToken2 -> "}"
    * </PRE>
    */
   public void visit(ConstructorDeclaration n);

   /**
    * <PRE>
    * nodeChoice -> "this" Arguments() ";"
    *       | [ PrimaryExpression() "." ] "super" Arguments() ";"
    * </PRE>
    */
   public void visit(ExplicitConstructorInvocation n);

   /**
    * <PRE>
    * nodeOptional -> [ "static" ]
    * block -> Block()
    * </PRE>
    */
   public void visit(Initializer n);

   /**
    * <PRE>
    * nodeChoice -> ( PrimitiveType() | Name() )
    * nodeListOptional -> ( "[" "]" )*
    * </PRE>
    */
   public void visit(Type n);

   /**
    * <PRE>
    * nodeChoice -> "boolean"
    *       | "char"
    *       | "byte"
    *       | "short"
    *       | "int"
    *       | "long"
    *       | "float"
    *       | "double"
    * </PRE>
    */
   public void visit(PrimitiveType n);

   /**
    * <PRE>
    * nodeChoice -> "void"
    *       | Type()
    * </PRE>
    */
   public void visit(ResultType n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeListOptional -> ( "." &lt;IDENTIFIER&gt; )*
    * </PRE>
    */
   public void visit(Name n);

   /**
    * <PRE>
    * name -> Name()
    * nodeListOptional -> ( "," Name() )*
    * </PRE>
    */
   public void visit(NameList n);

   /**
    * <PRE>
    * conditionalExpression -> ConditionalExpression()
    * nodeOptional -> [ AssignmentOperator() Expression() ]
    * </PRE>
    */
   public void visit(Expression n);

   /**
    * <PRE>
    * nodeChoice -> "="
    *       | "*="
    *       | "/="
    *       | "%="
    *       | "+="
    *       | "-="
    *       | "&lt;&lt;="
    *       | "&gt;&gt;="
    *       | "&gt;&gt;&gt;="
    *       | "&="
    *       | "^="
    *       | "|="
    * </PRE>
    */
   public void visit(AssignmentOperator n);

   /**
    * <PRE>
    * conditionalOrExpression -> ConditionalOrExpression()
    * nodeOptional -> [ "?" Expression() ":" ConditionalExpression() ]
    * </PRE>
    */
   public void visit(ConditionalExpression n);

   /**
    * <PRE>
    * conditionalAndExpression -> ConditionalAndExpression()
    * nodeListOptional -> ( "||" ConditionalAndExpression() )*
    * </PRE>
    */
   public void visit(ConditionalOrExpression n);

   /**
    * <PRE>
    * inclusiveOrExpression -> InclusiveOrExpression()
    * nodeListOptional -> ( "&&" InclusiveOrExpression() )*
    * </PRE>
    */
   public void visit(ConditionalAndExpression n);

   /**
    * <PRE>
    * exclusiveOrExpression -> ExclusiveOrExpression()
    * nodeListOptional -> ( "|" ExclusiveOrExpression() )*
    * </PRE>
    */
   public void visit(InclusiveOrExpression n);

   /**
    * <PRE>
    * andExpression -> AndExpression()
    * nodeListOptional -> ( "^" AndExpression() )*
    * </PRE>
    */
   public void visit(ExclusiveOrExpression n);

   /**
    * <PRE>
    * equalityExpression -> EqualityExpression()
    * nodeListOptional -> ( "&" EqualityExpression() )*
    * </PRE>
    */
   public void visit(AndExpression n);

   /**
    * <PRE>
    * instanceOfExpression -> InstanceOfExpression()
    * nodeListOptional -> ( ( "==" | "!=" ) InstanceOfExpression() )*
    * </PRE>
    */
   public void visit(EqualityExpression n);

   /**
    * <PRE>
    * relationalExpression -> RelationalExpression()
    * nodeOptional -> [ "instanceof" Type() ]
    * </PRE>
    */
   public void visit(InstanceOfExpression n);

   /**
    * <PRE>
    * shiftExpression -> ShiftExpression()
    * nodeListOptional -> ( ( "&lt;" | "&gt;" | "&lt;=" | "&gt;=" ) ShiftExpression() )*
    * </PRE>
    */
   public void visit(RelationalExpression n);

   /**
    * <PRE>
    * additiveExpression -> AdditiveExpression()
    * nodeListOptional -> ( ( "&lt;&lt;" | "&gt;&gt;" | "&gt;&gt;&gt;" ) AdditiveExpression() )*
    * </PRE>
    */
   public void visit(ShiftExpression n);

   /**
    * <PRE>
    * multiplicativeExpression -> MultiplicativeExpression()
    * nodeListOptional -> ( ( "+" | "-" ) MultiplicativeExpression() )*
    * </PRE>
    */
   public void visit(AdditiveExpression n);

   /**
    * <PRE>
    * unaryExpression -> UnaryExpression()
    * nodeListOptional -> ( ( "*" | "/" | "%" ) UnaryExpression() )*
    * </PRE>
    */
   public void visit(MultiplicativeExpression n);

   /**
    * <PRE>
    * nodeChoice -> ( "+" | "-" ) UnaryExpression()
    *       | PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public void visit(UnaryExpression n);

   /**
    * <PRE>
    * nodeToken -> "++"
    * primaryExpression -> PrimaryExpression()
    * </PRE>
    */
   public void visit(PreIncrementExpression n);

   /**
    * <PRE>
    * nodeToken -> "--"
    * primaryExpression -> PrimaryExpression()
    * </PRE>
    */
   public void visit(PreDecrementExpression n);

   /**
    * <PRE>
    * nodeChoice -> ( "~" | "!" ) UnaryExpression()
    *       | CastExpression()
    *       | PostfixExpression()
    * </PRE>
    */
   public void visit(UnaryExpressionNotPlusMinus n);

   /**
    * <PRE>
    * nodeChoice -> "(" PrimitiveType()
    *       | "(" Name() "[" "]"
    *       | "(" Name() ")" ( "~" | "!" | "(" | &lt;IDENTIFIER&gt; | "this" | "super" | "new" | Literal() )
    * </PRE>
    */
   public void visit(CastLookahead n);

   /**
    * <PRE>
    * primaryExpression -> PrimaryExpression()
    * nodeOptional -> [ "++" | "--" ]
    * </PRE>
    */
   public void visit(PostfixExpression n);

   /**
    * <PRE>
    * nodeChoice -> "(" Type() ")" UnaryExpression()
    *       | "(" Type() ")" UnaryExpressionNotPlusMinus()
    * </PRE>
    */
   public void visit(CastExpression n);

   /**
    * <PRE>
    * primaryPrefix -> PrimaryPrefix()
    * nodeListOptional -> ( PrimarySuffix() )*
    * </PRE>
    */
   public void visit(PrimaryExpression n);

   /**
    * <PRE>
    * nodeChoice -> Literal()
    *       | "this"
    *       | "super" "." &lt;IDENTIFIER&gt;
    *       | "(" Expression() ")"
    *       | AllocationExpression()
    *       | ResultType() "." "class"
    *       | Name()
    * </PRE>
    */
   public void visit(PrimaryPrefix n);

   /**
    * <PRE>
    * nodeChoice -> "." "this"
    *       | "." AllocationExpression()
    *       | "[" Expression() "]"
    *       | "." &lt;IDENTIFIER&gt;
    *       | Arguments()
    * </PRE>
    */
   public void visit(PrimarySuffix n);

   /**
    * <PRE>
    * nodeChoice -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    *       | BooleanLiteral()
    *       | NullLiteral()
    * </PRE>
    */
   public void visit(Literal n);

   /**
    * <PRE>
    * nodeChoice -> "true"
    *       | "false"
    * </PRE>
    */
   public void visit(BooleanLiteral n);

   /**
    * <PRE>
    * nodeToken -> "null"
    * </PRE>
    */
   public void visit(NullLiteral n);

   /**
    * <PRE>
    * nodeToken -> "("
    * nodeOptional -> [ ArgumentList() ]
    * nodeToken1 -> ")"
    * </PRE>
    */
   public void visit(Arguments n);

   /**
    * <PRE>
    * expression -> Expression()
    * nodeListOptional -> ( "," Expression() )*
    * </PRE>
    */
   public void visit(ArgumentList n);

   /**
    * <PRE>
    * nodeChoice -> "new" PrimitiveType() ArrayDimsAndInits()
    *       | "new" Name() ( ArrayDimsAndInits() | Arguments() [ ClassBody() ] )
    * </PRE>
    */
   public void visit(AllocationExpression n);

   /**
    * <PRE>
    * nodeChoice -> ( "[" Expression() "]" )+ ( "[" "]" )*
    *       | ( "[" "]" )+ ArrayInitializer()
    * </PRE>
    */
   public void visit(ArrayDimsAndInits n);

   /**
    * <PRE>
    * nodeChoice -> LabeledStatement()
    *       | Block()
    *       | EmptyStatement()
    *       | StatementExpression() ";"
    *       | SwitchStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | ForStatement()
    *       | BreakStatement()
    *       | ContinueStatement()
    *       | ReturnStatement()
    *       | ThrowStatement()
    *       | SynchronizedStatement()
    *       | TryStatement()
    * </PRE>
    */
   public void visit(Statement n);

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeToken1 -> ":"
    * statement -> Statement()
    * </PRE>
    */
   public void visit(LabeledStatement n);

   /**
    * <PRE>
    * nodeToken -> "{"
    * nodeListOptional -> ( BlockStatement() )*
    * nodeToken1 -> "}"
    * </PRE>
    */
   public void visit(Block n);

   /**
    * <PRE>
    * nodeChoice -> LocalVariableDeclaration() ";"
    *       | Statement()
    *       | UnmodifiedClassDeclaration()
    *       | UnmodifiedInterfaceDeclaration()
    * </PRE>
    */
   public void visit(BlockStatement n);

   /**
    * <PRE>
    * nodeOptional -> [ "final" ]
    * type -> Type()
    * variableDeclarator -> VariableDeclarator()
    * nodeListOptional -> ( "," VariableDeclarator() )*
    * </PRE>
    */
   public void visit(LocalVariableDeclaration n);

   /**
    * <PRE>
    * nodeToken -> ";"
    * </PRE>
    */
   public void visit(EmptyStatement n);

   /**
    * <PRE>
    * nodeChoice -> PreIncrementExpression()
    *       | PreDecrementExpression()
    *       | PrimaryExpression() [ "++" | "--" | AssignmentOperator() Expression() ]
    * </PRE>
    */
   public void visit(StatementExpression n);

   /**
    * <PRE>
    * nodeToken -> "switch"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( SwitchLabel() ( BlockStatement() )* )*
    * nodeToken4 -> "}"
    * </PRE>
    */
   public void visit(SwitchStatement n);

   /**
    * <PRE>
    * nodeChoice -> "case" Expression() ":"
    *       | "default" ":"
    * </PRE>
    */
   public void visit(SwitchLabel n);

   /**
    * <PRE>
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeOptional -> [ "else" Statement() ]
    * </PRE>
    */
   public void visit(IfStatement n);

   /**
    * <PRE>
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * </PRE>
    */
   public void visit(WhileStatement n);

   /**
    * <PRE>
    * nodeToken -> "do"
    * statement -> Statement()
    * nodeToken1 -> "while"
    * nodeToken2 -> "("
    * expression -> Expression()
    * nodeToken3 -> ")"
    * nodeToken4 -> ";"
    * </PRE>
    */
   public void visit(DoStatement n);

   /**
    * <PRE>
    * nodeToken -> "for"
    * nodeToken1 -> "("
    * nodeOptional -> [ ForInit() ]
    * nodeToken2 -> ";"
    * nodeOptional1 -> [ Expression() ]
    * nodeToken3 -> ";"
    * nodeOptional2 -> [ ForUpdate() ]
    * nodeToken4 -> ")"
    * statement -> Statement()
    * </PRE>
    */
   public void visit(ForStatement n);

   /**
    * <PRE>
    * nodeChoice -> LocalVariableDeclaration()
    *       | StatementExpressionList()
    * </PRE>
    */
   public void visit(ForInit n);

   /**
    * <PRE>
    * statementExpression -> StatementExpression()
    * nodeListOptional -> ( "," StatementExpression() )*
    * </PRE>
    */
   public void visit(StatementExpressionList n);

   /**
    * <PRE>
    * statementExpressionList -> StatementExpressionList()
    * </PRE>
    */
   public void visit(ForUpdate n);

   /**
    * <PRE>
    * nodeToken -> "break"
    * nodeOptional -> [ &lt;IDENTIFIER&gt; ]
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(BreakStatement n);

   /**
    * <PRE>
    * nodeToken -> "continue"
    * nodeOptional -> [ &lt;IDENTIFIER&gt; ]
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(ContinueStatement n);

   /**
    * <PRE>
    * nodeToken -> "return"
    * nodeOptional -> [ Expression() ]
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(ReturnStatement n);

   /**
    * <PRE>
    * nodeToken -> "throw"
    * expression -> Expression()
    * nodeToken1 -> ";"
    * </PRE>
    */
   public void visit(ThrowStatement n);

   /**
    * <PRE>
    * nodeToken -> "synchronized"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * block -> Block()
    * </PRE>
    */
   public void visit(SynchronizedStatement n);

   /**
    * <PRE>
    * nodeToken -> "try"
    * block -> Block()
    * nodeListOptional -> ( "catch" "(" FormalParameter() ")" Block() )*
    * nodeOptional -> [ "finally" Block() ]
    * </PRE>
    */
   public void visit(TryStatement n);

}

