/* Generated By:JJTree: Do not edit this line. JavaParserTreeConstants.java */

public interface JavaParserTreeConstants
{
  public int JJTTYPE = 0;
  public int JJTPRIMITIVETYPE = 1;
  public int JJTRESULTTYPE = 2;
  public int JJTNAME = 3;
  public int JJTNAMELIST = 4;
  public int JJTEXPRESSION = 5;
  public int JJTASSIGNMENTOPERATOR = 6;
  public int JJTCONDITIONALEXPRESSION = 7;
  public int JJTCONDITIONALOREXPRESSION = 8;
  public int JJTCONDITIONALANDEXPRESSION = 9;
  public int JJTINCLUSIVEOREXPRESSION = 10;
  public int JJTEXCLUSIVEOREXPRESSION = 11;
  public int JJTANDEXPRESSION = 12;
  public int JJTEQUALITYEXPRESSION = 13;
  public int JJTINSTANCEOFEXPRESSION = 14;
  public int JJTRELATIONALEXPRESSION = 15;
  public int JJTSHIFTEXPRESSION = 16;
  public int JJTADDITIVEEXPRESSION = 17;
  public int JJTMULTIPLICATIVEEXPRESSION = 18;
  public int JJTUNARYEXPRESSION = 19;
  public int JJTPREINCREMENTEXPRESSION = 20;
  public int JJTPREDECREMENTEXPRESSION = 21;
  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 22;
  public int JJTCASTLOOKAHEAD = 23;
  public int JJTPOSTFIXEXPRESSION = 24;
  public int JJTCASTEXPRESSION = 25;
  public int JJTPRIMARYEXPRESSION = 26;
  public int JJTPRIMARYPREFIX = 27;
  public int JJTPRIMARYSUFFIX = 28;
  public int JJTLITERAL = 29;
  public int JJTBOOLEANLITERAL = 30;
  public int JJTNULLLITERAL = 31;
  public int JJTARGUMENTS = 32;
  public int JJTARGUMENTLIST = 33;
  public int JJTALLOCATIONEXPRESSION = 34;
  public int JJTARRAYDIMSANDINITS = 35;


  public String[] jjtNodeName = {
    "Type",
    "PrimitiveType",
    "ResultType",
    "Name",
    "NameList",
    "Expression",
    "AssignmentOperator",
    "ConditionalExpression",
    "ConditionalOrExpression",
    "ConditionalAndExpression",
    "InclusiveOrExpression",
    "ExclusiveOrExpression",
    "AndExpression",
    "EqualityExpression",
    "InstanceOfExpression",
    "RelationalExpression",
    "ShiftExpression",
    "AdditiveExpression",
    "MultiplicativeExpression",
    "UnaryExpression",
    "PreIncrementExpression",
    "PreDecrementExpression",
    "UnaryExpressionNotPlusMinus",
    "CastLookahead",
    "PostfixExpression",
    "CastExpression",
    "PrimaryExpression",
    "PrimaryPrefix",
    "PrimarySuffix",
    "Literal",
    "BooleanLiteral",
    "NullLiteral",
    "Arguments",
    "ArgumentList",
    "AllocationExpression",
    "ArrayDimsAndInits",
  };
}
