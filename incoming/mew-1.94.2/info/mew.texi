\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename mew.info
@settitle Mew(Messaging in the Emacs World)
@c %**end of header

@clear jp
@clear us
@set us

@ifset jp
@c Mew の texinfo
@c Copyright (C) 1996, 1997, 1998, 1999 山本和彦
@c M-x texinfo-format-buffer で info にしてね。
@end ifset
@ifset us
@c Texinfo for Mew
@c Copyright (C) 1996, 1997, 1998, 1999 Kazuhiko Yamamoto
@c Try "M-x texinfo-format-buffer" or makeinfo to get the Info.
@end ifset

@set version 1.94.2
@set modified 1999/11/16
@set X-Mailer: Mew version 1.94 on XEmacs 20.4

@titlepage
@sp 10
@center
@subtitle Messaging in the Emacs World
@ifset jp
@title 『Mew』
@subtitle // みゅう //
@author Copyright @copyright{}1996, 1997, 1998, 1999 山本和彦
@end ifset
@ifset us
@title Mew
@author Copyright @copyright{}1996, 1997, 1998, 1999 Kazuhiko Yamamoto
@end ifset
@end titlepage

@ifset jp
@dircategory Message User Agent
@direntry
* Mew-J: (mew.jis.info).     Messaging in the Emacs World.
@end direntry
@end ifset

@ifset us
@dircategory Message User Agent
@direntry
* Mew: (mew.info).           Messaging in the Emacs World.
@end direntry
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Top
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@ifinfo

@node Top, Overview, (dir), (dir)
@ifset jp
@top Mew マニュアル
@end ifset
@ifset us
@top Mew Manual
@end ifset

@flushright
@ifset jp
山本和彦
作成 1996/02/19
更新@value{modified}
@end ifset
@ifset us
Kazu YAMAMOTO
Created 1996/02/18
Modified@value{modified}
@end ifset
@end flushright

@ifset jp
この Info は Mew バージョン@value{version} について解説します。この Info 
の他に、Mew に関する有益な情報は Mew の公式ホームページ
(http://www.Mew.org/)から得られるかもしれません。
@end ifset
@ifset us
This Info documents Mew version @value{version}. In addition to this
Info, you may find useful information about Mew from Mew's official home
page(http://www.Mew.org/).
@end ifset

@end ifinfo

@menu
@ifset jp
* Overview::                    はじめに読んでね
* Start::                       さぁ始めよう！
* Viewing::                     メッセージを表示する
* Composing::                   メッセージを作成する
* Marks::                       愉快なマークたち
* Refile::                      楽々整理整頓
* Pick::                        お目当てのメッセージを選択するには
* Quit::                        一休み
* Customize::                   自分好みの Mew にするには
* XEmacs::                      アイコンのある生活
* Convention::                  メッセージの作法
* MIME::                        MIME ってなぁに？
* Kanji::                       嗚呼漢字コード
* Policy::                      Mew のこだわり
* History::                     Mew の来た道
* Future::                      Mew の行く道
* Avail::                       入手方法とメーリングリスト
* Ack::                         謝辞
* Copyright::                   著作権について
* Author::                      著者紹介
* Terminology::                 語彙集
* Bib::                         参考文献
* Variable Index::              変数索引
@end ifset
@ifset us
* Overview::                    Read me first
* Start::                       Let's get started
* Viewing::                     Viewing messages
* Composing::                   Composing messages
* Marks::                       Funny marks
* Refile::                      Happy refiling
* Pick::                        How to select messages which you want
* Quit::                        Give me a break
* Customize::                   Customizing Mew
* XEmacs::                      Life with icons
* Convention::                  Email convention
* MIME::                        What's MIME?
* Kanji::                       Ahhh, Kanji code
* Policy::                      Mew's policy
* History::                     Where did Mew come from?
* Future::                      Where will Mew go?
* Avail::                       Availability and mailing-list
* Ack::                         Acknowledgement
* Copyright::                   Copyright
* Author::                      About the author
* Terminology::                 Terminology
* Bib::                         Bibliography
* Variable Index::              Variable Index
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Overview
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Overview, Start, Top, Top
@ifset jp
@chapter はじめに読んでね
@end ifset
@ifset us
@chapter Read me first
@end ifset

@ifset jp
Mew とは、
@end ifset
@ifset us
Mew is an interface to integrate
@end ifset

@itemize @minus
@ifset jp
@item
電子メール
@item
ネットニュース
@item
MIME(Multipurpose Internet Mail Extensions)
@item
PGP(Pretty Good Privacy) 
@end ifset
@ifset us
@item
Email
@item
NetNews
@item
MIME(Multipurpose Internet Mail Extensions)
@item
PGP(Pretty Good Privacy) 
@end ifset
@end itemize

@ifset jp
を統合し、簡単に読み書きするためのインターフェイスです。Mew を使えば、友
達の誕生日にケーキの絵と「Happy Birthday to You」の歌を添えたメッセージ
を暗号化して送れます。ネットニュースの統合は、2.xx 以降で予定しています。
@end ifset
@ifset us
and to make it easy to view and compose them. With Mew you can send a
picture of a birthday cake with the song "Happy Birthday to you" to your
friend, which is encrypted by strong cryptograph. NetNews is supposed to
be integrated in version 2.xx or later.
@end ifset

@ifset jp
Mew は 「Messaging in the Emacs World」 の略です。先頭の M は大文字で表
記し、「みゅう」と読みます。M で始まるかわいらしい単語を選んだ結果 Mew 
になりました。決して漫画の題名や某アイドルの歌、あるいは、関西の会社に因
んでいるわけではありません。:p
@end ifset
@ifset us
Mew is an acronym of "Messaging in the Emacs World". You should spell it
with the first letter capitalized and pronounce it as it is(i.e. meow of
cats). When the author started programming it, he chose a cute word from
his English dictionary. So, Mew.
@end ifset

@ifset jp
Mew バージョン 1.9x の特長を以下に示します。
@end ifset
@ifset us
The features of Mew version 1.9x are as follows:
@end ifset

@itemize @minus
@item
@ifset jp
複雑な構造を持つメッセージを簡単に表示できます。メッセージを表示する作業
は、@samp{SPC} を押すだけです。
@end ifset
@ifset us
You can easily display a very complicated structured message. What you
should do to view messages is just type @samp{SPC}.
@end ifset

@item
@ifset jp
コピー程度のファイルの操作を知っている人ならだれでも簡単に複雑なメッセー
ジを作成できます。
@end ifset
@ifset us
If you know file operations such as copy, you can compose a very
complicated message without any troubles.
@end ifset

@item
@ifset jp
メッセージの一覧表示が終了するまで待たなくても、メッセージを読み始められ
ます。
@end ifset
@ifset us
You can start to read messages before the termination of listing of
messages.
@end ifset

@item
@ifset jp
Summary モードのメッセージの一覧を保存しているので、フォルダを移動した場
合は、更新された部分だけを一覧表示します。
@end ifset
@ifset us
Since Mew preserves lists of messages in Summary mode, you can list up
the gap between the last and current incrementally when you move into.
@end ifset

@item
@ifset jp
メッセージの整頓先を賢く推測します(たくさんメッセージを受け取る人は、こ
れがないと生きていけません)。
@end ifset
@ifset us
Mew neatly guesses a default folder for refiling(Those who receives many
messages cannot live without this feature).
@end ifset

@item
@ifset jp
Draft モードでは、フィールド名、アドレス、氏名、ドメイン名、フォルダ名を
補完できます。
@end ifset
@ifset us
In Draft mode, you can complete field names, Email addresses, 
receiver's names, domain names, and folder names.
@end ifset

@item
@ifset jp
Subject: や Date: などを条件に指定して、簡単にメッセージを選択できます。
@end ifset
@ifset us
You can easily pick up messages which you want by specifying conditions
such as Subject: and Date:.
@end ifset

@item
@ifset jp
便利なマークが提供されています。uuencode した後で分割されたメッセージに
マークを付けて、一度に元のファイルに戻せます。
@end ifset
@ifset us
Useful marks are provided. You can handle "encoded with uuencode then
split" messages with one operation.
@end ifset

@item
@ifset jp
PGP で暗号化されたメッセージを自動的に復号化します。また、電子署名を自動
的に検証します。
@end ifset
@ifset us
Mew automatically decodes a message encrypted with PGP. It also
automatically verifies a signed message.
@end ifset

@item
@ifset jp
PGP を使って、メッセージを簡単に暗号化したり、署名したりできます。
@end ifset
@ifset us
You can easily encrypt or sign a message with PGP.
@end ifset

@item
@ifset jp
MIME の構造を解析したり、PGP の署名を検証したりするのには少し時間がかか
ります。そこで、ユーザがあるメッセージを読んでいる間に、次のメッセージを
あらかじめ処理しておくことで高速性を実現しています。解析されたメッセージ
は、しばらくの間保存されます。
@end ifset
@ifset us
It takes a time to analyze MIME syntax or to verify a PGP
signature. While a user read a message, Mew processes the next message
so as to display the next message faster. Analyzed messages are cached
for a while.
@end ifset

@item
@ifset jp
複数のフォルダを1つのフォルダに見せかけられます。
@end ifset
@ifset us
You can give a single view for multiple folders.
@end ifset

@item
@ifset jp
XEmacs では、Emacs でのキー入力によるインターフェイスと全く同じ機能を持
つアイコン・ベースのインターフェイスが提供されています。
@end ifset
@ifset us
If you use Mew on XEmacs, you can enjoy icon-based interface which is
equivalent to key-based interface.
@end ifset

@end itemize

@ifset jp
Mew は、Emacs 19.28、19.34、20.3 以降、Mule 2.3 以降、および、XEmacs
20.4 以降をサポートしています。これら以外の Emacs、たとえば、Emacs 18、
Nemacs、Mule 1 および XEmacs 19、20.3 などはサポートしていませんし、今後
もサポートする予定はありません。また、beta リリースである Emacs をサポー
トすることもありますが、正式リリースになって仕様が変わったときは、正式リ
リースである Emacs の仕様に合わせます。
@end ifset
@ifset us
Mew is officially supposed to run on Emacs 19.28, 19.34, and 20.3 or
later, Mule 2.3 or later, and XEmacs 20.4 or later. Emacs other than
described, such as Emacs 18, Nemacs, Mule 1, and XEmacs 19 and 20.3 are
not and will not be supported in the future. Mew may support beta
versions of Emacs but Mew conforms the spec of official release when
available.
@end ifset

@ifset jp
このマニュアルで単に Emacs と言った場合には、サポートしているすべてのプ
ラットフォームを意味します。Mule といった場合は、多国語が利用できる Mule
2 と Emacs 20、そして、--with-mule オプション付きでコンパイルした XEmacs
20.4 を指します。これに対し、Bilingual Emacs と言った場合には、英語と 
Latin 1 しかサポートしていない Emacs 19 と --with-mule オプション無しで
コンパイルした XEmacs 20.4 を意味します。また、XEmacs と言った場合には、
グラフィックを楽しめる XEmacs 20.4 を指します。反対に、テキストしか表示
できない Emacs は、Text Emacs と呼びます。
@end ifset
@ifset us
Throughout this manual, "Emacs" means all supported platforms. "Mule"
indicates multi-lingual platforms such as Mule 2, Emacs 20, and XEmacs
20.4 complied with the --with-mule option while "Bilingual Emacs" means
English-and-Latin1 platforms including Emacs 19 and XEmacs 20.4 complied
without the --with-mule option. "XEmacs" indicates graphical platforms
such as XEmacs 20.4 whereas text-only platforms are called "Text Emacs".
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Start
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Start, Viewing, Overview, Top
@ifset jp
@chapter さぁ始めよう！
@end ifset
@ifset us
@chapter Let's get started
@end ifset
@vindex mew-auto-get
@vindex mail-user-agent
@vindex mew-mail-domain-list
@vindex mew-icon-directory

@ifset jp
Mew には次の 5 つのモードがあります。
@end ifset
@ifset us
Mew has the following five modes:
@end ifset

@itemize @minus
@item
@ifset jp
Summary モード :: メッセージの一覧を表示し選択するモード。
@end ifset
@ifset us
Summary mode  :: A mode to list up messages and to select one.
@end ifset

@item
@ifset jp
Virtual モード :: 複数のフォルダからある条件に合致したメッセージを取り出
し、仮想的に1つのフォルダにしたモード。Summary モードに似ている。
@end ifset
@ifset us
Virtual mode  :: A mode to list up messages selected with a specific
condition from folders. It's similar to Summary mode.
@end ifset

@item
@ifset jp
Message モード :: テキストの内容を表示するモード。
@end ifset
@ifset us
Message mode  :: A mode to display a content of text.
@end ifset

@item
@ifset jp
Draft モード   :: メッセージの送信、返答、転送を準備するためのモード。
@end ifset
@ifset us
Draft mode    :: A mode to prepare a message to be sent, answered, and
forwarded.
@end ifset

@item
@ifset jp
Addrbook モード :: アドレス帳にエントリを登録するためのモード。
@end ifset
@ifset us
Addrbook mode :: A mode to register an entry to Addrbook.
@end ifset
@end itemize

@ifset jp
Mew を起動するには、以下の方法があります。
@end ifset
@ifset us
To start Mew, you can choose one from the followings:
@end ifset

@enumerate
@item
@ifset jp
@samp{M-x mew} :: Mew を起動する。@samp{mew-auto-get} が @samp{t} なら、
到着したメッセージを +inbox フォルダに保存しながら、+inbox のメッセージ
を Summary モードに一覧表示。@samp{mew-auto-get} が @samp{nil} なら、単
に +inbox のメッセージを Summary モードに一覧表示。
@end ifset
@ifset us
@samp{M-x mew} :: Execute Mew. If @samp{mew-auto-get} is @samp{t},
messages stored in your spool are fetched to the +inbox folder and
messages in the +inbox folder are listed up in Summary mode. If
@samp{mew-auto-get} is @samp{nil}, simply list up messages in the inbox
folder.
@end ifset

@item
@ifset jp
@samp{C-uM-x mew} :: @samp{mew-auto-get} の値を逆だと思って、@samp{M-x
mew} を実行する。
@end ifset
@ifset us
@samp{C-uM-x mew} :: Perform @samp{M-x mew} thinking that 
@samp{mew-auto-get} is reversed.
@end ifset

@item
@ifset jp
@samp{M-x mew-send} :: メッセージを書くための Draft モードへ移行する。
@end ifset
@ifset us
@samp{M-x mew-send} :: Enter Draft mode for message composing.
@end ifset

@item
@ifset jp
@samp{C-xm} :: @samp{mail-user-agent} が設定されている場合、Draft モード
へ移行する。
@end ifset
@ifset us
@samp{C-xm} :: Enter Draft mode for message composing if
@samp{mail-user-agent} is configured.
@end ifset
@end enumerate

@ifset jp
Text Emacs で Mew を起動した際には、Mew を型どった「/\\ - \\/」という図
形がくるくると回るデモが始まります。XEmacs では、可愛い2匹の子猫がオープ
ニングを飾ります。
@end ifset
@ifset us
When Mew is executed on Text Emacs, a shape of "/\\ - \\/", which stands
for Mew, spins. Two cute cats appear on the cover page on XEmacs.
@end ifset

@ifset jp
到着したメッセージを +inbox フォルダに取り込む際にはパスワードを訊かれる
ことがあります。パスワードを入力する前に以下の条件のいずれかが満たされて
いることを確認しましょう。

@itemize @minus
@item
Emacs がローカルのコンピュータで動いている
@item
Emacs がリモートのコンピュータで動いているが、なんらかの暗号手段を使って
通信している。
@end itemize

どちらの条件も満たされない場合は、パスワードを入力しないで下さい。入力す
ると盗聴される恐れがあります。
@end ifset
@ifset us
When fetching messages stored in your spool, you may be required to input
your password. Before you type your password, carefully see if either
the following conditions is satisfied:

@itemize @minus
@item
Emacs is running on a local computer
@item
Though Emacs is running on a remote computer, an encryption mechanism is
used for the communication.
@end itemize

If both conditions are not satisfied, don't input password. Otherwise,
your password would be wire-tapped.
@end ifset

@ifset jp
もし Mew が起動されない場合は、Mew や IM がインストールされているか、ま
た以下が組織の設定ファイルか自分の .emacs で設定されているか確かめて下さ
い。
@end ifset
@ifset us
If Mew is not executed, see whether or not both Mew and IM is installed
and/or whether or not the following configurations are put into a site
configuration file or your ".emacs".
@end ifset

@example
(autoload 'mew "mew" nil t)
(autoload 'mew-send "mew" nil t)
(setq mew-mail-domain-list '("your mail domain"))
(setq mew-icon-directory "a directory where Mew's image files are installed.")
(autoload 'mew-user-agent-compose "mew" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'mew-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'mew-user-agent
      'mew-user-agent-compose
      'mew-draft-send-letter
      'mew-draft-kill
      'mew-send-hook))
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Viewing
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Viewing, singlepart, Start, Top
@ifset jp
@chapter メッセージを表示する
@end ifset
@ifset us
@chapter Viewing messages
@end ifset

@ifset jp
@samp{M-x mew} と入力すると、Mew はスプールのメッセージを +inbox フォル
ダに移して以下のように一覧表示します。
@end ifset
@ifset us
If you input @samp{M-x mew}, Mew moves messages from your spool to the
+inbox folder and displays as follows:
@end ifset

@example
@ifset jp
    1  07/17 いとぢゅん     v6: items to be no in6_pcbnotify()がなにも
    2  07/18 歌代先生       Re: behavior after これ、mark-ring がどんど
    3  07/19 のむさん       refile info.       乃村です。遅くなりました。
@end ifset
@ifset us
    1  07/17 Itojun         v6: items to be no in6_pcbnotify() doesn't
    2  07/18 Utashiro       Re: behavior after I'm afraid that mark-ring
    3  07/19 Nom-sun        refile info.       Sorry for my late respon
@end ifset
@end example

@ifset jp
これを Summary モードといいます。ここでは、主に Summary モードでのメッセー
ジの読み方について説明します。
@end ifset
@ifset us
We call this Summary mode. This section mainly explains how to read
messages in Summary mode.
@end ifset

@menu
@ifset jp
* singlepart::                  読み方の基礎
* multipart::                   MIME を表示する
* pgp-viewing::                 PGP/MIME を表示する
* folder::                      フォルダの更新と移動
* sum-write::                   送信、返答、転送
* features::                    便利な機能
* sorting::                     メッセージのソート
* illegal::                     化けたメッセージ
@end ifset
@ifset us
* singlepart::                  Reading Basis
* multipart::                   Displaying MIME
* pgp-viewing::                 Visualizing PGP/MIME
* folder::                      Updating and visiting folder
* sum-write::                   Write, answer, and forward
* features::                    Useful features
* sorting::                     Sorting messages
* illegal::                     Scrambled message
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node singlepart, multipart, Viewing, Viewing
@ifset jp
@section 読み方の基礎
@end ifset
@ifset us
@section Reading Basis
@end ifset
@vindex mew-file-max-size

@ifset jp
メッセージを上から順に読んでいくのであれば、@samp{SPC} を適宜押すだけで
す。簡単でしょ？
@end ifset
@ifset us
To read messages in arrival order, type @samp{SPC} to display
them. That's it. It's easy, isn't it?
@end ifset

@ifset jp
しかしそれだけではあんまりなので、以下にページを操作する基本的なコマンド
を示します。
@end ifset
@ifset us
Yet this might not be comprehensive, so we list up basic commands for
page process as follows:
@end ifset

@table @samp
@ifset jp
@item SPC
メッセージを読み進める。つまり、メッセージを表示し、スクロールさせ、他の
メッセージに移動して表示する。カーソルが移動する方向は、@xref{level-one} 
を参照のこと。
@item DEL
現在のメッセージを上にスクロールさせる。不必要なヘッダフィールドは、ウイ
ンドウの上に隠れている。よって、@samp{DEL} を入力すると、それらが現れる。
@item .
メッセージが @samp{mew-file-max-size} を越えている場合は、MIME の解析が
中止され、メッセージの先頭部分が生でメッセージ・バッファに表示される。こ
のような場合に、@samp{.} を押すと、強制的に MIME が解析されメッセージが
表示される。
@item ,
MIME 解析をしていない生のメッセージを表示する。メッセージの内 
@samp{mew-file-max-size} で指定されたバイト数以下の部分を表示する。
@samp{C-u} と共に呼ばれると、メッセージ全体を生で表示する。
@item RET
現在のメッセージを1行上にスクロールする。
@item M-RET
@item -
現在のメッセージを1行下にスクロールする。
@end ifset
@ifset us
@item SPC
Read through messages. That is, display a message, scroll it, and
move-then-display another message. Refer to @xref{level-one} to know
which direction the cursor moves.
@item DEL
Back-scroll this message. Unnecessary header fields are hidden over the
window. Type @samp{DEL} to see them when a message is displayed.
@item .
If the size of a message exceeds @samp{mew-file-max-size}, MIME analysis
is skipped then the beginning of the raw message is displayed. In this
case, type @samp{.} to force MIME analysis.
@item ,
Display this message in the raw format(i.e. without MIME analysis). The
beginning part of the message, whose size specified by
@samp{mew-file-max-size}, is displayed. If called with @samp{C-u}, the
entire message is displayed in the raw format.
@item RET
Make this message scroll up with one line.
@item M-RET
@item -
Make this message scroll down with one line.
@end ifset
@end table

@table @samp
@ifset jp
@item C-n
下の行へ移動。
@item C-p
上の行へ移動。
@item n
下方向に移動し表示。対象となるのは、パート、@samp{*} マークの付いたメッ
セージ、マークの付いていないメッセージ。@samp{C-u} と共に呼ばれると、パー
ト部分を飛ばす。
@item p
上方向に移動し表示。対象となるのは、パート、@samp{*} マークの付いたメッ
セージ、マークの付いていないメッセージ。@samp{C-u} と共に呼ばれると、パー
ト部分を飛ばす。
@item j
入力された番号にしたがってメッセージへ移動。
@end ifset
@ifset us
@item C-n
Go to the next line.
@item C-p
Go to the previous line.
@item n
Move to below then display. Targets includes parts, messages marked with
@samp{*}, and non-marked messages. When called with @samp{C-u}, parts
are skipped.
@item p
Move to above then display. Targets includes parts, messages marked with
@samp{*}, and non-marked messages. When called with @samp{C-u}, parts
are skipped.
@item j
Jump to a message according to the number which you input.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node multipart, pgp-viewing, singlepart, Viewing
@ifset jp
@section MIME を表示する
@end ifset
@ifset us
@section Displaying MIME
@end ifset
@vindex mew-end-of-message-string
@vindex mew-end-of-part-string

@ifset jp
マルチパートを読むのは別に大変なことではありません。今まで通り、
@samp{SPC} を押していけばよいだけです。
@end ifset
@ifset us
It's not difficult to read a multipart message. As usual, just type
@samp{SPC}.
@end ifset

@ifset jp
マルチパートのメッセージは、以下のように日付の左に "M" という印が付いて
います。
@end ifset
@ifset us
A multipart message is marked with "M" on the left side of date as
follows:
@end ifset

@example
@ifset jp
    4  07/19 しげやさん     Re: imget very fir ということで、こんなもん
    5 M07/20 いとぢゅん     MagicPoint         今度の発表で使用する資料
    6  07/21 もとのりさん   Re: imget very fir POPでサーバにメッセージの
@end ifset
@ifset us
    4  07/19 Shigeya-san    Re: imget very fir OK, how about this?
    5 M07/20 Itojun         MagicPoint         I made the material of
    6  07/21 Motonori-san   Re: imget very fir Preserving messages on P
@end ifset
@end example

@ifset jp
"5" のところで、@samp{SPC} を押すと、ヘッダを Message モードに表示すると
共に、以下のように Summary モードでマルチパートの構造を簡素に表示します。
@end ifset
@ifset us
When you type @samp{SPC} on "5", its header is displayed in Message mode
then its multipart structure is displayed in Summary mode as follows:
@end ifset

@example
@ifset jp
    4  07/19 しげやさん     Re: imget very fir ということで、こんなもん
    5 M07/20 いとぢゅん     MagicPoint         今度の発表で使用する資料
B    2  Image/Gif                    MagicPoint のロゴ            mgp.gif
Q    3  Application/Postscript       資料                         ohp.ps
    6  07/21 もとのりさん   Re: imget very fir POPでサーバにメッセージの
@end ifset
@ifset us
    4  07/19 Shigeya-san    Re: imget very fir OK, how about this?
    5 M07/20 Itojun         MagicPoint         I made the material of
B    2  Image/Gif                    MagicPoint logo              mgp.gif
Q    3  Application/Postscript       Presentation Material        ohp.ps   
    6  07/21 Motonori-san   Re: imget very fir Preserving messages on P
@end ifset
@end example

@ifset jp
もし、パート 1 が Text/Plain なら、Summary モードにはパート 1 は可視化さ
れず、そのかわりパート 1 がヘッダと共に Message モードに表示されます。
@end ifset
@ifset us
If the first part is Text/Plain, the first part is not visualized in
Summary mode but the first part is displayed with its header in Message
mode.
@end ifset

@ifset jp
マルチパートの各行は

@itemize @minus
@item
マーク(Content-Transfer-Encoding:)
@item
パート番号
@item
データの型(Content-Type:)
@item
説明(Content-Description:)
@item
ファイル名(Content-Disposition:)
@end itemize

から構成されています。Content-Description: はパートに対する Subject: と
考えていいでしょう。この表示は Draft モードの添付領域とほとんど同じです。
それぞれのカラムの詳しい意味は、@xref{mime-comp} を参照して下さい。
@end ifset

@ifset us
Each line of multipart consists of 

@itemize @minus
@item
marks (Content-Transfer-Encoding:)
@item
part number
@item
data type (Content-Type:)
@item
description (Content-Description:)
@item
file name (Content-Disposition:).
@end itemize

Content-Description can be considered Subject: for each part. This
format is very similar to that of attachment region in Draft mode. For
more information of each column, please refer to @xref{mime-comp}.
@end ifset

@ifset jp
@samp{SPC} や @samp{n} でパート 1 へ進めば、そのパートがデータ型に応じて
表示されます。たとえば、Text/Plain なら Message モードで、PostScript な
ら ghostview で表示されます。
@end ifset
@ifset us
If you type @samp{SPC} or @samp{n}, the cursor moves onto part 1 and the
content is displayed according to its data type. For instance,
Text/Plain is showed in Message mode and PostScript is visualized with
ghostview
@end ifset

@ifset jp
@samp{n} や @samp{p} は、パート部分まで含んだ行を移動することに注意して
下さい。パート部分を飛ばして下のメッセージを表示するには @samp{C-u n} と
入力して下さい。また、パート部分を飛ばして 1 つ上のメッセージを表示する
には @samp{C-u p} と入力して下さい。
@end ifset
@ifset us
Please note that @samp{n} and @samp{p} moves lines including multipart.
To display the message below skipping multipart, type @samp{C-u n}.
Likewise, to display the message above (not this message), input
@samp{C-u p}.
@end ifset

@ifset jp
Mew は、MIME を再帰的に処理します。以下は転送されたマルチパートのメッセー
ジの例です。
@end ifset
@ifset us
Mew processes MIME recursively. The following example is a forwarded
multipart message.
@end ifset

@example
@ifset jp
  501 M02/22 Itojun         Fw: MagicPoint           萩野先生からこんな
     2  Message/Rfc822               MagicPoint                          
B    2.2  Image/Gif                    MagicPoint のロゴ          mgp.gif
Q    2.3  Application/Postscript       資料                       ohp.ps
@end ifset
@ifset us
  501 M02/22 Itojun         Fw: MagicPoint           Itojun send me this 
     2  Message/Rfc822               MagicPoint                       
B    2.2  Image/Gif                    MagicPoint logo            mgp.gif
Q    2.3  Application/Postscript       Presentation Material      ohp.ps
@end ifset
@end example

@ifset jp
(メモ) テキスト以外のデータを、シングルパートとしてメッセージに格納する
のは、書式としては間違いではありませんが、お勧めできません。マルチパート
を作成し、そのパート 1 に説明のテキストを、パート 2 にテキスト以外のデー
タを入れる作法をお勧めします。
@end ifset
@ifset us
(Memo) I strongly discourage you to embed an object other than text as a
top level single part to a message directly. Rather, I do recommend to
make multipart whose part 1 is description text for part 2 and part 2 is
an object other than text. 
@end ifset

@ifset jp
テキスト以外のデータが本文に直接格納されているメッセージに対し、Mew はこ
れをあたかもマルチパートのように表示します。
@end ifset
@ifset us
Mew displays a message which directory contains a single part other than
text as a multipart.
@end ifset

@ifset jp
このように MIME の構造は複雑になりうるので、解析するのには時間がかかる場
合があります。しかし、Mew は次に読まれるメッセージを予想し、ユーザが現在
のメッセージを読んでいる間に、次のメッセージをあらかじめ解析しておくこと
で高速性を実現しています。解析されたメッセージは、しばらくの間保存されま
す。
@end ifset
@ifset us
Since the syntax of MIME messages can be complex, it sometime takes much
time to analyze the syntax. However, Mew guesses the message to be read
next and analyzes it beforehand while the user are reading the current
message. Analyzed messages are cached for a while.
@end ifset

@ifset jp
メッセージの終りの部分がはっきりと分かるように、Mew はメッセージの最後に 
"[End of message]" という文字列を表示します。また、パートの終りでは、
"[Message is continued]" という文字列を表示します。(Emacs の機能不足によ
り色は付きません。) この機能は Emacs 19.28 やそれを基にしている Mule 2.3 
などでは利用できません。これらの文字列はそれぞれ、
@samp{mew-end-of-message-string} と @samp{mew-end-of-part-string}で指定
できます。
@end ifset
@ifset us
To notice the end of a message explicitly, Mew displays the string "[End
of message]" in the end of the message. In the end of each part, Mew
displays the string "[Message is continued]". (Due to the limitation of
Emacs, color is not available.) This feature is not available on Emacs
19.28, Mule 2.3 based on Emacs 19.28, and etc. These strings are
customized by @samp{mew-end-of-message-string} and
@samp{mew-end-of-part-string}, respectively.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node pgp-viewing, folder, multipart, Viewing
@ifset jp
@section PGP/MIME を表示する
@end ifset
@ifset us
@section Visualizing PGP/MIME
@end ifset
@vindex mew-use-pgp-cached-passphrase
@vindex mew-x-pgp-key-list
@vindex mew-prog-pgp
@vindex mew-prog-pgp2
@vindex mew-prog-pgp5
@vindex mew-prog-gpg

@ifset jp
今までと同様 @samp{SPC} などを利用することで、Mew では PGP で暗号化や電
子署名を施されたメッセージを簡単に表示できます。まず、簡単な例から紹介し
ましょう。
@end ifset
@ifset us
Basic commands such as @samp{SPC} visualize messages signed or encrypted
with PGP as well. Let's start with a simple example:
@end ifset

@example
@ifset jp
    8 S07/22 酒井さん       Re: home was full  MsgStore.pm のバグです
    9 E07/23 ニートすみかわ Wine               おはようからおやすみま
@end ifset
@ifset us
    8 S07/22 Sakai-san      Re: home was full  A bug of MsgStore.pm
    9 E07/23 Neat Sumikawa  Wine               From good morning to
@end ifset
@end example

@ifset jp
8 番と 9 番のメッセージには、それぞれ "S" マークと "E" マークが付いてい
ます。これはそれぞれ、本文全体が署名されている、および、暗号化されている
ことを意味します。
@end ifset
@ifset us
Massage 8 and 9 is marked with "S" and "E", respectively. This means
that the *body* is signed and encrypted, respectively.
@end ifset

@ifset jp
PGP/MIME では、一部のパートに電子署名を施したり、暗号化したりできます。
この場合このようなマークは付きません。マークが付くのは、本文全体が対象に
なっている場合です。
@end ifset
@ifset us
PGP/MIME also allows to sign and/or encrypt some parts of a message. In
this case, these marks don't appear. It is a message whose *body* is
singed or encrypted that the "S" mark or the "E" mark appears on.
@end ifset

@ifset jp
また、単に署名や暗号化と言いましたが、これは最終的な処理が署名や暗号化で
あったことを意味しています。やや複雑な話になりますが、もしかすると前者は
本文全体を暗号化した後署名したのかもしれませんし、後者は一部のパートに署
名しさらに全体を暗号化している可能性もあります。
@end ifset
@ifset us
"Sign" and "encrypt" used above means the last procedure applied the
body is "sign" and "encrypted", respectively. Examples above may have
been produced with more complex process. As far as the firmer message,
for instance, the body may have been signed after encrypting the body.
It is likely that some part of the latter message was first signed then
the body was encrypted.
@end ifset

@ifset jp
本文全体、あるいは、一部のパートが暗号化されている場合、Mew はパスフレー
ズを訊いてきます。入力されたパスフレーズは、あなたの秘密鍵を復号化するの
に使われます。そして、復号化された秘密鍵によって、暗号化されているメッセー
ジを解くわけです。
@end ifset
@ifset us
If some parts or the body is encrypted, Mew asks you to input your
pass-phrase to get plain text. The pass-phrase is used to decrypt your
secret key. The secret key is then used to decrypt cipher text. 
@end ifset

@ifset jp
ある PGP/MIME メッセージを表示するには、暗号化された数だけパスフレーズを
入力する必要があります。これは Mew が安全を期して、通常パスフレーズを保
存しないからです。もしこれがわずらわしいなら、以下の設定で Mew にパスフ
レーズをしばらくの間保存させることも可能です。パスフレーズを保存する際の
注意事項については、@xref{folder}を参照して下さい。
@end ifset
@ifset us
To visualize PGP/MIME, you need to input your pass-phrase every time you
encounter cipher text.  This is because Mew does not cache pass-phrases
anywhere for security reasons. If you feel this is inconvenient, set the
following configuration so that your pass-phrases are cached for a
while. Please refer to @xref{folder} to know what you should take care
to use this feature.
@end ifset

@example
(setq mew-use-pgp-cached-passphrase t)
@end example

@ifset jp
パスフレーズを保存しない通常の設定でも、一旦復号化されたメッセージはしば
らく保存されるので、2回目の表示にはパスフレーズを訊かれないかもしれませ
ん。
@end ifset
@ifset us
Since decrypted messages are cached for a while, you perhaps need not to
input your pass-phrase at the next time when the message will be
displayed, even if you do not use the pass-phrase cache.
@end ifset

@ifset jp
一方、通信相手の署名を検証するためには相手の公開鍵が利用できればよいので、
パスフレーズを訊かれることはありません。
@end ifset
@ifset us
To verify signatures, senders' public keys are used. So, you are not
asked to type your pass-phrase.
@end ifset

@ifset jp
Mew は自動的に電子署名を検証したり、入力されたパスフレーズを使って暗号メッ
セージを復号化したりして、元のメッセージを表示します。そこで、ユーザが署
名の存在に気づかないかもしれませんし、どの部分が暗号化されていたのか分か
らないかもしれません。
@end ifset
@ifset us
Since Mew automatically verifies signatures and/or decrypts cipher text
with inputed pass-phrase, it is likely that users don't notice that the
original message has signatures and/or which parts were encrypted.
@end ifset

@ifset jp
そこで、検証の結果やどの部分が暗号化されていかをユーザに通知するために、
Mew は以下のようにヘッダに X-Mew: フィールドを挿入します。
@end ifset
@ifset us
To tell users the results of verification of signatures or which parts
were decrypted, Mew inserts the X-Mew: field in the header as follows:
@end ifset

@example
X-Mew: <body> PGP decrypted.
        Good PGP sign "kazu@@mew.org" COMPLETE
@end example

@ifset jp
"<>" 内の番号は、どのパートの結果であるかを示しています。"body" は、メッ
セージの本文全体が保護されていることを意味します。この例では、メッセージ
全体が kazu によって署名され、受信者のために暗号化されています。Mew はま
ずこれを復号化し、そして署名を検証しています。署名は正しいので、
kazu@@mew.org という ID の付いた秘密鍵で署名されたときから、内容は変更さ
れていないと分かります。この署名の検証に使われた公開鍵の「有効性」は 
"complete" です。よって、受信者はこの公開鍵が ID が示すユーザに属してい
ると信頼していることになります。つまり、このメッセージは信頼をおいている
公開鍵によって検証され結果が正しいので、改竄されていないということになり
ます。
@end ifset
@ifset us
The number in "<>" indicates which part was protected with PGP. "body"
means the body was protected. This example tells us that the body was
singed by kazu then encrypted for the reader. Mew first decrypted it
then verified its signature of the decrypted message. The signature is
good. So, nobody has modified the content since it was signed by the
secret key whose ID is kazu@@mew.org. The validity of the public key
used to verify the signature is "complete". Thus, the receiver believes
that the public key actually belongs to the user whom the ID tells. That
is, this message was verified by the trusted public key AND its results
was good, so no alternation was found.
@end ifset

@ifset jp
以下の例では、まずマルチパートである本文全体の電子署名が検証され、その後
パート 2 のメッセージ全体が復号化されています。つまり、作成時には、まず
パート 2 が暗号化され、そして本文全体が署名されたことが分かります。
@end ifset
@ifset us
In the following example, the signature of the body, which is multipart,
was first verified then part 2, which is a message, was decrypted. That
is, the composing process was that part 2 was first encrypted then the
entire body was signed.
@end ifset

@example
X-Mew: <body multi> Good PGP sign "kazu@@mew.org" COMPLETE
X-Mew: <2 message> PGP decrypted.
@end example

@ifset jp
するどい人なら、悪い人があらかじめ X-Mew: フィールドを挿入しておき、あなた
をだますかもしれないと思うかもしれません。でも大丈夫です。Mew は、ヘッダに
ある X-Mew: をあらかじめ削り、本物の X-Mew: フィールドを挿入しますから。
@end ifset
@ifset us
Smart users may wonder what if a bad guy or gal sends you a message with
an illegal X-Mew: field. Take it easy. First Mew carefully removes the
X-Mew: field then inserted a valid X-Mew: field to the header.
@end ifset

@ifset jp
X-Mew: フィールドは他にもさまざまな結果を伝えてくれます。たとえば、署名
を検証するための公開鍵がないとか、復号化に失敗したなどです。以下の例は、
鍵 ID が 0x1B8BF431 である公開鍵がないことを示しています。
@end ifset
@ifset us
X-Mew: tells you many other types of result. For example, no public key
is available, the decryption failed, etc. The following example indicates
that the public key whose key ID is 0x1B8BF431 is missing.
@end ifset

@example
X-Mew: <body multi> No his/her public key. ID = 0x1B8BF431
@end example

@ifset jp
この場合、@samp{C-cC-f} と入力すると、Mew は 
@samp{mew-pgp-keyserver-url-template} で指定された URL を使ってこの公開
鍵の入手を試みます。もし、X-Mew: フィールドがない場合は、@samp{C-cC-f} 
は From: を ID と考えます。また、@samp{C-uC-cC-f} は、X-Mew: フィールド
に加えて @samp{mew-x-pgp-key-list} に指定されたフィールドも鍵 ID を切り
出す対象とし、公開鍵の入手を試みます。
@end ifset
@ifset us
In this case, if you type @samp{C-cC-f}, Mew tries fetching this public
key using URL specified in @samp{mew-pgp-keyserver-url-template}. If the
X-Mew: field does not exist, @samp{C-cC-f} takes the From: field as ID.
Also, @samp{C-uC-cC-f} extracts key IDs from fields specified in
@samp{mew-x-pgp-key-list} in addition to the X-Mew: field then tries
fetching them.
@end ifset

@ifset jp
Mew では PGPv2、PGPv5、GNUPG に対応しています。これらは Summary モードに
おいて、@samp{C-cC-v} で切替え可能です。これら複数の PGP を使いたい人は
@samp{mew-prog-pgp2}、@samp{mew-prog-pgp5}、@samp{mew-prog-gpg} に対し、
それぞれ PGPv2、PGPv5、GNUPG のコマンド名を設定して下さい。また、Mew の
起動直後に利用する PGP のコマンド名を @samp{mew-prog-pgp} に設定して下さ
い。なおパスフレーズは、それぞれの PGP に対し独立に保存されます。
@end ifset
@ifset us
Mew supports PGPv2, PGPv5, and GNUPG. You can select one of those by
@samp{C-cC-v} in Summary mode. If you want to use those PGPs, you should
set the command name of PGPv2, PGPv5, and GNUPG to @samp{mew-prog-pgp2},
@samp{mew-prog-pgp5}, and @samp{mew-prog-gpg}, respectively. Also, set
the default PGP name to @samp{mew-prog-pgp}. Note that pass-phrases are
cached independently for each PGP.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node folder, sum-write, pgp-viewing, Viewing
@ifset jp
@section フォルダの更新と移動
@end ifset
@ifset us
@section Updating and visiting folder
@end ifset
@vindex mew-use-cached-passwd

@ifset jp
到着したメッセージを +inbox フォルダに移動し、一覧を表示するには 
@samp{i} を使います。一覧は、+inbox フォルダの Summary モードの最後に挿
入されます。
@end ifset
@ifset us
To fetch arrived messages, store them to the +inbox folder and list up
them, use @samp{i}. The list is appended to the bottom of Summary mode
for the +inbox folder.
@end ifset

@ifset jp
このときパスワードを訊かれることがあります。パスワードを入力する際の注意
事項については、@xref{Start} を参照して下さい。パスワードを何回も入力す
るのが面倒な人は、パスワードを保存する機能を利用して下さい。これには以下
設定が必要です。
@end ifset
@ifset us
At that time, you may be required to input your password.  Please refer
to @xref{Start} to know what you should take care when inputing
password. If you get sick of inputing your password time to time, please
make use of the password-cache mechanism with following configuration.
@end ifset

@example
(setq mew-use-cached-passwd t)
@end example

@ifset jp
パスワードの保存機能を使うと、パスワードが保存されている間は、パスワード
の入力を省略できます。パスワードは Emacs の中に保存されていますので、席
を空けて Emacs が他の人に使用されることがないよう注意して下さい。
@end ifset
@ifset us
If you use this password-cache mechanism, you can omit password while
the password is cached. Since passwords are cached in Emacs, you should
take care so that other people cannot touch your computer.
@end ifset

@ifset jp
フォルダの一覧を再表示するには、@samp{s} を使います。このコマンドを対話
的に使うと範囲を訊いてきます。Mew で重要な範囲の意味を以下に示します。
@end ifset
@ifset us
To list up messages in Summary mode or flush it, use @samp{s}. This
command asks you to input range. Important ranges for Mew are as
follows:
@end ifset

@table @samp
@ifset jp
@item update
「Summary モードの最後のメッセージの次」から「フォルダ内の最後のメッセー
ジ」まで。つまり、Summary モードと実際のフォルダ内のメッセージの差分。
@item all
フォルダ内のメッセージすべて。Summary モードの表示がおかしくなったときに、
内容を一新するために用いる。
@end ifset
@ifset us
@item update
From "the last message in the Summary mode + 1" to "the last message in
the corresponding folder". That is, the gap between the Summary mode and
the existing folder
@item all
All messages in the folder. When Summary mode becomes inconsistent, use
this range to flush the list.
@end ifset
@end table

@ifset jp
+draft 以外のフォルダでは、デフォルトの範囲が @samp{update} となっていま
す。ですから、@samp{s} の後に @samp{RET} を押すだけで、現在のフォルダに
対し最新の一覧を得られることになります。+draft のデフォルトの範囲は 
@samp{all} です。
@end ifset
@ifset us
The default range is usually @samp{update}. So, just type @samp{RET}
after @samp{s} to get the up-to-date list of the current folder.
@end ifset

@ifset jp
Mew ではあまり重要ではありませんが、以下の範囲も指定できます。
@end ifset
@ifset us
You can specify the following ranges though they are not important for
Mew.
@end ifset

@table @samp
@ifset jp
@item <num1>-<num2>
<num1> から <num2> まで。
@item <num>:N
<num> から N 個。
@item <num>:-N
<num> までの N 個。
@item first:N
最初から N 個。
@item prev:N
現在のメッセージまでの N 個。
@item next:N
現在のメッセージから N 個。
@item last:N
最後のメッセージまでの N 個。
@end ifset
@ifset us
@item <num1>-<num2>
From <num1> to <num2>
@item <num>:N
N messages from <num>
@item <num>:-N
N messages to <num>
@item first:N
N messages from the first
@item prev:N
N messages to the current
@item next:N
N messages from the current
@item last:N
N messages to the last
@end ifset
@end table

@ifset jp
フォルダの移動には @samp{g} を入力して下さい。フォルダ名は @samp{TAB} で
補完できます。もし、移動した際に Summary モードの一覧が古いと判断した場
合は、自動的に差分を追加表示します。
@end ifset
@ifset us
To go to another folder, type @samp{g}. You can make use of folder name
completion with @samp{TAB}. When you move a folder and if Mew considered
that its list of messages are old, Mew automatically displays the
differences.
@end ifset

@ifset jp
出てきたコマンドを以下にまとめます。
@end ifset
@ifset us
Here is a summary for commands up above.
@end ifset

@table @samp
@ifset jp
@item i
到着したメッセージを +inbox フォルダに移動し一覧を表示する。
@item s
フォルダの一覧を再表示する。
@item g
フォルダを移動する。
@end ifset
@ifset us
@item i
Fetch arrived messages, store them to the +inbox folder and list up them
@item s
List up messages in Summary mode or flush it.
@item g
Go to another folder.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node sum-write, features, folder, Viewing
@ifset jp
@section 送信、返答、転送
@end ifset
@ifset us
@section Write, answer, and forward
@end ifset

@ifset jp
メッセージの送信、返答、転送には、以下のコマンドを使います。
@end ifset
@ifset us
The following commands are prepared for writing, replying, and
forwarding a message.
@end ifset

@table @samp
@ifset jp
@item w
メッセージを書く。新しい草稿が Draft モードに用意される。
@item a
現在のメッセージに返答する。Draft モードに草稿が用意され、To: や Cc: が
自動的に決定される。
@item A
現在のメッセージに返答する。Draft モードに草稿が用意され、To: や Cc: が
自動的に決定された後、本文が引用される。
@item f
現在のメッセージを第3者に転送する。Draft モードに草稿が用意され、現在の
メッセージが自動的に添付される。
@item F
@samp{@@} マークの付いたメッセージを第3者に転送する。Draft モードに草稿
が用意され、@samp{@@} マークの付いたメッセージが自動的に添付される。詳し
くは @xref{multi mark} を参照のこと。
@end ifset
@ifset us
@item w
Write a message. A new draft is prepared in Draft mode.
@item a
Answer to this message. A new draft is prepared in Draft mode. Mew
automatically decides To: and Cc:.
@item A
Answer to this message. A new draft is prepared in Draft mode. Mew
automatically decides To: and Cc: and cites the body.
@item f
Forward this message to a third person. A new draft is prepared in Draft
mode and this message is automatically attached.
@item F
Forward messages marked with @samp{@@} to a third person. A new draft is
prepared in Draft mode and this message is automatically attached. For
more information, refer to @xref{multi mark}.
@end ifset
@end table

@ifset jp
エラーメッセージが返ってきたら、以下のコマンドで修正し再挑戦しましょう。
@end ifset
@ifset us
If an error message returns, let's give one more try with the following
commands.
@end ifset

@table @samp
@ifset jp
@item E
メッセージの再編集。または、MIME 形式でカプセル化されて戻ってきたメッセー
ジの再編集。+draft フォルダでは、そのメッセージを直接編集。その他のフォ
ルダでは +draft フォルダにコピーしてから編集。
@item M-e
"----- Original message follows -----" の後にオリジナルのメッセージが
引用されているエラーメッセージの再編集。
@end ifset
@ifset us
@item E
Edit this message again to retry sending. Or edit this rfc822 part
typically included MIME-encapsulated error message. In the +draft
folder, it just edits the message. Otherwise, copy the message to the
+draft folder, then edit.
@item M-e
Edit an old fashioned error message in which the original message is
encapsulated after "----- Original message follows -----".
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node features, sorting, sum-write, Viewing
@ifset jp
@section 便利な機能
@end ifset
@ifset us
@section Useful features
@end ifset
@vindex mew-use-folders-file-p

@ifset jp
Mew では、Summary モードに以下のような便利なコマンドが用意されています。
@end ifset
@ifset us
Mew provides you with convenient commands in Summary mode as follows:
@end ifset

@table @samp
@ifset jp
@item v
「Summary モードのみ」と「Summary & Message モード」の切り替え。
「Summary モードのみ」を選んでいる場合は、@samp{d} は次のメッセージを表
示しないので、連続してすばやく @samp{D} マークを付けられる。
@item M-l
現在の行を Summary モードの中央に移動させる。
@item C-cC-s
Message モードで順方向段階的検索。
@item C-cC-r
Message モードで逆方向段階的検索。
@item y
メッセージ、あるいは、パートを入力したファイル名で保存する。Mule 上で 
@samp{C-u} と共に呼び出すと、保存するテキストの coding-system を指定でき
る。
@item #
現在のメッセージかパートを印刷する。
@item |
現在のメッセージかパートをパイプで出力する。
@item O
メッセージを番号詰めして、再び一覧表示する。
@item B
格納されているメッセージを取り出す。
@item D
+trash フォルダのメッセージを全部消去する(@xref{delete mark})。
@item Z
アドレス帳(@xref{addrbook})を読み込んで情報を更新する。@samp{C-uZ} では、
アドレス帳に加えフォルダのリストも更新する。
@samp{mew-use-folders-file-p} が @samp{t} ならフォルダのリストを 
"~/Mail/.folders" に保存する。デフォルトは @samp{t}。
@item C-cC-a
現在のメッセージの情報をアドレス帳に登録する(@xref{addrbook})。
@item C-cC-v
PGP のバージョンを切替える(@xref{pgp-viewing})。
@item C-cC-p
昔ながらの自動処理できない PGP メッセージを PGP に復号化、検証させる。
@end ifset
@ifset us
@item v
Toggle "Summary mode only" and "Summary & Message mode". If you choose
"Summary mode only", you can quickly put the @samp{D} mark since the
next message is not displayed.
@item M-l
Make the current line to the center of Summary mode.
@item C-cC-s
Incremental search forward in Message mode.
@item C-cC-r
Incremental search backward in Message mode.
@item y
Save this message or this part into the file whose name is specified by
you. If executed with @samp{C-u} on Mule, you can specify coding-system
for text.
@item #
Print this message or this part.
@item |
Send this message or this part via pipe.
@item O
Pack messages and list them up again.
@item B
De-capsulate embedded messages in MIME format.
@item D
Delete all messages in the +trash folder(@xref{delete mark}).
@item Z
Read Addrbook(@xref{addrbook}) and update its information. If you type
@samp{C-u Z}, information of folders is also updated in addition to that
of Addrbook. If @samp{mew-use-folders-file-p} is @samp{t}, the list of
folders is stored in "~/Mail/.folders". The default value is @samp{t}.
@item C-cC-a
Register the information on the current message to
Addrbook(@xref{addrbook}).
@item C-cC-v
Select PGP version(@xref{pgp-viewing}).
@item C-cC-p
Let PGP decrypt and/or verify good-old-PGP messages.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node sorting, illegal, features, Viewing
@ifset jp
@section メッセージのソート
@end ifset
@ifset us
@section Sorting messages
@end ifset
@vindex mew-sort-key-alist
@vindex mew-sort-default-key
@vindex mew-sort-default-key-alist

@ifset jp
フォルダ内のメッセージをソートするには @samp{S} を使います。このとき次の
ようにどのフィールドでソートするか訊いてくるので、ソートしたいフィールド
名を入力して下さい。
@end ifset
@ifset us
To sort messages in the current folder, use @samp{S}. Then you will be
asked to input the field name as follows:
@end ifset

@example
Sort by? (default date): 
@end example

@ifset jp
指定したフィールドに書かれている文字列は単純に文字列比較でソートするべき
ではありません。たとえば、Subject: はテキストと考えてよいのですが、Date: 
は日付、X-Mail-Count: は数字と考えてソートすべきです。このように文字列を
どう取り扱うかをモードと言います。ソートによく指定されるフィールド名に対
するデフォルトのモードは @samp{mew-sort-key-alist} で設定されています。
@end ifset
@ifset us
Strings stored in the specified field should not be compared as text
in some cases. For example, while Subject: can be considered as text,
Date: and X-Mail-Count: should be treated as date and number,
respectively. In this way, we call how to treat stored strings "mode".
Default modes for typical field names are configured in
@samp{mew-sort-key-alist}.
@end ifset

@ifset jp
ソートのモードを明示的に指定、変更したい場合には @samp{:} で区切って指定
します。たとえば X-Mail-Count フィールドの内容を(テキストとしてではなく)
数値とみなしてソートしたい場合には、次のように入力します。
@end ifset
@ifset us
When you want to specify the mode of sorting, the mode is followed by
@samp{:}.  For example, to sort with X-Mail-Count field as arithmetic
value (not text), input like this:
@end ifset

@example
x-mail-count:num
@end example

@ifset jp
なお、文字の大文字、小文字は区別しません。また、フィールド名やモードは 
@samp{TAB} で補完できます。
@end ifset
@ifset us
The case distinctions of field names and modes are ignored. And you can
complete field names and modes with @samp{TAB}.
@end ifset

@ifset jp
"Sort by?" と訊かれる際のデフォルトのフィールド名は、
@samp{mew-sort-default-key} で設定できます。以下は、デフォルトの "date" 
を "x-ml-count" に変更する例です。
@end ifset
@ifset us
The default field name, when you asked "Sort by?", can be specified to
@samp{mew-sort-default-key}. The following is an example to change the
default value from "date" to "x-ml-count".
@end ifset

@example
(setq mew-sort-default-key "x-ml-count")
@end example

@ifset jp
@samp{mew-sort-default-key-alist} で、フォルダごとにデフォルトのフィール
ド名を設定することもできます。ここで指定しなかったフォルダでは、デフォル
トのフィールド名として @samp{mew-sort-default-key} の値が使われます。以
下は、+inbox フォルダでのデフォルトを "subject" に、+mew-dist フォルダで
のデフォルトを "x-mail-count" に変更する例です。
@end ifset
@ifset us
You can also set a default field name for each folder by
@samp{mew-sort-default-key-alist}. For folders not explicitly specified
here, @samp{mew-sort-default-key} is used for their default field name.
The following is an example that specifies "subject" for the +inbox
folder and "x-mail-count" for the +mew-dist folder.
@end ifset

@example
(setq mew-sort-default-key-alist
      '(("+inbox" . "subject")
        ("+mew-dist" . "x-mail-count")))
@end example

@ifset jp
ソートに関するコマンドをまとめると以下のようになります。
@end ifset
@ifset us
This is the summary of the sorting commands:
@end ifset

@table @samp
@ifset jp
@item S
入力したフィールドを用いてフォルダ内のメッセージをソートします。
@samp{C-u S} のように prefix を付けると、リージョン内のメッセージのみを
ソートします。
@item mS
@samp{*} マークの付いたメッセージをソートします。 
@end ifset
@ifset us
@item S
Sort messages in the current folder. To sort messages in region, invoke
it with prefix as @samp{C-u S}.
@item mS
Sort @samp{*} marked messages.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node illegal, Composing, sorting, Viewing
@ifset jp
@section 化けたメッセージ
@end ifset
@ifset us
@section Scrambled message
@end ifset
@vindex mew-decode-quoted

@ifset jp
以下のようなメッセージは、charset がなく、US-ASCII と認識されてしまうの
で、化けます。
@end ifset
@ifset us
The following message is considered as US-ASCII because of lack of
charset.  So the body is scrambled.
@end ifset

@example
@ifset jp
To: kazu
Subject: 化けるメッセージ
From: Alice
MIME-Version: 1.0
Content-Type: Text/Plain

日本語の本文
@end ifset
@ifset us
To: kazu
Subject: Scrambled message
From: Alice
MIME-Version: 1.0
Content-Type: Text/Plain

Japanese comes here.
@end ifset
@end example

@ifset jp
このような場合は、@samp{C-cC-l} を押すと、文字コードを正しく変換し表示し
ます。
@end ifset
@ifset us
Type @samp{C-cC-l} to convert it into appropriate character set in Mule.
@end ifset

@ifset jp
また以下のようにメッセージのヘッダが化けることがあります。
@end ifset
@ifset us
Also, some fields in a header are scrambled sometime.
@end ifset

@example
From: "=?iso-2022-jp?B?GyRCOzNLXE9CSScbKEI=?=" <kazu@@iijlab.net>
@end example

@ifset jp
上の例では "=?" と "?=" で囲まれた部分はもともと日本語でした。メッセージ
の規格ではヘッダには ASCII のみが格納できると定められています。よって、
ASCII 以外の文字コードをヘッダに格納するには、ある規則に従って ASCII に
符号化する必要があります。しかし、この符号化された文字列を 「"」 で囲む
のは間違いです。「"」で囲まれた文字列は、そのままの形で取り扱われます。
よって、上の例の "=?" と "?=" で囲まれた部分が日本語に復号化されることは
ありません。
@end ifset
@ifset us
The string surrounded by "=?" and "?=" in the example above was
originally Japanese. The spec of mail defines that only ASCII characters
can be contained in a header. So, if a string, whose character set is
other than ASCII, to be stored in a header, the string must be encoded
into ASCII strings according to the defined rule. But it is certainly
illegal to embed the ASCII strings with @samp{"}. Strings surrounded by
@samp{"} is treated as is. Therefore, the string between "=?" and "?="
in the example is not decoded into Japanese.
@end ifset

@ifset jp
規格に無頓着な一部のメーラではこのような間違いを平気で犯します。正しい対
処方法は、このようなメーラの作者に頼んで、規格を正しく実装するように変更
してもらうことです。しかしそれまで待てない人は、以下の設定をして下さい。
これで「"」中の "=?" と "?=" で囲まれた部分が、Summary モードでも 
Message モードでも復号化されます。
@end ifset
@ifset us
Several mailers are careless about the spec and made mistakes of this
kind. The right way to do is ask the programmers of such mailers to make
the programs conformant to the spec. If you cannot wait, do as follows.
This makes Mew to decode strings surrounded by "=?" and "?=" both in
Summary mode and in Message mode.
@end ifset

@example
(setq mew-decode-quoted t)
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Composing
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Composing, header, illegal, Top
@ifset jp
@chapter メッセージを作成する
@end ifset
@ifset us
@chapter Composing messages
@end ifset
@vindex mail-user-agent

@ifset jp
ここではメッセージの作成方法について説明します。Mew では、MIME 形式のメッ
セージだけを作成できます(MIME-Version: のないメッセージは作成できません)。
@end ifset
@ifset us
This section shows you how to compose a message. With Mew, you can
create only MIME messages(messages without MIME-Version: cannot be
composed).
@end ifset

@ifset jp
新しいメッセージを書くために、Draft モードに移行するには、次の手段があり
ます。
@end ifset
@ifset us
The followings are methods to enter Draft mode to write a new message.
@end ifset

@enumerate
@ifset jp
@item
@samp{M-x mew-send} と入力する。
@item
@samp{mail-user-agent} が設定されている場合、@samp{C-xm} と入力する。
@item
Summary モードで @samp{w} を押す。
@end ifset
@ifset us
@item
Type @samp{M-x mew-send}.
@item
Type @samp{C-xm} if @samp{mail-user-agent} is configured.
@item
Press @samp{w} in Summary mode.
@end ifset
@end enumerate

@ifset jp
すると、以下のようなバッファが用意されます。
@end ifset
@ifset us
Then a buffer like the following is prepared. 
@end ifset

@example
To: 
Subject: 
X-Mailer:@value{X-Mailer:}
----
@end example

@ifset jp
これを Draft モードといいます。Draft モードにおいて、"----" より上をヘッ
ダ、下を本文と呼びます。
@end ifset
@ifset us
We call this "Draft mode". In Draft mode, we call the region above
"----" header. Also the region below "----" body.
@end ifset

@ifset jp
またメッセージへの返答(@samp{a} や @samp{A})や転送(@samp{f} や @samp{F})
でも Summary モードから Draft モードへ移行します。
@end ifset
@ifset us
Also, replying a message (@samp{a} or @samp{A}) and/or forwarding
messages (@samp{f} or @samp{F}) lead you to Draft mode from Summary
mode.
@end ifset

@ifset jp
草稿は、+draft フォルダの下に作成されます。同時に複数の草稿を持つことが
可能です。
@end ifset
@ifset us
A draft is temporary stored under the +draft folder. You can write
multiple messages at the same time.
@end ifset

@ifset jp
以下、Draft モードの使い方を説明します。
@end ifset
@ifset us
Now let's see how to use Draft mode.
@end ifset

@menu
@ifset jp
* header::                      ヘッダの補完
* cheader::                     ヘッダの循環的な補完
* addrbook::                    アドレス帳
* send::                        メッセージの送信
* cite::                        引用
* mime-comp::                   マルチパートの作成
* charset-guess::               文字コードの推測
* reply::                       メッセージへの返答と宛先の決定
* forward::                     メッセージの転送
* pgp-shortcut::                PGP を利用する
* mark-b-comp::                 マークを使った PGP/MIME の作成
* pgp-key::                     PGP の鍵の配布
@end ifset
@ifset us
* header::                      Completions in a header
* cheader::                     Circular completion in a header
* addrbook::                    Address Book
* send::                        Sending a message
* cite::                        Citation
* mime-comp::                   Composing multipart
* charset-guess::               Charset guess
* reply::                       Replying to a message and deciding recipients
* forward::                     Forwarding messages
* pgp-shortcut::                Using PGP
* mark-b-comp::                 Mark based composer
* pgp-key::                     PGP key distribution
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node header, cheader, Composing, Composing
@ifset jp
@section ヘッダの補完
@end ifset
@ifset us
@section Completions in a header
@end ifset
@vindex mew-fields
@vindex mew-field-completion-switch

@ifset jp
ヘッダでは @samp{TAB} に対し、以下ように各フィールド用の完機能が割り当て
られています。
@end ifset
@ifset us
In header, completions each field are assigned to @samp{TAB} as follows:
@end ifset

@itemize @minus
@ifset jp
@item フィールド名の補完
@item アドレスの短縮名の補完と展開 (To:、Cc: など)
@item フォルダ名の補完 (Fcc:)
@end ifset
@ifset us
@item Field completion
@item Address completion and expansion (To:, Cc:, etc)
@item Folder completion (Fcc:)
@end ifset
@end itemize

@ifset jp
<フィールド名の補完>
@end ifset
@ifset us
<Field completion>
@end ifset

@ifset jp
行頭の単語中で、しかも、上の行の最後が "," で終る継続行でなければ、
@samp{TAB} で @samp{mew-fields} に定義されているフィールド名を補完できま
す。
@end ifset
@ifset us
If the cursor is on the beginning of a line and the previous line does
not end with ",", you can complete field defined in the
@samp{mew-fields} variable with @samp{TAB}.
@end ifset

@example
To: kazu@@mew.org
R@samp{TAB}
@end example

@ifset jp
上記の場所で @samp{TAB} を押すと以下のようになります。
@end ifset
@ifset us
At the point above, if you type @samp{TAB}, you get:
@end ifset

@example
To: kazu@@mew.org
Reply-To: 
@end example

@ifset jp
<アドレスの短縮名の補完と展開>
@end ifset
@ifset us
<Address completion and expansion>
@end ifset

@ifset jp
Mew では、アドレス帳という機能を使って、長く分かりにくいアドレスに短く覚
えやすい短縮名を付けられます。たとえば、以下のように設定したとします。
@end ifset
@ifset us
You can define an easy-to-remember short name for a long or
hard-to-remember address with Mew's Addrbook feature. For example,
consider the following configuration:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
これは、アドレス "winnie-the-pooh@@100acre.woodwest.uk" に "pooh" という
短縮名付けていることになります。この短縮名は、通常 "~/.im/Addrbook" とい
うファイルに設定します。アドレス帳の機能の詳細については、
@xref{addrbook} を参照して下さい。
@end ifset
@ifset us
This means to replace the string "pooh" with
"winnie-the-pooh@@100acre.woodwest.uk". Note that short names should
usually be configured in "~/.im/Addrbook". For more information about
Addrbook, please refer to @xref{addrbook}.
@end ifset

@ifset jp
Draft モードのヘッダ内で、かつ、アドレスを書くべきフィールド上で、しかも、
1 文字以上の文字列が前にある場所で @samp{TAB} を打つと、アドレスの短縮名
が補完されます。
@end ifset
@ifset us
In a header in Draft mode and on the field supposed to write addresses
and one or more characters precede, you can complete an short name for
address with @samp{TAB}.
@end ifset

@ifset jp
例を挙げてみます。
@end ifset
@ifset us
Let's look at the following example.
@end ifset

@example
To: piglet@@beech.tree.uk, 
        po@samp{TAB}
@end example

@ifset jp
このように @samp{TAB} を押すと、(他に候補が無ければ) "pooh" まで補完され
ます。
@end ifset
@ifset us
If you input @samp{TAB} up above, "pooh" is completed (unless other
candidates exist).
@end ifset

@example
To: piglet@@beech.tree.uk, 
        pooh@samp{TAB}
@end example

@ifset jp
もう一度 @samp{TAB} を押すと "winnie-the-pooh@@100acre.woodwest.uk" に展
開されます。
@end ifset
@ifset us
One more type of @samp{TAB} expands it to
"winnie-the-pooh@@100acre.woodwest.uk".
@end ifset

@example
To: piglet@@beech.tree.uk, 
        winnie-the-pooh@@100acre.woodwest.uk
@end example

@ifset jp
アドレスが補完できない場所で @samp{TAB} を打つと、単に @samp{TAB} が入り
ます。たとえば、以下の例を考えて下さい。
@end ifset
@ifset us
If you type @samp{TAB} at improper point for address completion, 
@samp{TAB} is inserted. Consider the following example:
@end ifset

@example
To: pooh,@samp{TAB}
@end example

@ifset jp
この場合、単に @samp{TAB} が挿入されます。
@end ifset
@ifset us
In this case,  @samp{TAB} is just inserted.
@end ifset

@ifset jp
"@@"で終る文字列は強制的に展開します。たとえば、以下のように似たような 
短縮名があった場合を考えて下さい。
@end ifset
@ifset us
A string ended with "@@" is explicitly expanded. Consider the following
case where similar short names are defined.
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
pooh-pooh:      pooh-pooh@@somewhere.jp
@end example

@ifset jp
"pooh" を "winnie-the-pooh@@100acre.woodwest.uk" に強制的に展開するには、
以下のようにします。
@end ifset
@ifset us
To expand "pooh" to "winnie-the-pooh@@100acre.woodwest.uk", take this
way.
@end ifset

@example
To: pooh@@@samp{TAB}
@end example

@ifset jp
<フォルダ名の補完>
@end ifset
@ifset us
<Folder completion>
@end ifset

@ifset jp
Fcc: などのようにフォルダを補完すべきところでは、@samp{TAB} でフォルダを
補完できます。以下例を挙げてみます。
@end ifset
@ifset us
At a point, such as Fcc:, supposed to complete a folder, you can
complete a folder with @samp{TAB}. Let's look at an example.
@end ifset

@example
Fcc: @samp{TAB}
@end example

@ifset jp
"+" が補完されます。
@end ifset
@ifset us
Here, "+" is completed.
@end ifset

@example
Fcc: +@samp{TAB}
@end example

@ifset jp
@samp{TAB}をもう1度押すと候補が表示されるので、候補を見ながら適切な文字
を入力します。
@end ifset
@ifset us
One more type of @samp{TAB} shows candidates. Please input appropriate
characters then type @samp{TAB}.
@end ifset

@example
Fcc: +B@samp{TAB}
@end example

@ifset jp
候補が一意に定まれば補完されます。
@end ifset
@ifset us
If a candidate can be solely decided, you get a completion.
@end ifset

@example
Fcc: +Backup
@end example

@ifset jp
<設定のヒント>
@end ifset
@ifset us
<Hints of customization>
@end ifset

@ifset jp
アドレスの短縮名とフォルダ名をどのフィールドで補完できるようにするかは、
@samp{mew-field-completion-switch} で定義できます。デフォルトでは以下の
ように宣言されています。
@end ifset
@ifset us
You can define which field allows address and folder completion in
@samp{mew-field-completion-switch}. The following declaration is used
by default.
@end ifset

@example
(defvar mew-field-completion-switch
  '(("To:"        . mew-complete-address)
    ("Cc:"        . mew-complete-address)
    ("Dcc:"       . mew-complete-address)
    ("Bcc:"       . mew-complete-address)
    ("Reply-To:"  . mew-complete-address)
    ("Fcc:"       . mew-complete-folder)
    ("Resent-To:" . mew-complete-address)
    ("Resent-Cc:" . mew-complete-address)
    ("Config:"    . mew-complete-config)))
@end example

@ifset jp
Config: の補完に関しては @xref{config} を参照して下さい。
@end ifset
@ifset us
Please refer to @xref{config} to know completion for Config:.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node cheader, addrbook, header, Composing
@ifset jp
@section ヘッダの循環的な補完
@end ifset
@ifset us
@section Circular completions in a header
@end ifset
@vindex mew-mail-domain-list
@vindex mew-from-list
@vindex mew-from
@vindex mew-field-circular-completion-switch

@ifset jp
ヘッダでは、@samp{C-cTAB} に循環的な補完機能が割り当てられています。循環
的な補完機能とは、あるリストのある値がそのリストの次の値に置き換えられる
ことです。リストの最後は、最初につながっていると考えます。ヘッダ中の循環
的な補完機能は、以下のようにフィールドごとに異なります。
@end ifset
@ifset us
In a header, circular completions are assigned to @samp{C-cTAB}.
Circular completion means that a value of alist is replaced by the next
value of the list. The end of the list is considered continuous to the
top of the list. Circular completions in a header are different for each
field as follows:
@end ifset

@itemize @minus
@ifset jp
@item ドメイン名の循環的な補完 (To:、Cc: など)
@item From: の循環的な補完 (From:)
@end ifset
@ifset us
@item Circular completion of domain name (To:, Cc:, etc)
@item Circular completion of From: (From:)
@end ifset
@end itemize

@ifset jp
<ドメイン名の循環的な補完>
@end ifset
@ifset us
<Circular completion of domain name>
@end ifset

@ifset jp
アドレスを書くべきフィールドでは、@samp{C-cTAB} でドメインを補完します。
補完の候補は @samp{mew-mail-domain-list} から選ばれます。
@end ifset
@ifset us
On a field where addresses are written, use @samp{C-cTAB} for domain
completion. Candidates are selected from @samp{mew-mail-domain-list}.
@end ifset

@example
To: kazu@@@samp{C-cTAB}
@end example

@ifset jp
上記の場所のように候補が一意に定まらない場合は、
@samp{mew-mail-domain-list} の最初のドメイン名が挿入されます。
@end ifset
@ifset us
If you try to complete just after "@@" as up above, the first domain of
@samp{mew-mail-domain-list} is inserted.
@end ifset

@example
To: kazu@@mew.org@samp{C-cTAB}
@end example

@ifset jp
補完された後、さらに @samp{C-cTAB} を押すと @samp{mew-mail-domain-list} 
の次の候補に変換します。
@end ifset
@ifset us
After completion, one more type of @samp{C-cTAB} inserts the next domain
of @samp{mew-mail-domain-list}. This completion is looped.
@end ifset

@example
To: kazu@@wide.ad.jp
@end example

@ifset jp
また、以下の補完が一意に定まれば、その候補を挿入します。
@end ifset
@ifset us
If a candidate can be solely decided, it is inserted.
@end ifset

@example
To: kazu@@w@samp{C-cTAB}
@end example

@ifset jp
上記の例は次のようになります。
@end ifset
@ifset us
The example up above gets:
@end ifset

@example
To: kazu@@wide.ad.jp
@end example

@ifset jp
<From: の循環的な補完>
@end ifset
@ifset us
<Circular completion of From:>
@end ifset

@ifset jp
From: フィールド上では、@samp{C-cTAB} は@samp{mew-from-list} の値を循環
的に補完します。このリストの最初の値(別名 @samp{mew-from})は、次のように
既に挿入されているかもしれません。
@end ifset
@ifset us
On the From: field, @samp{C-cTAB} circularly completes its value from
@samp{mew-from-list}. The first value of the list (aka @samp{mew-from}) 
may have already inserted as follow:
@end ifset

@example
@ifset jp
From: Kazu Yamamoto (山本和彦) <Kazu@@Mew.org>
@end ifset
@ifset us
From: Kazu Yamamoto <Kazu@@Mew.org>
@end ifset
@end example

@ifset jp
値の場所ならどこでも構いませんが、@samp{C-cTAB} と入力すると、
この値を @samp{mew-from-list} の次の値と置き換えます。たとえば、
@end ifset
@ifset us
Typing @samp{C-cTAB} anywhere on the value replaces the value with the
next value of @samp{mew-from-list}. For example,
@end ifset

@example
@ifset jp
From: Kazu Yamamoto (山本和彦) <Kazu@@Mew.org>@samp{C-cTAB}
@end ifset
@ifset us
From: Kazu Yamamoto <Kazu@@Mew.org>@samp{C-cTAB}
@end ifset
@end example

@ifset jp
は以下のようになります。
@end ifset
@ifset us
becomes as follows:
@end ifset

@example
From: Kazuhiko Yamamoto <kazu@@wide.ad.jp>
@end example

@ifset jp
循環的な補完のフィールドと関数の対応は、
@samp{mew-field-circular-completion-switch} で定義できます。デフォルトで
は以下のように宣言されています。
@end ifset
@ifset us
You can define association of field key and circular completion function
in @samp{mew-field-circular-completion-switch}. The following
declaration is used by default.
@end ifset

@example
(defvar mew-field-circular-completion-switch
  '(("To:"          . mew-circular-complete-domain)
    ("Cc:"          . mew-circular-complete-domain)
    ("Dcc:"         . mew-circular-complete-domain)
    ("Bcc:"         . mew-circular-complete-domain)
    ("Reply-To:"    . mew-circular-complete-domain)
    ("Resent-To:"   . mew-circular-complete-domain)
    ("Resent-Cc:"   . mew-circular-complete-domain)
    ("From:"        . mew-circular-complete-from)
    ("Resent-From:" . mew-circular-complete-from)
    ("Config:"      . mew-circular-complete-config)))
@end example

@ifset jp
Config: の循環的な補完に関しては @xref{config} を参照して下さい。
@end ifset
@ifset us
Please refer to @xref{config} to know circular completion for Config:.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node addrbook, send, cheader, Composing
@ifset jp
@section アドレス帳
@end ifset
@ifset us
@section Address Book
@end ifset
@vindex mew-lisp-max-length
@vindex mew-addrbook-override-by-newone

@ifset jp
Mew 1.94 からアドレスの alias とペットネームがアドレス帳に統合されました。
alias ("~/.im/Aliases")とペットネーム("~/.im/Petname")は今後積極的には保
守されませんので、できればアドレス帳("~/.im/Addrbook")に乗り換えて下さい。
アドレス帳には 2 つの書式が用意されています。一方は「展開規則」を指定す
る書式、他方は「個人情報」を記述するための書式です。
@end ifset
@ifset us
Mew 1.94 provides an address book which integrates aliases and Petname.
After this, neither aliases("~/.im/Aliases") nor
Petname("~/.im/Petname") will be maintained. So, please migrate to the
address book("~/.im/Addrbook"). The address book provides 2 formats.
One is to specify expansion rules, the other is to define personal
information.
@end ifset

@ifset jp
まず、「展開規則」を記述するための書式を示します。
@end ifset
@ifset us
First, let's look at the format to specify expansion rules.
@end ifset

@example
<shortname>: <address1>[, <address2>, <address3>,...]
@end example

@ifset jp
このように短縮名と展開すべきアドレスを @samp{:} で区切って書きます。複数
のアドレスに展開する場合は、それらのアドレスを @samp{,} で区切ります。
(これは、To: などでアドレスが @samp{,} で区切られているのと同じです。)
@samp{,} の後ろに空白を入れても構いません。以下に例を示します。
@end ifset
@ifset us
In this way, you should specify a short name and a full address
separating by @samp{:}. If you want to expand the short name to multiple
addresses, specify them separating by @samp{,}. (This is exactly same as
addresses separated by @samp{,} in the To: field, for instance.) SPC is
allowed after @samp{,}. The following is an example:
@end ifset

@example
pooh:           winnie-the-pooh@@100acre.woodwest.uk
piglet:         piglet@@beech.tree.uk
friends:        pooh, piglet
@end example

@ifset jp
Mew では多段の展開が可能です。たとえばこの例で、次のように "friends" を
展開してみましょう。
@end ifset
@ifset us
Multi-level expansion is possible. For example, let's expand "friends"
as follows:
@end ifset

@example
To: friends@samp{TAB}
@end example

@ifset jp
"friends" 内部で "pooh" と "piglet" に展開され、さらにそれぞれが展開され
るので、次のようになります。
@end ifset
@ifset us
"friends" is expanded to "pooh" and "piglet" internally, then each word
is also expand resulting as follows:
@end ifset

@example
To: winnie-the-pooh@@100acre.woodwest.uk, piglet@@beech.tree.uk
@end example

@ifset jp
次に、「個人情報」を記述するための書式を示します。
@end ifset
@ifset us
Next, the format to define personal information is shown below:
@end ifset

@example
<shortname> <address1>[, <address2>, <address3>,...] <nickname> <fullname>
@end example

@ifset jp
このように 4 つの要素を空白で区切ります。<shortname> が短縮名です。
<nickname> と <fullname> はそれぞれニックネームと正式な氏名であり、日本
語でも構いません。2 番目の要素はアドレスです。複数のアドレスをその人が持っ
ている場合は、@samp{,} で区切って書きます。@samp{,} の後に空白を入れても
構いません。つまり、この空白は要素の区切りではありません。また、@samp{"} 
で囲まれた空白も要素の区切りにはなりません。以下に例を示します。
@end ifset
@ifset us
In this way, four elements are separated by SPC. <shortname> is a short
name. <nickname> and <fullname> are his/her nickname and his/her full
name, respectively. The second element is his/her addresses. If he/she
has multiple addresses, enumerate them separating by @samp{,}. SPC is
allowed after @samp{,}. So, this SPC is not the separator of the
elements. SPC surrounded by @samp{"} is not the separator, neither.
Let's see an example:
@end ifset

@example
kazu	kazu@@mew.org, kazu@@iijlab.net	Kazu-kun  "Kazuhiko Yamamoto"
@end example

@ifset jp
「展開規則」の書式の場合と違って、「個人情報」の書式では、アドレスが順に
置き換えられていきます。以下の例を考えて下さい。
@end ifset
@ifset us
Unlike the format of expansion rules, the format of personal information
means that each address will be replaced one by one. Consider the
following example:
@end ifset

@example
To: kazu@samp{TAB}
@end example

@ifset jp
"kazu" の後で @samp{TAB} を打つと、"kazu@@mew.org" に置き換わります。
@end ifset
@ifset us
Typing @samp{TAB} after "kazu" leads to "kazu@@mew.org".
@end ifset

@example
To: kazu@@mew.org@samp{TAB}
@end example

@ifset jp
次に "kazu@@mew.org" の後で @samp{TAB} を打つと、"kazu@@iijlab.net" に置
き換わります。
@end ifset
@ifset us
Typing @samp{TAB} after "kazu@@mew.org" makes "kazu@@iijlab.net"
appeared.
@end ifset

@example
To: kazu@@iijlab.net@samp{TAB}
@end example

@ifset jp
さらに "kazu@@iijlab.net" の後で @samp{TAB} を打つと、"kazu@@mew.org" に
戻ります。このように @samp{TAB} を押すと、アドレスが循環的に置換されます。
アドレスを決定した後は、正式名称が付加できます。
@end ifset
@ifset us
Then "kazu@@mew.org" will appear again if you type @samp{TAB} after
"kazu@@iijlab.net". In this way, each address is replaced one by one.
After deciding an address, you can add its full name.
@end ifset

@example
To: kazu@@mew.org@samp{M-TAB}
@end example

@ifset jp
このように @samp{M-TAB} を押すと、以下のように正式名称が付加されます。
@end ifset
@ifset us
Like this, typing @samp{M-TAB} replace the address with the following
format.
@end ifset

@example
To: Kazuhiko Yamamoto <kazu@@mew.org>
@end example

@ifset jp
「個人情報」の書式では、各要素を省略できます。中間の要素を省略する場合は、
@samp{*} と書いて下さい。以下に、アドレスに対してニックネームのみを定義
する例を示します。
@end ifset
@ifset us
In the format of personal information, you can omit each element.  When
you want to omit intermediate element, specify @samp{*}.  The following
is an example to define nicknames for addresses.
@end ifset

@example
*	kazu@@mew.org, kazu@@iijlab.net	Kazu-kun
@end example

@ifset jp
ニックネームは Summary モードでのアドレスの置き換えと、Draft モードでの
引用記号の置き換え(@xref{cite})に利用されます。
@end ifset
@ifset us
The nickname is used to replace addresses in Summary mode and to replace
the citation prefix(@xref{cite}) in Draft mode.
@end ifset

@ifset jp
アドレス帳のコメント文字は @samp{;} と @samp{#} です。@samp{;} は行頭に
ある場合のみコメントとなり、その行が無視されます。@samp{#} は任意の場所
でコメントとなり、そこから行末までが無視されます。
@end ifset
@ifset us
The comment letters are @samp{;} and @samp{#}. @samp{;} is valid only
when it appears in the beginning of lines. The entire line is ignored.
@samp{#} is valid everywhere. The strings between @samp{#} and the end
of the line is ignored.
@end ifset

@ifset jp
実はアドレス帳以外にも、自動的に追加される短縮名があります。メッセージを
送信した場合、To: と Cc: にあるアドレスは、ユーザ名が短縮名として登録さ
れます。以下の例を考えて下さい。
@end ifset
@ifset us
As a matter of fact, there are short names to be defined automatically.
When you send a message, addresses on the To: and Cc: field are
automatically registered with their user names as short names.  Consider
the following:
@end ifset

@example
To: kazu@@mew.org
@end example

@ifset jp
このメッセージを送信すると、アドレス "kazu@@mew.org" に対し、短縮名 
"kazu" が自動登録されます。ただし、すでに "kazu" という短縮名が自動登録
されているなら、@samp{mew-addrbook-override-by-newone} の値に応じて上書
きするかを決定します。@samp{nil} なら古い設定を残し、それ以外なら上書き
します。展開の際は、アドレス帳の方が優先されます。アドレス帳に無い短縮名
のみが有効になります。自動登録されるのは通常 1000 個
(@samp{mew-lisp-max-length})のアドレスまでです。それを越えて登録すると古
いものから消えていきます。これらの情報は Mew を終了する際に、
"~/Mail/.mew-alias" に保存されます。
@end ifset
@ifset us
When this message is sent, a short name "kazu" is automatically
registered for the address "kazu@@mew.org". If there is already a short
name of "kazu", the next action is decided according to
@samp{mew-addrbook-override-by-newone}. If @samp{nil}, the old entry
remains. Otherwise, the new entry overrides the old one. When expanded,
the address book is prior to the automatic short name. So, only
automatic short names which do not exist in the address book are valid.
The limit number of automatic short names is
1000(@samp{mew-lisp-max-length}).  If the number is over 1000, the
oldest entry is removed. This information is automatically saved to
"~/Mail/.mew-alias".
@end ifset

@ifset jp
Summary モードには、現在読んでいるメッセージの情報を Addrbook に登録する
機能があります。展開規則を登録するには @samp{C-cC-a}、個人情報を登録する
には@samp{C-uC-cC-a} と入力して下さい。以下に個人情報を登録している例を
示します。
@end ifset
@ifset us
Summary mode provide the feature to register the information of the
current message into Addrbook. To register a expansion rule, type
@samp{C-cC-a}. To register personal information, type @samp{C-uC-cC-a}.
@end ifset

@example
#If you want to register this entry, type C-c C-c.
#If you want to NOT register this entry, type C-c C-q.
Shortname: kazu
Addresses: kazu@@mew.org
Nickname: 
Name: Kazuhiko Yamamoto
Comments: 
@end example

@ifset jp
必要であれば加筆訂正します。実際に登録するには @samp{C-cC-c}、登録を取り
止める場合は @samp{C-cC-q}と入力して下さい。
@end ifset
@ifset us
Add or modify the information if necessary. To register this
information, type @samp{C-cC-c}. To quit the registration, type
@samp{C-cC-q}
@end ifset


@c %%%%%%%%%%%%%%%%%
@node send, cite, addrbook, Composing
@ifset jp
@section メッセージの送信
@end ifset
@ifset us
@section Sending a message
@end ifset
@vindex mew-signature-file
@vindex mew-signature-as-lastpart
@vindex mew-signature-insert-last

@ifset jp
草稿を書き上げ送信する準備ができたら、@samp{C-cC-m C-cC-c} と入力して下
さい。
@end ifset
@ifset us
When you are ready to send a draft, type @samp{C-cC-m C-cC-c}.
@end ifset

@ifset jp
たとえば、以下のようなメッセージを送る場合を考えます。
@end ifset
@ifset us
For instance, let's consider the following message to be sent.
@end ifset

@example
@ifset jp
To: pooh
Subject: PGP/MIME を使おうよ
X-Mailer:@value{X-Mailer:}
----
Mew がセキュリティ・マルチパートをサポートしました。

--かず
@end ifset
@ifset us
To: pooh
Subject: Let's use PGP/MIME
X-Mailer:@value{X-Mailer:}
----
Mew starts walking with security multipart. Enjoy PGP/MIME!

--Kazu
@end ifset
@end example

@ifset jp
@samp{C-cC-m} まで入力すると、以下のようになります。
@end ifset
@ifset us
After typing @samp{C-cC-m}, you see:
@end ifset

@example
@ifset jp
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: PGP/MIME =?iso-2022-jp?B?GyRCJHI7SCQqJCYkaBsoQg==?=
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

Mew がセキュリティ・マルチパートをサポートしました。

--かず
@end ifset
@ifset us
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: Let's use PGP/MIME
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Mew starts walking with security multipart. Enjoy PGP/MIME!

--Kazu
@end ifset
@end example

@ifset jp
ここで注意して頂きたいのは、Content-Type: に Text/Plain を選び、charset 
を推測していることです。
@end ifset
@ifset us
You should note that Mew automatically selects Text/Plain for
Content-Type: and guesses the charset parameter.
@end ifset

@ifset jp
次に @samp{C-cC-c} と入力すると通常のテキストメッセージを送れます。メッ
セージはバックグランドで送信されます。このように @samp{C-cC-m} は MIME 
の作成、@samp{C-cC-c} は送信です。Mew では「できるだけ見たままのメッセー
ジを送信する」というポリシーがあるので、ユーザに明示的に MIME を作っても
らうことにしています(今までに余分な .signature や Fcc: が勝手に付けられ
ていやな思いをした人はいませんか？ :p)。
@end ifset
@ifset us
Type @samp{C-cC-c} to send this text message. It is sent background. As
you learned, @samp{C-cC-m} is to create a MIME message and @samp{C-cC-c}
is to send it. Mew has a policy that a message should be transferred
exactly as you look in the last time. So, you are supposed to create
MIME explicitly(How many people have embarrassed experiences due to
automatic insertion of an extra .signature and Fcc:? :p).
@end ifset

@ifset jp
エラーが起きた場合は、"*Mew watch*" バッファを表示します。エラーが生じて
消えなかった "*Mew watch*" バッファは、@samp{C-cC-q} で消せます。多くの
場合、草稿は +draft フォルダに残っています。そこで、Summary モードで 
@samp{g} と押して +draft フォルダに移動し、+draft フォルダの Summary モー
ドで @samp{E} を押して再編集して下さい。
@end ifset
@ifset us
When an error occurs, Mew displays "*Mew watch*" buffer. You can erase
"*Mew watch*" buffer with @samp{C-cC-q}. In most case, the draft remains
in the +draft folder. So, go to the +draft folder from any Summary mode
with @samp{g} and type @samp{E} in Summary mode for the +draft folder to
edit it again.
@end ifset

@ifset jp
メッセージの送信が終っていないのに、@samp{C-xC-c} で Emacs を終了させよ
うとすると、
@end ifset
@ifset us
If you try to exit Emacs with @samp{C-xC-c} before the sending process
is not completed, you are asked as follows:
@end ifset

@example
Active processes exist; kill them and exit anyway? (yes or no)
@end example

@ifset jp
と訊かれます。"*Mew watch*" バッファがなくなってから終了させて下さい。
@end ifset
@ifset us
Please wait until the "*Mew watch*" buffer will disappear and give a try
again.
@end ifset

@ifset jp
@samp{C-cC-m} は省略できます。この場合、MIMEを自動的に作った後に
@end ifset
@ifset us
You can omit @samp{C-cC-m}. If you do so, Mew automatically creates MIME
and asks you as follows:
@end ifset

@example
The header was modified. Send this message? (y or n)
@end example

@ifset jp
と訊いてきますので、@samp{y} を入力して下さい。Mewでは、見たままのメッセー
ジを送信することをモットーにしているので、Mew が勝手にメッセージを書き換
えた場合は、このように質問を受けます。
@end ifset
@ifset us
Please type @samp{y} here. Remember Mew has a policy to send a message
as you watch. So, when Mew modifies the message it asks you such a
question.
@end ifset

@ifset jp
すべてのメッセージ作成方法で @samp{C-cC-m} を省略して構いません。ただし、
見たままのメッセージを送信したい人は、@samp{C-cC-m C-cC-c} と入力する癖
を付けることをお勧めします。
@end ifset
@ifset us
You can omit @samp{C-cC-m} in all composing method described below. But
I do recommend to have a custom to type @samp{C-cC-m C-cC-c}.
@end ifset

@ifset jp
カーソルのある場所に "~/.signature" を挿入するコマンドは @samp{C-cTAB} 
です。シグニチャファイルは、@samp{mew-signature-file} で設定できます。
@samp{mew-signature-as-lastpart} や @samp{mew-signature-insert-last} を
設定することで、@samp{C-cTAB} の動作をカスタマイズできます。
@end ifset
@ifset us
To insert "~/.signature" on the cursor point, type @samp{C-cTAB}. You
can define your own signature file to @samp{mew-signature-file}. Setting
@samp{mew-signature-as-lastpart} and @samp{mew-signature-insert-last},
you can customize the action of @samp{C-cTAB}.
@end ifset

@ifset jp
出てきたコマンドを以下にまとめます。
@end ifset
@ifset us
Here is a summary for commands up above.
@end ifset

@table @samp
@ifset jp
@item C-cC-m
MIME を作成する。Charset の推測、ファイル構造をマルチパートへ変換など。
@item C-cC-c
メッセージを送信する。
@item C-uC-cC-c
メッセージを送信するが、草稿は消さない。複数の人に内容を少しずつ変えなが
らメッセージを送りたい場合に便利。
@item C-cTAB
カーソルの位置に "~/.signature" を挿入する。
@end ifset
@ifset us
@item C-cC-m
Make a MIME message. Charset guess, mapping directory structure to
multipart, and so on.
@item C-cC-c
Send this message.
@item C-uC-cC-c
Send this message without killing the draft.
This is convenient to send messages to multiple people modifying
its content a little.
@item C-cTAB
Insert "~/.signature" on the cursor point.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node cite, mime-comp, send, Composing
@ifset jp
@section 引用
@end ifset
@ifset us
@section Citation
@end ifset
@vindex mew-addrbook-for-cite-label
@vindex mew-addrbook-for-cite-prefix
@vindex mail-citation-hook

@ifset jp
Summary モードの @samp{a} や @samp{A} を使ってメッセージに返答するための
草稿を用意すると、Emacs が3分割されます。上が現在の Summary モード、中が 
Message モード、下が Draft モードです。
@end ifset
@ifset us
If you use @samp{a} or @samp{A} in Summary mode, a draft for reply is
prepared and Emacs is split into three windows. The top is Summary mode,
the middle is Message mode, and the bottom is Draft mode.
@end ifset

@ifset jp
Message モードのテキストを引用するコマンドを以下に示します。
@end ifset
@ifset us
Here are commands to cite text from Message mode to Draft mode.
@end ifset

@table @samp
@ifset jp
@item C-cC-y
Message モードからメッセージの一部をコピーし、引用ラベルと引用記号付でペー
ストする。
@enumerate
@item
おおまかに言えば、Message モードの本文がコピーされる。たとえば、
Text/Plain が表示されていると、Message モード全体がコピーされる。
Message/Rfc822 が表示されている場合は、ヘッダを除いた本文がコピーされる。
@item
@samp{C-u} と共に呼ばれると、ヘッダがあればヘッダをコピーする。
@item
Emacs のマークがあると、そのマークとカーソルの間が対象となる。
@end enumerate
@item C-cC-t
Message モードからメッセージの一部をコピーし、引用ラベルと引用記号なしで
ペーストする。
@end ifset
@ifset us
@item C-cC-y
Copy and paste a part of message from Message mode WITH citation prefix
and label.
@enumerate
@item
Roughly speaking, it copies the body in Message mode. For example, if
Text/Plain is displayed, the entire Message mode is copied. If
Message/Rfc822 is displayed, the body without the header is copied.
@item
If called with @samp{C-u}, the header is also copied if exists.
@item
If an Emacs mark exists, the target is the region between the mark and
the cursor.
@end enumerate
@item C-cC-t
Copy and paste a part of message from Message mode WITHOUT citation
prefix and label.
@end ifset
@end table

@ifset jp
デフォルトの引用ラベルと引用記号は以下のようになります。
@end ifset
@ifset us
The default label and prefix is as follows:
@end ifset

@example
@ifset jp
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

> おはようからおやすみまでニートでおなじみの角川です。
> 
> さて、とろけるワイン作戦ですが、定石通り '90 のボルドーの
> カベルネ・ソービニョンを狙いたいと思います。ピノノアール
> がちょっぴりブレンドしてあるといいかも。
@end ifset
@ifset us
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

> Hi, it's Sumikawa, the neat from good morning to good night.
>
> Talking the party of wonderful wine, I would propose Cabernet 
> Sauvignon, Bordeaux, '90. It would be great if Pinot Noir
> is blended a bit.
@end ifset
@end example

@ifset jp
Draft モードでは Message モード("*mew message*"バッファ)に表示されている
ものならなんでも引用できます。つまり、複数のメッセージを簡単に引用できる
のです。引用したいメッセージを表示させて、本文を引用する手順を、引用した
いメッセージの回数だけ繰り返して下さい。そのための3分割です。
@end ifset
@ifset us
In Draft mode, you can cite any text displayed in Message mode("*mew
message*" buffer). So, you can cite text from multiple messages
easily. Select a message in Summary mode and display it in Message mode,
then cite it in Draft mode. Please repeat this procedure as you like.
Triple windows are prepared for this purpose.
@end ifset

@ifset jp
Mew は supercite とリンクできますが、supercite を利用しようと思う前に、
以下のように設定してみて下さい。
@end ifset
@ifset us
You can use "supercite" with Mew but before you start using it,
configure as follows.
@end ifset

@example
(setq mew-cite-prefix-function 'mew-cite-prefix-username)
@end example

@ifset jp
この設定をしておくと、以下のように引用記号にユーザ名が付くようになります。
@end ifset
@ifset us
With this configuration, the citation prefix is preceded by a user name.
@end ifset

@example
@ifset jp
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumikawa> おはようからおやすみまでニートでおなじみの角川です。
sumikawa> 
sumikawa> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
sumikawa> カベルネ・ソービニョンを狙いたいと思います。ピノノアール
sumikawa> がちょっぴりブレンドしてあるといいかも。
@end ifset
@ifset us
From: SUMIKAWA Munechika <sumikawa@@ebina.hitachi.co.jp>
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumikawa> Hi, it's Sumikawa, the neat from good morning to good night.
sumikawa>
sumikawa> Talking the party of wonderful wine, I would propose Cabernet 
sumikawa> Sauvignon, Bordeaux, '89. It would be great if Pinot Noir
sumikawa> is blended a bit.
@end ifset
@end example

@ifset jp
さらに、以下の設定を加えてみましょう。
@end ifset
@ifset us
In addition to the configuration above, add the following.
@end ifset

@example
(setq mew-addrbook-for-cite-label 'nickname)
(setq mew-addrbook-for-cite-prefix 'nickname)
@end example

@ifset jp
最初の設定でラベルの中のアドレスがニックネーム(@xref{addrbook})に変わり
ます。また、次の設定で引用記号のユーザ名の部分がニックネームに置き換わり
ます。
@end ifset
@ifset us
With the first line, an address in the citation label is replaced with
its nickname(@xref{addrbook}). The second line indicates that a user
name in the prefix is replaced with its nickname.
@end ifset

@example
@ifset jp
From: すみっち
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

すみっち> おはようからおやすみまでニートでおなじみの角川です。
すみっち> 
すみっち> さて、とろけるワイン作戦ですが、定石通り '89 のボルドーの
すみっち> カベルネ・ソービニョンを狙いたいと思います。ピノノアール
すみっち> がちょっぴりブレンドしてあるといいかも。
@end ifset
@ifset us
From: sumitch
Subject: Wine
Date: Wed, 23 Jul 1997 11:40:50 +0900

sumitch> Hi, it's Sumikawa, the neat from good morning to good night.
sumitch>
sumitch> Talking the party of wonderful wine, I would propose Cabernet 
sumitch> Sauvignon, Bordeaux, '89. It would be great if Pinot Noir
sumitch> is blended a bit.
@end ifset
@end example

@ifset jp
もし、引用の様式が上記ではなく以下のようになるなら、
@samp{mail-citation-hook} が定義されているのかもしれません。
@end ifset
@ifset us
If you get the following citation style instead of up above,
@samp{mail-citation-hook} might be defined.
@end ifset

@example
In article .....
@end example

@ifset jp
Mew 独自の引用様式を使いたいなら、以下の行を ".emacs" に加えて下さい。
@end ifset
@ifset us
To use Mew original citation style, put the following into your ".emacs".
@end ifset

@example
(setq mail-citation-hook nil)
@end example

@c %%%%%%%%%%%%%%%%%
@node mime-comp, charset-guess, cite, Composing
@ifset jp
@section マルチパートの作成
@end ifset
@ifset us
@section Composing multipart
@end ifset

@ifset jp
さて、ここでマルチパートの作り方を披露しましょう。
@end ifset
@ifset us
OK. Let's see how to create multipart.
@end ifset

@ifset jp
たとえば、+draft/1 でメッセージを書いているときに、@samp{C-cC-a} と入力
すると、草稿の一番下に
@end ifset
@ifset us
When you are writing a message in +draft/1 and type @samp{C-cC-a}, the
following lines are inserted at the bottom of the draft.
@end ifset

@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example

@ifset jp
という行が挿入されます。"1/" はマルチパートを構築するための一時的なディ
レクトリで、実体は "~/Mail/draft/mime/1" です。パート 1 の CoverPage は
本文を意味します。ここで Draft モードは次のようになっているでしょう。
@end ifset
@ifset us
"1/" is a temporary directory to create multipart and locates
"~/Mail/draft/mime/1". The part 1, "Coverpage", refers to the body. Now
the entire draft looks like:
@end ifset

@example
@ifset jp
To: mew-dist
Subject: ここがヘッダ
X-Mailer:@value{X-Mailer:}
----
本文だよ。

----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end ifset
@ifset us
To: mew-dist
Subject: This is header
X-Mailer:@value{X-Mailer:}
----
This is body.

----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2                                                          .   
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end ifset
@end example

@ifset jp
3つの領域を以下のように呼ぶことにします。
@end ifset
@ifset us
Here we call three regions as follows:
@end ifset

@itemize @bullet
@ifset jp
@item
"----" より上を 「ヘッダ」
@item
"----" から "attachments" までを「本文」
@item
"attachments" より下を「添付領域」
@end ifset
@ifset us
@item
the region above "----" @samp{header}
@item
the region from "----" to "attachments" @samp{body}
@item
the region below "attachments" @samp{attachments}
@end ifset
@end itemize

@ifset jp
Draft モードでは、リージョンによってキー割当が違います。
@end ifset
@ifset us
In Draft mode, key bindings are different on each region.
@end ifset

@ifset jp
たとえば、@samp{TAB} は以下のようになります。
@end ifset
@ifset us
To @samp{TAB}, for instance, functions are assigned as follows:
@end ifset

@table @asis
@ifset jp
@item ヘッダ
さまざまな補完。
@item 本文
TAB の挿入。
@item 添付領域
なにもしない。
@end ifset
@ifset us
@item header
Completions.
@item body
Insert TAB.
@item attachments
Do nothing.
@end ifset
@end table

@ifset jp
@samp{c} だと以下のようになります。
@end ifset
@ifset us
To @samp{c}, functions are assigned as follows:
@end ifset

@table @asis
@ifset jp
@item ヘッダ
c を挿入。
@item 本文
c を挿入。
@item 添付領域
ファイルのコピー。
@end ifset
@ifset us
@item header
Insert c.
@item body
Insert c.
@item attachments
Copy a file.
@end ifset
@end table

@ifset jp
以下、添付領域でのキー割当です。
@end ifset
@ifset us
The following is a summary of commands in attachments.
@end ifset

@table @samp
@ifset jp
@item C-p
現在のディレクトリの前のファイルへ移動。
@item C-n
現在のディレクトリの後のファイルへ移動。
@item C-f
1 番目のサブディレクトリに移動。
@item C-b
親ディレクトリに移動。
@item c
ファイルのコピー。"." 上で有効。ネットワーク経由でも可。リモートのファイ
ルをコピーする場合は、"/[user@@]hostname:/filepath"の形式でファイルを指
定。
@item l
ファイルへシンボッリクリンクを張る。"." 上で有効。添付ファイルを 
@samp{f} を使って読み込んで編集する場合は、実体を編集してしまわないよう
に、@samp{l} ではなく @samp{c} でコピーすべき。
@item d
ファイルとディレクトリの消去。
@item m
サブディレクトリ(つまりマルチパート)の作成。"." 上で有効。
@item f
ファイルをバッファに読み込む。
@item F
新規ファイルをバッファに読み込む。"." 上で有効。
@item y
Message モードに表示されているメッセージにリンクを張る。"." 上で有効。
@item e
external-body の入力。"." 上で有効。
@item a
音をサンプリングしオーディオファイルとして挿入。"." 上で有効。
@item p
入力されたユーザの PGP 公開鍵を取り出す。"." 上で有効。
@item D
ちょっとした説明(Content-Description:)の入力。
@item T
データ型(Content-Type:)の変更。
@item C
Text/* 型のデータの charset を指定する。
@item P
受信側でこのパートを保存する際のファイル名(Content-Disposition:)の変更。
ファイル名の入力の際に、単に @samp{RET}を押すと値が消える。そして、送信
側のファイル名が @samp{*} と共に表示される。
@end ifset
@ifset us
@item C-p
Go to the previous file in the current directory.
@item C-n
Go to the next file in the current directory.
@item C-f
Go to the first subdirectory.
@item C-b
Go to the parent directory.
@item c
Copy a file (via networks) on ".". To copy a remote file, use the
"/[user@@]hostname:/filepath" syntax.
@item l
Link a file with a symbolic link on ".". If you want to edit the
attached file, you should @samp{c} instead of @samp{l} so that you don't
edit the original file.
@item d
Delete this file or this directory.
@item m
Create a subdirectory(i.e. multipart) on ".".
@item f
Open this file into a buffer.
@item F
Open a new file into a buffer on ".".
@item y
Link the message which is displayed in Message mode on ".".
@item e
Input external-body on ".".
@item a
Sampling voice and insert as audio file on ".".
@item p
Extract the PGP key for the inputed user on ".".
@item D
Input a description(Content-Description:).
@item T
Change the data type(Content-Type:).
@item C
Specify charset for a Text/* object.
@item P
Specify a file name(Content-Disposition:) to save this part in the
receiver side. If you type just @samp{RET} without any string, its value
is cleared. Then the file name in the sender side is displayed with
@samp{*}.
@end ifset
@end table

@ifset jp
添付領域では、ファイルのサフィックスによってデータを取り扱います。現在サ
ポートしているサフィックスは以下の通りです。
@end ifset
@ifset us
In attachments, data types are guessed by suffix. The current supported
suffixes are as follows:
@end ifset

@example
.txt       Text/Plain
.html      Text/Html
.rfc822    Message/Rfc822
[0-9]+     Message/Rfc822
.ext       Message/External-body
.ps        Application/PostScript
.tar       Application/Octet-stream ;; dummy
.gif       Image/Gif
.jpg       Image/Jpeg
.jpeg      Image/Jpeg
.png       Image/Png
.xwd       Image/X-xwd
.xbm       Image/X-xbm
.bmp       Image/X-bmp
.au        Audio/Basic
.mpg       Video/Mpeg
.mpeg      Video/Mpeg
.pgp       Application/Octet-Stream
.pka       Application/Pgp-keys
.*         Text/Plain
@end example

@ifset jp
@samp{c} でファイルをコピーすると、たとえば次のようになります。コピーす
るときのファイル名は、適切なデータ型を推測できるようサフィックスに気を付
ければなんでもよいです。
@end ifset
@ifset us
For instance, if you copy files with @samp{c}, the part becomes as
follows:(Please choose an appropriate suffix for the file name so that
Mew can guesses its data type.)
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
Q    3  Application/Postscript       資料                       ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/   
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint logo            mgp.gif
Q    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
各行は、

@itemize @minus
@item
マーク(Content-Transfer-Encoding:)
@item
パート番号
@item
データの型(Content-Type:)
@item
説明(Content-Description:)
@item
ファイル名(Content-Disposition:)
@end itemize

から構成されています。
@end ifset
@ifset us
Each line of multipart consists of 

@itemize @minus
@item
marks (Content-Transfer-Encoding:)
@item
part number
@item
data type (Content-Type:)
@item
description (Content-Description:)
@item
file name (Content-Disposition:).
@end itemize
@end ifset

@ifset jp
マーク(Content-Transfer-Encoding:)を変更する方法は、@xref{mark-b-comp} 
を参照して下さい。データの型(Content-Type:)は @samp{T} によって変えられ
ます。説明(Content-Description:)は @samp{D} で入力できます。この説明のカ
ラムは、@xref{mark-b-comp} で説明する暗号化の際に上書きされます。
@end ifset
@ifset us
Please refer to @xref{mark-b-comp} to know how to change mark
(Content-Transfer-Encoding:).  You can change data types(Content-Type:)
by @samp{T} at any time. You can also insert
descriptions(Content-Description:) by @samp{D}. This description column
is overwritten when encrypted as described in @xref{mark-b-comp}.
@end ifset

@ifset jp
第5カラムに表示されるのは、実際にはコピーしたファイル名か 
Content-Disposition:、つまり、受信者がそのパートを保存する際のファイル名
です。Content-Disposition: の値があれば、それが表示されます。なければ、
コピーしたファイル名に @samp{*} を付加して表示します。ファイルをコピーし
た際の Content-Disposition: の値は、コピーしたファイル名が指定されていま
す。ただし、Message/* と Multipart/* には Content-Disposition: は設定さ
れません。Content-Disposition: を指定するには、@samp{P} を利用して下さい。
@end ifset
@ifset us
Strictly speaking, the fifth column is the copied file name or the value
of Content-Disposition:, namely the file name to which the receiver
saves the part. If Content-Disposition: exists, Mew displays
it. Otherwise, Mew displays the copied file name with @samp{*} appended.
When you copy a file, the file name is specified as
Content-Disposition:. But this is not true for both Message/* and
Multipart/*. To specify Content-Disposition:, use @samp{P}.
@end ifset

@ifset jp
ファイルはシングルパートに、ディレクトリはマルチパートに対応します。で
すから、ファイル構造を作っていく感覚で複雑なマルチパートを作成できます。
簡単でしょ？
@end ifset
@ifset us
Files mean singlepart while directories are regarding with multipart.
So, you can create very complex multipart MIME as if you created file
system. Very easy, isn't it?
@end ifset

@ifset jp
ディレクトリのデフォルトの Content-Type: は Multipart/Mixed です。これも 
@samp{T} によって変更できます。
@end ifset
@ifset us
The default data type for directories is Multipart/Mixed. Of course, you
can change it by @samp{T}.
@end ifset

@ifset jp
さて、お好みのマルチパートが作成できたら、@samp{C-cC-m} とタイプしましょ
う。あーーーら不思議。ファイル構造がマルチパートへ変換されるではありませ
んか。むろん、多段のマルチパートもサポートしています。あとは、
@samp{C-cC-c} で送るだけです。
@end ifset
@ifset us
After creating multipart, type @samp{C-cC-m}. Amazing! The created file
system is transformed to multipart MIME. Of course, multipart of
multipart is supported. Just type @samp{C-cC-c} to send it.
@end ifset

@ifset jp
MIME の文法が分かっていない人は、@samp{C-cC-m} の後に草稿を変更しないよ
うにしましょう。もし、どうしても草稿を修正するときは、「最初の境界の前と
最後の境界の後は無視される」ことに注意して下さい。
@end ifset
@ifset us
If you don't know MIME syntax, please don't modify after @samp{C-cC-m}.
If you really want to modify it, please note that the region before the
first boundary and the region after the last boundary are ignored.
@end ifset

@ifset jp
マルチパートの変換後、やっぱり元に戻したいと思ったら、@samp{C-cC-u} を使っ
て下さい。(@samp{C-xu} や @samp{C-_} ではないことに注意。)
@end ifset
@ifset us
After transforming multipart, if you want it back, use @samp{C-cC-u}.
(Please note that it's not @samp{C-xu} nor @samp{C-_}.
@end ifset

@ifset jp
パートの実体が外部にある external-body を作成するコマンド@samp{e} につい
て説明しましょう。access-type に ftp か anon-ftp を入力するときは、
ange-ftp のおかげでリモートのファイル名が補完できます。access-type が
local-file の場合は、もちろんファイル名を補完できます。
@end ifset
@ifset us
Let's consider Message/External-body by @samp{e}. If access-type is
"ftp" or "anon-ftp", you can enjoy completion for a remote file name
thanks to ange-ftp. If access-type is "local-file", of course, file
completion is available.
@end ifset

@ifset jp
もし、マルチパートの作成途中でやっぱりシングルパートに戻したくなったら、
一番上のマルチパート部分で @samp{d} を押して下さい。
@end ifset
@ifset us
If you want to quit creating multipart and to get back to singlepart,
type @samp{d} in the top level multipart.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node charset-guess, reply, mime-comp, Composing
@ifset jp
@section 文字コードの推測
@end ifset
@ifset us
@section Charset guess
@end ifset

@ifset jp
Mew はシングルパートとマルチパートの両方に対し、charset を推測する機能を
持っています。
@end ifset
@ifset us
Mew has charset guess mechanisms for both singlepart and multipart.
@end ifset

@ifset jp
<シングルパート>
@end ifset
@ifset us
<Singlepart> 
@end ifset

@ifset jp
Draft モードで @samp{C-cC-m} と入力すると、Mew は本文の charset を推測し
ます。Bilingual Emacs では、7ビットの文字コードに対し US-ASCII を選び、8
ビットの文字コードに対し ISO-8859-1 を選択します。Mule では、Mule で定め
られた文字コードの内部表現から charset を推測します。
@end ifset
@ifset us
When you type @samp{C-cC-m} on Draft mode, Mew guesses a charset from
its body. On Bilingual Emacs, US-ASCII is chosen for 7bit charset while
ISO-8859-1 is selected for 8bit charset. On Mule, a charset is chosen
based on its internal representation.
@end ifset

@ifset jp
<マルチパート>
@end ifset
@ifset us
<Multipart> 
@end ifset

@ifset jp
テキストファイルを添付領域に添付した際には、以下のように "(guess)" と表
示されます。
@end ifset
@ifset us
When you attach textfile on attachments region, the string "(guess)" is
displayed as follows:
@end ifset

@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
     2  Text/Plain(guess)                                       textfile
     3                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example

@ifset jp
シングルパートとマルチパートで charset を推測することの違いは、データが
どこに存在するかです。シングルパートはバッファに格納されていますが、マル
チパートのそれぞれのファイルはディスク上に存在します。charset を推測する
ためには、Mew はこれらのファイルをバッファに読み込み、そしてシングルパー
トと同じ要領で文字コードを推測します。
@end ifset
@ifset us
The difference of charset guess for singlepart and multipart is where
the data locates. Singlepart is stored in buffer while each file of
multipart is stored in disk. To guess a charset, Mew thus reads a file
into buffer and uses the charset guess algorithm of singlepart.
@end ifset

@ifset jp
Bilingual Emacs では、Mew はファイルをそのままの形式で読み込みます。です
から、7ビットのファイルには US-ASCII が、8ビットのファイルには 
ISO-8859-1 が選ばれます。
@end ifset
@ifset us
On Bilingual Emacs, Mew reads a file as it is. So, if the file is 7bit,
US-ASCII is chosen. Otherwise ISO-8859-1 is selected.
@end ifset

@ifset jp
Mule では、Mew はファイルをそのサイトの環境(つまり、auto conversion)に従っ
てファイルを読み込みます。この環境はサイトごとによって異なります。日本語
の環境では、Mule は 2022-JP、EUC-Japan、そして、Shift_JIS を見事に推測し、
日本語用の内部表記に変換してバッファに格納します。Mew は、この内部表記か
ら charset を推測します。よって、ISO-2022-JP、EUC-Japan、そして、
Shift_JIS のファイルを安全に添付できます。Mule でこの環境を決定する関数
は、set[up]-<language>-environment という名前ですから、詳しいことが知り
たいならこれらの関数の説明を読んで下さい。
@end ifset
@ifset us
On Mule, Mew reads a file according to the local convention(i.e. auto
conversion). The convention is really site dependent. In Japan,
ISO-2022-JP, EUC-Japan, and Shift_JIS is neatly guessed and stored in
buffer as internal representation for Japanese. Mew decides a charset
from the internal representation. That is, you can safely attach
ISO-2022-JP, EUC-Japan, and Shift_JIS text files. Functions to decide
local convention are called set[up]-<language>-environment. For more
information about local convention, read their descriptions.
@end ifset

@ifset jp
もし、ファイルの charset を明示的に指定したいなら、@samp{C} を使って下さ
い。典型的な使用例は、日本で ISO-8859-1 のファイルを添付することです。こ
の例の場合、添付領域は以下のようになります。
@end ifset
@ifset us
If you want to explicitly specify charset for a file, use @samp{C} on
attachments. A typical example is to attach ISO-8859-1 file in Japanese
environment. The attachments region becomes as follows:
@end ifset

@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
     2  Text/Plain(iso-8859-1)                                  textfile
     3                                                          .    
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example

@ifset jp
Bilingual Emacs では @samp{C} は利用できません。
@end ifset
@ifset us
Note that @samp{C} is not available on Bilingual Emacs.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node reply, forward, charset-guess, Composing
@ifset jp
@section メッセージへの返答と宛先の決定
@end ifset
@ifset us
@section Replying to a message and deciding recipients
@end ifset
@vindex mew-mail-address-list
@vindex mew-noreplyto-to-list
@vindex mew-noreplyto-cc-list
@vindex mew-replyto-to-list
@vindex mew-replyto-cc-list
@vindex mew-fromme-to-list
@vindex mew-fromme-cc-list

@ifset jp
新規にメッセージを書く場合は、To: や Cc: を自分で書くことになります。一
方 Summary モードで @samp{a} や @samp{A} を使って、あるメッセージに返答
しようとすると、To: や Cc: は自動的に用意されます。
@end ifset
@ifset us
While you specify addresses of the To: and Cc: field for a new message
by yourself, addresses are automatically prepared for a reply message.
@end ifset

@ifset jp
返答の際、Mew は以下のような手順に従って To: や Cc: を用意します。
@end ifset
@ifset us
For a reply message, Mew prepares addresses for the To: and Cc: fields
according to the following rules:
@end ifset

@ifset jp
@table @asis
@item 返答するメッセージの From: が自分以外の場合:
@table @asis
@item 返答するメッセージに Reply-To: がない場合:
@table @asis
@item 返答するメッセージの From: を To: へ (1)
@item 返答するメッセージの To: と Cc: を Cc: へ (2)
@end table
@item 返答するメッセージに Reply-To: がある場合:
@table @asis
@item 返答するメッセージの From: と Reply-To: を To: へ (3)
@item 返答するメッセージの To: と Cc: を Cc: へ (4)
@end table
@end table
@item 返答するメッセージの From: が自分である場合:
@table @asis
@item 返答するメッセージの To: を To: へ (5)
@item 返答するメッセージの Cc: を Cc: へ (6)
@end table
@end table
@end ifset
@ifset us
@table @asis
@item If From: of the message to be replied is not from me:
@table @asis
@item Reply-To: doesn't exist in the message to be replied
@table @asis
@item Copy From: of the message to be replied to To: (1)
@item Copy To: and Cc: of the message to be replied to Cc: (2)
@end table
@item Reply-To: exists in the message to be replied
@table @asis
@item Copy From: and Reply-To: of the message to be replied to To: (3)
@item Copy To: and Cc: of the message to be replied to Cc: (4)
@end table
@end table
@item If From: of a message to be replied is from me:
@table @asis
@item Copy To: of the message to be replied to To: (5)
@item Copy Cc: of the message to be replied to Cc: (6)
@end table
@end table
@end ifset

@ifset jp
ただし、あるアドレスが複数ある場合は、自動的に 1 つになります。また、匿
名の宛先を表す ":;" で終るアドレスも、自動的に消去されます。
@end ifset
@ifset us
If there are multiple entries for a certain address, they are
uniquefied. Addresses ended with ":;", which stands for anonymous
recipients, are automatically removed.
@end ifset

@ifset jp
自分のアドレスは自動的に消去されます。自分のアドレスを定義するには
@samp{mew-mail-address-list} を使います。以下に例を示します。
@end ifset
@ifset us
Your addresses are automatically removed. To define your multiple
addresses, please use @samp{mew-mail-address-list}. An example is as
follows:
@end ifset

@example
(setq mew-mail-address-list
       '("pooh@@[a-z]*.aist-nara.ac.jp"
         "pooh@@mew.org"
         "winnie@@iijlab.net"))
@end example

@ifset jp
(1) 〜 (6) でどのフィールドをコピーするかは、以下の変数で指定できます。
@end ifset
@ifset us
You can customize which fields are copied in the case (1)-(6) with the
following variables:
@end ifset

@itemize @asis
@item (1) @samp{mew-noreplyto-to-list}
@item (2) @samp{mew-noreplyto-cc-list}
@item (3) @samp{mew-replyto-to-list}
@item (4) @samp{mew-replyto-cc-list}
@item (5) @samp{mew-fromme-to-list}
@item (6) @samp{mew-fromme-cc-list}
@end itemize

@ifset jp
Reply-To: がある場合に、Reply-To: だけに返答したいと思うなら、以下のよう
に設定すればよいでしょう。
@end ifset
@ifset us
If you want to reply only to the address specified by Reply-To:,
configure as follows:
@end ifset

@example
(setq mew-replyto-to-list '("Reply-To:"))
(setq mew-replyto-cc-list nil)
@end example

@ifset jp
@samp{a} や @samp{A} を @samp{C-u} 付で呼び出すと、返答するメッセージの 
From: が To: に入り、Cc: は空になります。送信者のみに返答する場合に利用
します。
@end ifset
@ifset us
If @samp{a} or @samp{A} is executed with @samp{C-u}, From: of the
message to be replied is copied to To:, and Cc: becomes empty. You can
use this to reply the sender only.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node forward, pgp-shortcut, reply, Composing
@ifset jp
@section メッセージの転送
@end ifset
@ifset us
@section Forwarding messages
@end ifset
@vindex mew-field-delete-for-forwarding

@ifset jp
メッセージを転送するには、Summary モードで @samp{f} や @samp{F} を利用し
ます。すると、Draft モードに移行し、あらかじめメッセージが添付領域に添付
された草稿が準備されます。
@end ifset
@ifset us
To forward messages, type @samp{f} or @samp{F} in Summary mode. Then,
Draft mode appears and the messages are already attached to the
attachments region.
@end ifset

@ifset jp
また Draft モードで添付領域を用意し、メッセージをコピー(@samp{c})したり
メッセージにリンク(@samp{l})を張ったりしても、メッセージを転送できます。
ファイル名が数字([0-9]+)の場合は、自動的にメッセージだと判断されます。ま
た、添付領域で @samp{y} を使うと、Message モードに表示しているメッセージ
にリンクを張るので便利です。
@end ifset
@ifset us
Also, you can prepare the attachments region by yourself, then
copy(@samp{c}) the messages or make links(@samp{l}) to the messages.  If
the file name of the messages is numeric([0-9]+), they are automatically
considered as messages. @samp{y} is very convenient because it make a
link to the message displayed in Message mode.
@end ifset

@ifset jp
通常は添付したメッセージの全体が転送されます。もし、ヘッダの一部を削りた
い場合は、@samp{mew-field-delete-for-forwarding} を定義して下さい。以下
に "Received:" と "Return-Path:" を転送時に削るための設定例を示します。
@end ifset
@ifset us
By default, the entire message is forwarded. If you want to remove some
parts of its header, define @samp{mew-field-delete-for-forwarding}. The
following is an example to remove "Received:" and "Return-Path:" when
forwarded.
@end ifset

@example
(setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))
@end example

@c %%%%%%%%%%%%%%%%%
@node pgp-shortcut, mark-b-comp, forward, Composing
@ifset jp
@section PGP を利用する
@end ifset
@ifset us
@section Using PGP
@end ifset

@ifset jp
ここでは、テキストである本文を PGP で署名したり暗号化したりする方法につ
いて説明します。出てくるコマンドは以下の通りです。
@end ifset
@ifset us
This section describes to sign or encrypt "text only" message with PGP.
The following commands are explained.
@end ifset

@table @samp
@ifset jp
@item C-cC-s
草稿全体を PGP で署名する。パスフレーズを入力すること。
@item C-cC-e
草稿全体を PGP で暗号化する。
@item C-cC-b
草稿全体を PGP で署名後暗号化する。パスフレーズを入力すること。
@item C-cC-r
草稿全体を PGP で暗号化後署名する。パスフレーズを入力すること。
@end ifset
@ifset us
@item C-cC-s
Sign the entire draft with PGP. Input your passphrase.
@item C-cC-e
Encrypt the entire draft with PGP.
@item C-cC-b
Sign then encrypt the entire draft with PGP. Input your passphrase.
@item C-cC-r
Encrypt then sign the entire draft with PGP. Input your passphrase.
@end ifset
@end table

@ifset jp
メッセージを暗号化するには受信者の公開鍵を使用します。逆に署名するには自
分の秘密鍵を使います。よって、署名するためにはパスフレーズを入力する必要
があります。ただし、パスフレーズの保存機能を使っており、パスフレーズが保
存されている場合は、パスフレーズを入力する必要はありません
(@xref{pgp-viewing})。
@end ifset
@ifset us
To encrypt a message, receivers' public keys are used. In the contrary,
your secret key is used to sign a message. So, you need to input your
pass-phrase when sign up. Note that if you use the pass-phrase cache
and if pass-phrases are cached, you do not have to type your
pass-phrase(@xref{pgp-viewing}).
@end ifset

@ifset jp
これらは、次節で説明するマークを使った PGP/MIME の作成方法の省略方法に当
たります。
@end ifset
@ifset us
They are shortcut methods of mark based composing described in the next
subsection.
@end ifset

@ifset jp
Mew で PGP を使うためには、PGP の userid としてアドレスを選ぶ必要があり
ます(例 "Kazuhiko Yamamoto <kazu@@mew.org>")。
@end ifset
@ifset us
If you use PGP with Mew, you have to select Email address for your PGP
userid(e.g. "Kazuhiko Yamamoto <kazu@@mew.org>").
@end ifset

@ifset jp
以降の説明では、次の例を取り上げます。
@end ifset
@ifset us
Let's use the following example for further explanations. 
@end ifset

@example
@ifset jp
To: pooh
Subject: PGP/MIME を使おうよ
X-Mailer:@value{X-Mailer:}
----
Mew がセキュリティ・マルチパートをサポートしました。

--かず
@end ifset
@ifset us
To: pooh
Subject: Let's PGP/MIME
X-Mailer:@value{X-Mailer:}
----
Mew starts walking with security multipart. Enjoy PGP/MIME!

--Kazu
@end ifset
@end example

@ifset jp
署名するには、@samp{C-cC-s} と入力します。すると、次のメッセージが得られ
ます。
@end ifset
@ifset us
To sign with PGP, type @samp{C-cC-s} resulting in the following.
@end ifset

@example
@ifset jp
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: PGP/MIME =?iso-2022-jp?B?GyRCJHI7SCQqJCYkaBsoQg==?=
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Multipart/Signed;
        protocol="application/pgp-signature";
        micalg="pgp-md5";
        boundary="--Security_Multipart(Sat_Nov_16_03:55:00_1996)--"
Content-Transfer-Encoding: 7bit

----Security_Multipart(Sat_Nov_16_03:55:00_1996)--
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

Mew がセキュリティ・マルチパートをサポートしました。

--かず

----Security_Multipart(Sat_Nov_16_03:55:00_1996)--
Content-Type: Application/Pgp-Signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP MESSAGE-----
Version: 2.6.3i

iQCVAwUAMoy8ig9kihyeT3RNAQHt7AQAySDg4n8pOp/YuLaAp68Un/YDtWS0FnOC
7EqHJd6fyViPBnZq8d+uGikA7kOBTz+8Kcv+hN6I7BrQVJGEzd0Y9yHHhXvZj++1
0D09vgWL5G/Zfk/JMnLBt/BZ1ppOhJPT/L5qi2abk+mBVMKxQe071lfFEfvjF1C2
8trTXm/bBz4=
=TvAG
-----END PGP MESSAGE-----

----Security_Multipart(Sat_Nov_16_03:55:00_1996)----
@end ifset
@ifset us
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: Let's PGP/MIME
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Multipart/Signed;
        protocol="application/pgp-signature";
        micalg="pgp-md5";
        boundary="--Security_Multipart(Sat_Nov_16_03:55:00_1996)--"
Content-Transfer-Encoding: 7bit

----Security_Multipart(Sat_Nov_16_03:55:00_1996)--
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Mew starts walking with security multipart. Enjoy PGP/MIME!

--Kazu

----Security_Multipart(Sat_Nov_16_03:55:00_1996)--
Content-Type: Application/Pgp-Signature
Content-Transfer-Encoding: 7bit

-----BEGIN PGP MESSAGE-----
Version: 2.6.3i

iQCVAwUAMoy8ig9kihyeT3RNAQHt7AQAySDg4n8pOp/YuLaAp68Un/YDtWS0FnOC
7EqHJd6fyViPBnZq8d+uGikA7kOBTz+8Kcv+hN6I7BrQVJGEzd0Y9yHHhXvZj++1
0D09vgWL5G/Zfk/JMnLBt/BZ1ppOhJPT/L5qi2abk+mBVMKxQe071lfFEfvjF1C2
8trTXm/bBz4=
=TvAG
-----END PGP MESSAGE-----

----Security_Multipart(Sat_Nov_16_03:55:00_1996)----
@end ifset
@end example

@ifset jp
@samp{C-cC-c} で送信して下さい。
@end ifset
@ifset us
Type @samp{C-cC-c} to send it.
@end ifset

@ifset jp
暗号化するには、@samp{C-cC-e} と入力して下さい。次のようになります。
@end ifset
@ifset us
To encrypt with PGP, type @samp{C-cC-e}. You get the following message.
@end ifset

@example
@ifset jp
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: PGP/MIME =?iso-2022-jp?B?GyRCJHI7SCQqJCYkaBsoQg==?=
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Multipart/Encrypted;
        protocol="application/pgp-encrypted";
        boundary="--Security_Multipart(Sat_Nov_16_03:57:47_1996)--"
Content-Transfer-Encoding: 7bit

----Security_Multipart(Sat_Nov_16_03:57:47_1996)--
Content-Type: Application/Pgp-Encrypted
Content-Transfer-Encoding: 7bit

Version: 1

----Security_Multipart(Sat_Nov_16_03:57:47_1996)--
Content-Type: Application/Octet-Stream
Content-Transfer-Encoding: 7bit

-----BEGIN PGP MESSAGE-----
Version: 2.6.3i

hIwDD2SKHJ5PdE0BA/9gUkcQYVfT+3LrUmcgLkNepuOnDfjADHrWiNo10t4ijyf8
ODBpUBXoBdTg08eNLAWmRFhiJPmI+mxpF6cYFZXhr7gVpa0Qzp3Gr9nYvngRPKNK
qUiQjA/ORR3c1TBawufB19jJ9RdU2f0BidhzOSbzsJh1LTgUZu/7Qyd02LxyEqYA
AACbrV867PeoFyFc9MVfqTUR6Zw6kGBAlnVYjqQgBhuuyG79vbAbDJMhFiRpoRPf
0MqEewxRonwKOik/PoKnLrwFg77Cb5pxRqMiWPyECJnqtX7r7Wg1c8kqPD0VRjI9
GhHPiG/RmNbpbj/5g6zZri1YBCe8qxIS0QKa3YO7HRDcdBFARr22RaFGFtgdBQ6X
cZB+qNeEaKXt3AneTWc=
=djCr
-----END PGP MESSAGE-----

----Security_Multipart(Sat_Nov_16_03:57:47_1996)----
@end ifset
@ifset us
To: winnie-the-pooh@@100acre.woodwest.uk
Subject: Let's PGP/MIME
X-Mailer:@value{X-Mailer:}
Mime-Version: 1.0
Content-Type: Multipart/Encrypted;
        protocol="application/pgp-encrypted";
        boundary="--Security_Multipart(Sat_Nov_16_03:57:47_1996)--"
Content-Transfer-Encoding: 7bit

----Security_Multipart(Sat_Nov_16_03:57:47_1996)--
Content-Type: Application/Pgp-Encrypted
Content-Transfer-Encoding: 7bit

Version: 1

----Security_Multipart(Sat_Nov_16_03:57:47_1996)--
Content-Type: Application/Octet-Stream
Content-Transfer-Encoding: 7bit

-----BEGIN PGP MESSAGE-----
Version: 2.6.3i

hIwDD2SKHJ5PdE0BA/9gUkcQYVfT+3LrUmcgLkNepuOnDfjADHrWiNo10t4ijyf8
ODBpUBXoBdTg08eNLAWmRFhiJPmI+mxpF6cYFZXhr7gVpa0Qzp3Gr9nYvngRPKNK
qUiQjA/ORR3c1TBawufB19jJ9RdU2f0BidhzOSbzsJh1LTgUZu/7Qyd02LxyEqYA
AACbrV867PeoFyFc9MVfqTUR6Zw6kGBAlnVYjqQgBhuuyG79vbAbDJMhFiRpoRPf
0MqEewxRonwKOik/PoKnLrwFg77Cb5pxRqMiWPyECJnqtX7r7Wg1c8kqPD0VRjI9
GhHPiG/RmNbpbj/5g6zZri1YBCe8qxIS0QKa3YO7HRDcdBFARr22RaFGFtgdBQ6X
cZB+qNeEaKXt3AneTWc=
=djCr
-----END PGP MESSAGE-----

----Security_Multipart(Sat_Nov_16_03:57:47_1996)----
@end ifset
@end example

@ifset jp
@samp{C-cC-c} で送信して下さい。このメッセージは、受信者の公開鍵に加えて、
自分の公開鍵でも暗号化されています。ですから、保存したメッセージを復号化
できます(例 @samp{g} で +Backup に移動したとき)。
@end ifset
@ifset us
Type @samp{C-cC-c} to send it. This message is encrypted with your
public key in addition to the receivers. So you can decrypt backup
messages(e.g. Visiting to +Backup with @samp{g}).
@end ifset

@ifset jp
署名後暗号化するには、@samp{C-cC-b} と入力します。暗号化後署名するには、
@samp{C-cC-r} とタイプします。いずれの場合も、@samp{C-cC-c} で送信して下
さい。
@end ifset
@ifset us
To sign a draft and then encrypt it, type @samp{C-cC-b}. To encrypt a
draft and then sign it, type @samp{C-cC-r}. In either case, type
@samp{C-cC-c} to send the draft.
@end ifset

@ifset jp
PGP で署名を施したり、暗号化したりしてメッセージを送ろうと思っていても、
うっかり忘れることがあります。そのため、メッセージを作成するコマンド 
@samp{C-cC-m} に対し、必要に応じて PGP を起動させる機能があります。
@end ifset
@ifset us
It is very likely that you forget to sign and/or encrypt a draft even if
you want to do so. To resolve this, Mew provides automatic PGP mechanism
for the massage creation function, @samp{C-cC-m}
@end ifset

@ifset jp
作成するすべてのメッセージのプライバシを保護したいなら、
@samp{mew-protect-privacy-always} を @samp{t} にして、
@samp{mew-protect-privacy-always-type} に利用したいサービスを設定します。
@end ifset
@ifset us
If you want to protect privacy of all drafts, set
@samp{mew-protect-privacy-always} to @samp{t} and set
@samp{mew-protect-privacy-always-type} to one of PGP services.
@end ifset

@ifset jp
暗号化されたメッセージに対する返答メッセージのプライバシを保護したいなら、
@samp{mew-protect-privacy-encrypted} を @samp{t} にして、
@samp{mew-protect-privacy-encrypted-type} に利用したいサービスを設定しま
す。この設定は、暗号化されたメッセージへの返答する場合、上記のすべてのメー
ルに対する設定よりも優先されます。
@end ifset
@ifset us
If you want to protect privacy of drafts replying encrypted messages,
set @samp{mew-protect-privacy-encrypted} to @samp{t} and set
@samp{mew-protect-privacy-encrypted-type} to one of PGP services.  This
configuration is preferred to the configuration for all drafts described
above in the case of replying encrypted messages.
@end ifset

@ifset jp
以下に利用できるサービスを示します。かっこ内はそれぞれのサービスを表すシ
ンボルです。@samp{C-cC-m} した際に利用されるサービスは、モードラインに表
示されます。
@end ifset
@ifset us
The following services are available. The strings in brace are symbol of
each service. The service applied when @samp{C-cC-m} is displayed in the
mode line.
@end ifset

@ifset jp
@table @asis
@item pgp-signature (PS)
署名
@item pgp-encryption (PE)
暗号化
@item pgp-signature-encryption (PSPE)
署名後暗号化
@item pgp-encryption-signature (PEPS)
暗号化後署名
@end table
@end ifset
@ifset us
@table @asis
@item pgp-signature (PS)
Sign
@item pgp-encryption (PE)
Encrypt
@item pgp-signature-encryption (PSPE)
Sign then encrypt
@item pgp-encryption-signature (PEPS)
Encrypt then sign
@end table
@end ifset

@ifset jp
以下の例は、すべてのメールに対し @samp{C-cC-m} で署名する設定です。
@end ifset
@ifset us
The following example is to sign all drafts when @samp{C-cC-m}.
@end ifset

@example
(setq mew-protect-privacy-always t)
(setq mew-protect-privacy-always-type 'pgp-signature)
@end example

@ifset jp
以下の例は、暗号化されたメッセージへの返答メッセージに対し、
@samp{C-cC-m} で暗号化する設定です。
@end ifset
@ifset us
The following example is to encrypt drafts replying encrypted messages
when @samp{C-cC-m}.
@end ifset

@example
(setq mew-protect-privacy-encrypted t)
(setq mew-protect-privacy-encrypted-type 'pgp-encryption)
@end example

@ifset jp
Draft モードでは、@samp{C-cC-pC-a} で @samp{mew-protect-privacy-always}、
@samp{C-cC-pC-e} で @samp{mew-protect-privacy-encrypted} の値を反転でき
ます。
@end ifset
@ifset us
In Draft mode, @samp{C-cC-pC-a} toggles
@samp{mew-protect-privacy-always} and @samp{C-cC-pC-e} toggles
@samp{mew-protect-privacy-encrypted}.
@end ifset

@ifset jp
Draft モードにおいて現在書いている草稿対してのみあらかじめサービスを指定
しておき、送信時にサービスを施すことを忘れないようにできます。現在の草稿
に対し @samp{C-cC-m} で施されるサービスを指定するには、 @samp{C-cC-pC-d} 
に続いて上記のサービスの 1 つを入力して下さい。
@end ifset
@ifset us
You can specify privacy services for the current draft in Draft mode
beforehand so that you don't forget to apply the privacy services when
sending. To set privacy services to the current draft evaluated when
@samp{C-cC-m}, type @samp{C-cC-pC-d} then input one of privacy services
above.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mark-b-comp, pgp-key, pgp-shortcut, Composing
@ifset jp
@section マークを使った PGP/MIME の作成
@end ifset
@ifset us
@section Mark based composer
@end ifset

@ifset jp
PGP/MIME をサポートするために、マークを使った作成方法が提供されています。
以前の例を思い出してみましょう。
@end ifset
@ifset us
To support PGP/MIME, mark based composing is provided. Remember the
previous example.
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/     
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint のロゴ          mgp.gif
Q    3  Application/Postscript       資料                       ohp.ps
     4                                                          . 
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
B    2  Image/Gif                    MagicPoint logo            mgp.gif
Q    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
行頭に @samp{B} や @samp{Q} といったマークがあります。このマークは符号化
を意味しています。Mew では、新しい概念「符号化」を導入しています。符号化
には、Base64, Quoted-Printable, Gzip64(Gzip + Base64), PGP で署名, PGPで
暗号化などがあります。
@end ifset
@ifset us
You can find the @samp{B} mark and the @samp{Q} mark at the beginning of
line. Mew provides you with a new concept of "encoding". Encoding
includes Base64, Quoted-Printable, Gzip64(Gzip + Base64), sign with PGP,
encrypt with PGP.
@end ifset

@ifset jp
現在次の 6 つのマークがサポートされています。
@end ifset
@ifset us
Currently 6 marks are prepared.
@end ifset

@table @samp
@ifset jp
@item " "
符号化しない。ただし、8ビットのテキストは符号化されるかもしれない。
@item B
Base64
@item Q
Quoted-Printable
@item G
Gzip64(gzip 圧縮し Base64 で符号化する。Mew が実験的に採用している。相手
が Mew を使っていない場合は、使用すべきではない。)
@item PS 
PGP で電子署名。
@item PE
PGP で暗号化。
@end ifset
@ifset us
@item " "
No encoding. But 8bit text would be encoded.
@item B 
Base64 
@item Q
Quoted-Printable
@item G
Gzip64(compressed with gzip then encoded with Base64. This is
experimental. Don't use this if receivers don't use Mew.)
@item PS 
Sign with PGP
@item PE
Encrypt with PGP
@end ifset
@end table

@ifset jp
添付領域でのマークに関係する新しいキー割当は以下の通りです。
@end ifset
@ifset us
Additional key binding for marks in attachments is as follows:
@end ifset

@table @samp
@ifset jp
@item B
Base64 で符号化するため @samp{B} マークを付ける。
@item Q
Quoted-Printable で符号化するため @samp{Q} マークを付ける。
@item G
Gzip64 で符号化するため @samp{G} マークを付ける。ただし、Text/Plain と 
Application/Postscript でしか実行できない。これ以外の型には圧縮は無意味
である。なぜなら、jpeg などはあらかじめ圧縮されているから。
@item S
PGP で署名するため @samp{PS} マークを付ける。
@item E 
PGP で暗号化するため @samp{PE} マークを付ける。受信者のアドレスを入力す
る。
@item U
符号化を元に戻す。元々のマークに戻る。
@end ifset
@ifset us
@item B
Put the @samp{B} mark to encode with Base64.
@item Q
Put the @samp{Q} mark to encode with Quoted-Printable.
@item G
Put the @samp{G} mark to encode with Gzip64. This is applicable only to
Text/Plain and Application/Postscript since compression is not effective
other objects. For example, JPEG is already compressed.
@item S
Put the @samp{PS} mark to sign with PGP.
@item E 
Put the @samp{PE} mark to encrypt with PGP. Input decryptors' addresses.
@item U 
Unmark. The original mark appears.
@end ifset
@end table

@ifset jp
次の例を考えてみましょう。パート 2 は PGP で署名され、"kazu" 用に PGP で
暗号化されます。安心して下さい。説明の部分は上書きされていますが、保存さ
れています。パート 3 は Gzip64 で符号化されます。
@end ifset
@ifset us
Consider the following example. The second part will be signed with PGP
then encrypted with PGP for "kazu". Take it easy! It's description is
overwritten but saved. The third part will be encoded with Gzip64.
@end ifset

@ifset jp
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
PSPE 2  Image/Gif                    kazu@@mew.org               mgp.gif
G    3  Application/Postscript       資料                       ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset
@ifset us
@example
----------------------------- attachments -----------------------------
      Multipart/Mixed                                         1/
     1  Text/Plain(guess)                                       CoverPage*
PSPE 2  Image/Gif                    kazu@@mew.org               mgp.gif
G    3  Application/Postscript       Presentation Material      ohp.ps
     4                                                          .
--------0-1-2-3-4-5-6-7-8-9--------------------------------------------
@end example
@end ifset

@ifset jp
適宜マークを付けた後は、@samp{C-cC-m} で MIME(PGP/MIMEなど) を作成し、
@samp{C-cC-c} で送信して下さい。
@end ifset
@ifset us
After putting marks, type @samp{C-cC-m} to create PGP/MIME and then
press @samp{C-cC-c} to send it.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node pgp-key, Marks, mark-b-comp, Composing
@ifset jp
@section PGP の鍵の配布
@end ifset
@ifset us
@section PGP key distribution
@end ifset

@ifset jp
PGP の公開鍵を配布するには、Draft モードの添付領域で @samp{p} を押して下
さい。だれの公開鍵を配布するか尋ねられます。自分の公開鍵であれば、単に 
@samp{RET} と入力して下さい。他人の公開鍵であれば、補完を利用しながらそ
の人のアドレスを入力して下さい。PGP の公開鍵は、Application/Pgp-keys と
いうデータ型で配送されます。
@end ifset
@ifset us
To distribute a PGP public key, please use @samp{p} on attachments in
Draft mode. It asks whose public key you want to distribute. Just type
@samp{RET} if it is yours. If you want to distribute another person's,
input his Email address with completion. The PGP public key will
distributed as Content-Type: Application/Pgp-keys.
@end ifset

@ifset jp
Summary モード、あるいは、Virtual モードでメッセージを読んでいる際に、あ
るパートのデータ型が Application/Pgp-keys であれば、Mew は PGP の公開鍵
リングにそれを登録しようとします。Mew は、「信用度」と「有効性」を全く考
慮しないことに注意して下さい。これらの値を設定するのは、あなた自身です。
設定には、"pgp -ke" と "pgp -ks" を使って下さい。もし、「信用度」と「有
効性」の意味が分からなければ、PGP を使って自分のプライバシを保護しようと
する前に、PGP が提供する「信用の輪」とは何かを学ぶべきです。
@end ifset
@ifset us
If Mew finds that the part is Application/Pgp-keys, it tries to add the
PGP public key onto your PGP public keyring. Remember that Mew is
careless about both TRUST and VALIDITY. It is YOU who set these
values. Please use "pgp -ke" and "pgp -ks" to change them. If you don't
know what TRUST and VALIDITY is, you should learn the web of trust
system provided by PGP BEFORE using PGP to protect your privacy.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Marks
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Marks, delete mark, pgp-key, Top
@ifset jp
@chapter 愉快なマークたち
@end ifset
@ifset us
@chapter Funny marks
@end ifset

@ifset jp
ここでは、Summary モードで利用できるマークについて説明します。マークは以
下のように、数字の右に付きます。
@end ifset
@ifset us
Here are described marks in Summary mode. Mark is displayed right side
of message number as follows:
@end ifset

@example
@ifset jp
    1D 07/17 いとぢゅん     v6: items to be no in6_pcbnotify()がなにも
    2o 07/18 歌代先生       Re: behavior after これ、mark-ring がどんど
    3* 07/19 のむさん       refile info.       乃村です。遅くなりました。
@end ifset
@ifset us
    1D 07/17 Itojun         v6: items to be no in6_pcbnotify() doesn't
    2o 07/18 Utashiro       Re: behavior after I'm afraid that mark-ring
    38 07/19 Nom-sun        refile info.       Sorry for my late respon
@end ifset
@end example

@ifset jp
現在利用できるマークは以下の4つです。
@end ifset
@ifset us
There are four marks at present.
@end ifset

@table @samp
@ifset jp
@item D
消去のマーク。
@item o
整頓、つまり、フォルダを移動させるマーク。
@item @@
複数のメッセージを一度に扱うためのマーク。
@item *
後から読み返すためのマーク。
@end ifset
@ifset us
@item D
The mark to delete.
@item o
The mark to refile, that is, to move a message to another folder.
@item @@
The mark to process messages at the same time.
@item *
The mark to review.
@end ifset
@end table

@ifset jp
以下それぞれについて説明します。
@end ifset
@ifset us
They are explained step by step.
@end ifset

@menu
@ifset jp
* delete mark::                 消去 @samp{D}
* refile mark::                 整頓 @samp{o}
* multi mark::                  複数 @samp{@@}
* review mark::                 復習 @samp{*}
* unmark::                      マークの消去
* mark level::                  マークの強さ
@end ifset
@ifset us
* delete mark::                 Delete @samp{D}
* refile mark::                 Refile @samp{o}
* multi mark::                  Multiple @samp{@@}
* review mark::                 Review @samp{*}
* unmark::                      Deleting marks
* mark level::                  Mark strength
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node delete mark, refile mark, Marks, Marks
@ifset jp
@section 消去 @samp{D}
@end ifset
@ifset us
@section Delete @samp{D}
@end ifset
@vindex mew-msg-rm-policy
@vindex mew-msg-rm-folder-list

@ifset jp
メッセージを消去するには、まず Summary モードで @samp{d} を押して、
@samp{D} マークを付けます。マークを付けただけでは何も起こらないので、間
違って @samp{d} を押しても大丈夫です。デフォルトでは、@samp{x} を押すと 
@samp{D} マークの付いたメッセージが +trash フォルダに移動します。
@end ifset
@ifset us
If you want to delete a message, type @samp{d} in Summary mode to put
the @samp{D} mark on it. Take it easy. Since putting the @samp{D} mark
causes nothing, mistakes are not fatal. By default, typing @samp{x}
moves messages marked with @samp{D} to the +trash folder.
@end ifset

@ifset jp
+trash フォルダ内のメッセージを実際に消去するには、デフォルトでは以下の 
2 つの方法があります。
@end ifset
@ifset us
To delete messages in the +trash folder really, there are two methods by
default.
@end ifset

@enumerate
@item
@ifset jp
Summary モードで @samp{D} を実行する。
@end ifset
@ifset us
Type @samp{D} in Summary mode.
@end ifset
@item
@ifset jp
+trash フォルダ内で @samp{D} マークを付けて、@samp{x} を押す。
@end ifset
@ifset us
Put the @samp{D} mark in the +trash folder then type @samp{x}.
@end ifset
@end enumerate

@ifset jp
これまでしつこいように「デフォルトでは」と念を押してきました。ここでいう
デフォルトとは、@samp{mew-msg-rm-policy} が@samp{'trashonly} であるとい
うことです。@samp{mew-msg-rm-policy} は以下のような値をとれます。それぞ
れの説明は @samp{x} を押した際の動作についてです。
@end ifset
@ifset us
So far, the word "by default" was repeated. This means that
@samp{mew-msg-rm-policy} is set to @samp{'trashonly}. You can set one of
the following values to @samp{mew-msg-rm-policy}. Each explanation is
about action when @samp{x} is pressed.
@end ifset

@table @samp
@item 'totrash
@ifset jp
+trash フォルダ以外のフォルダでは、@samp{D}マークの付いたメッセージが 
+trash フォルダに移動します。+trash フォルダでは単にマークが消えます。
@end ifset
@ifset us
Refile to the +trash folder if not in the +trash folder.
Just umark the 'D' mark if in the +trash folder.
@end ifset
@item 'always
@ifset jp
@samp{D} マークの付いたメッセージは実際に消去されます。
@end ifset
@ifset us
Really remove messages marked with 'D' always anyway.
@end ifset
@item 'trashonly
@ifset jp
+trash フォルダの @samp{D} マークの付いたメッセージは、実際に消去されま
す。それ以外のフォルダにある @samp{D} マークの付いたメッセージは、+trash 
フォルダに移動します。
@end ifset
@ifset us
Really remove messages marked with 'D' if in the +trash folder.
In other fonders, refile to the +trash folder.
@end ifset
@item 'uselist
@ifset jp
@samp{mew-msg-rm-folder-list} で指定されたフォルダの @samp{D} マークの付
いたメッセージは、実際に消去されます。それ以外のフォルダにある @samp{D} 
マークの付いたメッセージは、+trash フォルダに移動します。
@end ifset
@ifset us
Really remove messages marked with 'D' if in a folder found in
@samp{mew-msg-rm-folder-list}. In other folders, refile to the +trash
folder.
@end ifset
@ifset jp
@item それ以外
@samp{'totrash} と同様に扱われます。
@end ifset
@ifset us
@item other values
Considered as 'trashonly.
@end ifset
@end table

@ifset jp
自分の好きなように @samp{x} の動作をカスタマイズして下さい。
@end ifset
@ifset us
Customize the action of @samp{x} as you like.
@end ifset

@ifset jp
すべての @samp{*} マークを @samp{D} に変換できれば、一度にたくさんの 
@samp{D} マークを付けれて便利です。これには、@samp{md} を利用して下さい。
@end ifset
@ifset us
It is convenient if you can change the @samp{*} mark to the @samp{D}
mark since you can put many the @samp{D} marks at once. To achieve this,
use @samp{md}.
@end ifset

@ifset jp
以下に、@samp{D} マークに関するコマンドをまとめます。
@end ifset
@ifset us
The following is a summary regarding with the @samp{D} mark.
@end ifset

@table @samp
@ifset jp
@item d 
@samp{D} マークを付ける。
@item x
@samp{D} マークの付いたメッセージを @samp{mew-msg-rm-policy} に従って処
理する。
@item md
@samp{*} マークすべてを @samp{D}マークに変換する。
@end ifset
@ifset us
@item d 
Put the @samp{D} mark.
@item x
Process messages marked with @samp{D} according to
@samp{mew-msg-rm-policy}.
@item md
Change all @samp{*} mark to the @samp{D} mark.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node refile mark, multi mark, delete mark, Marks
@ifset jp
@section 整頓 @samp{o}
@end ifset
@ifset us
@section Refile @samp{o}
@end ifset

@ifset jp
メッセージを整頓するには @samp{o} を押して、整頓先のフォルダを入力し、
@samp{o} マークを付けます。整頓先のフォルダは、賢く推測してくれるので、
ほどんどの場合はフォルダ名を入力する代わりに @samp{RET} を押すだけです。
"," で区切って複数のフォルダを入力することもできます。もちろん、
@samp{TAB} で補完できます。詳しくは @xref{Refile} を参照して下さい。
@end ifset
@ifset us
To refile a message, type @samp{o} and input a folder name, then
@samp{o} is put. A folder is guessed neatly, so most time what you
should to is just type @samp{RET}. For more information, refer to
@xref{Refile}.
@end ifset

@ifset jp
@samp{o} マークの付いたメッセージの上で @samp{o} を押すと、整頓先を追加
したり変更したりできます。また、実際の整頓は @samp{x} と入力されたときに
実行されます。
@end ifset
@ifset us
If you type @samp{o} on a message marked with @samp{o}, the refile
folder is shown. When typing @samp{x}, messages marked with @samp{o} are
actually refiled.
@end ifset

@ifset jp
以下に、@samp{o} マークに関するコマンドをまとめます。
@end ifset
@ifset us
A summary about the @samp{o} mark is here.
@end ifset

@table @samp
@ifset jp
@item o
@samp{o} マークを付ける。
@item x
@samp{o} マークの付いたメッセージを整頓する。
@item mo
@samp{*} マークの付いたメッセージに対し入力されたフォルダへ整頓するため
の @samp{o} マークを付ける。
@end ifset
@ifset us
@item o
Put the @samp{o} mark.
@item x
Refile messages marked with @samp{o}
@item mo
Change all @samp{*} marks to the @samp{o} mark to be refiled.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node multi mark, review mark, refile mark, Marks
@ifset jp
@section 複数 @samp{@@}
@end ifset
@ifset us
@section Multiple @samp{@@}
@end ifset

@ifset jp
複数のメッセージを一度に取り扱うためには、@samp{@@} マークを付けます。
@samp{@@} マークが付いた単数／複数のメッセージを取り扱うコマンドは以下の
通りです。
@end ifset
@ifset us
To process multiple messages, put the @samp{@@} mark. Here is a summary
concerned with the @samp{@@} mark.
@end ifset

@table @samp
@ifset jp
@item @@
@samp{@@} マークを付ける。
@item F
@samp{@@} マークの付いたメッセージを MIME 形式で転送するための草稿を準備。
@item M-s
@samp{@@} マークの付いたメッセージを "unshar" の入力として渡す。つまり、
shar (の後に split)されたデータを取り出す。
@item M-t
@samp{@@} マークの付いたメッセージを "uumerge" の入力として渡す。つまり、
uuencode(の後に split)されたデータを取り出す。
@item M-b
@samp{@@} マークの付いたメッセージに格納されているメッセージを取り出す。
@item J
大きなメッセージは Message/Partial として複数に分割されている場合がある。
このコマンドは、@samp{@@} マークの付いた Message/Partial のメッセージか
ら元のメッセージを生成する。
@end ifset
@ifset us
@item @@
Put the @samp{@@} mark.
@item F
Prepare a draft to forward multiple messages marked with @samp{@@} in MIME
format.
@item M-s
Apply unshar on messages marked with @samp{@@}.
@item M-t
Apply "uudecode" on messages marked with @samp{@@}.
@item M-b
De-capsulate messages embedded in the messages marked with @samp{@@}.
@item J
A large message is occasionally fragmented into multiple messages whose
Content-Type: is Message/Partial. This command produces the original
message from Message/Partial messages marked with @samp{@@}.
@end ifset
@end table

@ifset jp
@samp{M-s} や @samp{M-t} では、@samp{@@} マークの付いたメッセージの番号
がきちんと分割順になっている必要があります(番号はとびとびでも構いません)。
ちゃんと順番になってないなら、@samp{S} でソートするとよいかもしれません。
@end ifset
@ifset us
For @samp{M-s} and @samp{M-t}, messages marked with @samp{@@} are
supposed to be in order(numbers can be discrete). If out of order,
sorting with @samp{S} would help.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node review mark, unmark, multi mark, Marks
@ifset jp
@section 復習 @samp{*}
@end ifset
@ifset us
@section Review @samp{*}
@end ifset

@ifset jp
後から読み返したいメッセージには、@samp{*} で @samp{*} マークを付けて下
さい。また、選択コマンド @samp{?} を使うと、入力した条件にマッチするメッ
セージに@samp{*} マークが付きます(詳しくは、@xref{Pick} を参照して下さい)。
@samp{N} や @samp{P} で @samp{*} マークの付いたメッセージに移動し表示で
きます。
@end ifset
@ifset us
Please put the @samp{*} mark onto messages that you want to review
later. @samp{?} also put the @samp{*} mark onto matched messages(for
more information, refer to @xref{Pick}). Use @samp{N} and @samp{P} to
walk around messages marked with @samp{*}.
@end ifset

@ifset jp
以下に、@samp{*} に関連するコマンドを示します。
@end ifset
@ifset us
Here is a summary for @samp{*} commands.
@end ifset

@table @samp
@ifset jp
@item *
@samp{*} マークを付ける。
@item N
下方向の @samp{*} マークの付いたメッセージへ移動し表示。
@item P
上方向の @samp{*} マークの付いたメッセージへ移動し表示。
@item ma
マークの付いていないメッセージすべてに @samp{*} マークを付ける。
@item mr
入力した正規表現にマッチしたメッセージに @samp{*} マークを付ける。
@item md
@samp{*} マークを @samp{D} マークに変換。選択コマンド @samp{?} で選んだ
メッセージを消去するときに便利。
@item mo
@samp{*} マークを @samp{o} マークに変換。選択コマンド @samp{?} で選んだ
メッセージをあるフォルダに整頓する場合に便利。
@end ifset
@ifset us
@item *
Put the @samp{*} mark.
@item N
Jump to the message marked with @samp{*} below and display it.
@item P
Jump to the message marked with @samp{*} above and display it.
@item ma
Put the @samp{*} mark to all unmarked messages.
@item mr
Put the @samp{*} mark to all matching messages with inputed regular
expression.
@item md
Change @samp{*} marks to @samp{D} mark.
It is useful to delete messages selected by @samp{?}.
@item mo
Change the @samp{*} marks to the @samp{o} mark.
It is useful to refile messages selected by @samp{?}.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node unmark, mark level, review mark, Marks
@ifset jp
@section マークの消去
@end ifset
@ifset us
@section Deleting marks
@end ifset

@ifset jp
@samp{o} マークや @samp{D} マークが付いたメッセージは、マーク実行コマン
ド @samp{x} を押さない限り処理されません。よって、@samp{x} を押す前に、
マークを取り止めるコマンド @samp{u} でマークを消せば、誤ってメッセージを
消すことはありません。
@end ifset
@ifset us
Refiling and deleting is not processed unless you type @samp{x}. So, if
you press @samp{u} to unmark before you type @samp{x}, messages do not
disappear accidentally.
@end ifset

@ifset jp
以下にマークを消去するコマンドをまとめます。
@end ifset
@ifset us
Here is a summary for unmark commands.
@end ifset

@table @samp
@ifset jp
@item u
現在のメッセージのマークを消す。
@item U
入力したマークが付いているすべてのメッセージのマークを消す。
@end ifset
@ifset us
@item u
Cancel the mark on this message.
@item U
Cancel all marks according to what you input.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node mark level, Refile, unmark, Marks
@ifset jp
@section マークの強さ
@end ifset
@ifset us
@section Mark strength
@end ifset

@ifset jp
マークには「強いマーク」と「弱いマーク」があります。同じレベルのマークは
上書きできます。強いマークは弱いマークを上書きできます。
@end ifset
@ifset us
Marks are classified into two categories, "strong mark" and "weak mark".
The same level mark can be overwritten. A strong mark can overwrite a
weak mark.
@end ifset

@ifset jp
マークを付けた際の動作は、以下の通りです。
@end ifset
@ifset us
When you put a mark, the following action is taken.
@end ifset

@table @asis
@ifset jp
@item 強いマーク :: @samp{o} と @samp{D}
新たにマークしたときは、次のメッセージを表示。上書きした場合は、その行に
留まる。
@item 弱いマーク :: @samp{*} と @samp{@@}
常にその行に留まる。
@end ifset
@ifset us
@item Strong marks :: @samp{o} and @samp{D}
If marks an unmarked message, display the next message. If overwrites,
stay the current line.
@item Weak marks :: @samp{*} and @samp{@@}
Stay the current line always.
@end ifset
@end table

@ifset jp
強いマークを付けた後にカーソルが動く方向については、@xref{level-one} を
参照して下さい。
@end ifset
@ifset us
Refer to @xref{level-one} to know which direction the cursor moves after
putting a strong mark.
@end ifset

@ifset jp
マークは以下のように交換できます。
@end ifset
@ifset us
You can exchange marks as follows:
@end ifset

@table @samp
@ifset jp
@item m@@ 
@samp{*} -> @samp{@@} :: 選択コマンド @samp{?} で選び、"uumerge" を起動
するコマンド @samp{M-t} を利用する場合に便利。
@item m*
@samp{@@} -> @samp{*}
@item ms
@samp{@@} <-> @samp{*}
@item md
@samp{*} -> @samp{D} :: 選択コマンド @samp{?} で選んだメッセージを消去すると
きに便利。
@item mo
@samp{*} -> @samp{o} :: 選択コマンド @samp{?} で選んだメッセージをあるフォル
ダに整頓する場合に便利。
@end ifset
@ifset us
@item m@@ 
@samp{*} -> @samp{@@} :: It is useful when you pick messages by @samp{?} 
then pass them to "uumerge" with @samp{M-t}.
@item m*
@samp{@@} -> @samp{*}
@item ms
@samp{@@} <-> @samp{*}
@item md
@samp{*} -> @samp{D} :: It is useful when you put @samp{D} marks to
messages picked by @samp{?}.
@item mo
@samp{*} -> @samp{o} :: It is useful when you put @samp{o} marks to
messages picked by @samp{?}.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Refile
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Refile, by-folder, mark level, Top
@ifset jp
@chapter 楽々整理整頓
@end ifset
@ifset us
@chapter Happy refiling
@end ifset

@ifset jp
1日に数百のメッセージを受け取るようになると整理整頓が大変になります(え、
そんなに受け取らないですって？ 幸せですね :) 。Mew では、@samp{o} でメッ
セージを整頓する際に、整頓先を推測しデフォルト値として表示してくれます。
たとえば、次のようになります。
@end ifset
@ifset us
When you come to receive hundreds of messages in a day(don't you believe
it?), refiling messages becomes a very tough job. Mew neatly guesses
default folders where the message is supposed to be refiled when you
type @samp{o}. You can see an example below.
@end ifset

@example
Folder name (+work/mew-dist): +
@end example

@ifset jp
もし、() の中のデフォルト値が自分の希望通りであれば、@samp{RET} を押すだ
けでよいのです。整頓先が決定しているメッセージには、@samp{o} マークが付
きます。
@end ifset
@ifset us
If the default value in () is proper, just type @samp{RET}. The messages
will be marked with @samp{o} if its refiling folders are decided.
@end ifset

@ifset jp
この整頓先の推測が賢ければ賢い程ユーザは楽になります。Mew では以下のよう
なルールが用意されています。
@end ifset
@ifset us
As you know, the more excellent refiling guess algorithms become, the
less user's job troublesome. Mew provides you with the following rules.
@end ifset

@menu
@ifset jp
* by-folder::                   メーリングリスト用のフォルダから推測
* by-alist::                    指定したルールから推測
* by-thread::                   対話関係から推測
* by-from-folder::              個人用のフォルダから推測
* by-from::                     From: から推測
* by-newsgroups::               Newsgroups: から推測
* by-default::                  デフォルトの規則
* guess-rule::                  ルールの制御
* auto-refile::                 自動で整理整頓
@end ifset
@ifset us
* by-folder::                   Guess by mailing-list folders
* by-alist::                    Guess by user defined rules
* by-thread::                   Guess by thread
* by-from-folder::              Guess by private folders
* by-from::                     Guess by From:
* by-newsgroups::               Guess by Newsgroups:
* by-default::                  Guess by default rule
* guess-rule::                  Controlling rules
* auto-refile::                 Auto refile
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node by-folder, by-alist, Refile, Refile
@ifset jp
@section メーリングリスト用のフォルダから推測
@end ifset
@ifset us
@section Guess by mailing-list folders
@end ifset

@ifset jp
あるメーリングリスト宛のメッセージを、そのメーリングリスト名のフォルダに
整理することは多いと思います。Mew ではメーリングリスト宛に届いたメッセー
ジに対して、それ用のフォルダを推測する機能があります。
@end ifset
@ifset us
Many users tend to refile messages destined to a mailing-list to a
folder whose name is the same as the mailing-list. Mew provides a
mechanism to guess a mailing-list folder for messages destined to
mailing-lists.
@end ifset

@ifset jp
たとえば、+misc/pooh-lovers というフォルダがあったとしましょう。次のよう
なメッセージは、このフォルダに整頓すればよい可能性が高いといえます。
@end ifset
@ifset us
Suppose that you have a folder named +misc/pooh-lovers. The following
message is probably to be refiled to this folder.
@end ifset

@example
To: pooh-lovers@@mew.org 
@end example

@ifset jp
このように、To: や Cc: のアドレスが、フォルダ名の一番右側にマッチするも
のがないか探すわけです。フォルダを階層化していない人が多いようですが、
Mew を使う限り、階層化しない手はありません。
@end ifset
@ifset us
Likewise, Mew searches a matching folder forward with addresses on To:
and Cc:. There are many people who don't use recursive folders. With
Mew, however, you would not be smart if you don't use it.
@end ifset

@ifset jp
さて、鋭い人は次のように個人のアドレスが To: や Cc: にある場合、困るので
はないかと思うでしょう。
@end ifset
@ifset us
Smart users may wonder that they get a trouble in the following
situation where private addresses are on To: or Cc:.
@end ifset

@example
To: piglet@@mew.org
Cc: pooh-lovers@@mew.org
@end example

@ifset jp
たとえば、pooh は pooh-lovers の一員ですから、このメッセージが届きます。
しかし、piglet と仲がいいので、+from/piglet にマッチしてしまいます。
@end ifset
@ifset us
Since pooh is a member of pooh-lovers, he receives this message. But he
has a folder for his friend, pooh. So, +from/piglet may be chosen.
@end ifset

@ifset jp
そこで、Mew では無視するフォルダを設定できるようになっています。デフォル
トでは、+from 以下を無視します。ですから、個人からのメッセージは +from 
以下にに収めて下さい
@end ifset
@ifset us
To avoid this, Mew allows you to specify which folders are to be
ignored. The default is +from. So, please take a convention to refile
personal messages under +from.
@end ifset

@ifset jp
候補が決定できたら
@end ifset
@ifset us
When Mew guesses a candidate by the folders, it asks you:
@end ifset

@example
Folder name (+misc/pooh-lovers): +
@end example

@ifset jp
と訊いてきます。あっていれば @samp{RET} を、違っていればお望みのフォルダ
を入力して下さい。
@end ifset
@ifset us
Just type @samp{RET} if the default is exactly what you want.
@end ifset

@ifset jp
@samp{o} で新しいフォルダを指定すると、そのフォルダが自動的に作成され、
次からは推測用の候補にも加わります。便利でしょ？
@end ifset
@ifset us
If you specify a new folder with @samp{o}, the folder is created and
added to the folder list to be used for guess. Convenient, isn't it?
@end ifset

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-folder} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-folder}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-alist, by-thread, by-folder, Refile
@ifset jp
@section 指定したルールから推測
@end ifset
@ifset us
@section Guess by user defined rules
@end ifset
@vindex mew-refile-guess-alist

@ifset jp
フォルダ名から推測する機能だけでは、思うようなフォルダを推測してくれない
場合があります。たとえば、To: が staff@@mew.org であるメッセージと To: 
が staff@@iijlab.net であるメッセージに対し、フォルダ名からの推測では同
じフォルダ(たとえば、"+net/staff")が選ばれてしまいます。そこで、Mew では、
変数 @samp{mew-refile-guess-alist} に明示的にルールを設定できます。
@end ifset
@ifset us
There are some cases where the refile guess mechanism by folders doesn't
work as you wish. For example, for both a message whose To: is
staff@@mew.org and another message whose To: is staff@@iijlab.net, the
same folder would be selected with guess by folders(e.g. "+net/staff").
So, Mew allows you to define your own rules explicitly.
@end ifset

@ifset jp
1つ例を挙げてみましょう。
@end ifset
@ifset us
Let's look at an example.
@end ifset

@example
(setq  mew-refile-guess-alist
  '(("To:"
      ("staff@@mew.org" . "+net/mew/staff")
      ("staff@@iijlab.net" . "+net/iijlab/staff")
     )))
@end example

@ifset jp
これは、メッセージヘッダ中の To: の横の文字列に staff@@mew.org があれば 
+net/mew/staff へ、staff@@iijlab.net があれば +net/iijlab/staff へ整頓す
るという意味です。
@end ifset
@ifset us
This means that if To: contains staff@@mew.org +net/mew/staff is
selected and if To: has staff@@iijlab.net +net/iijlab/staff is chosen.
@end ifset

@ifset jp
ルールは、以下のように書きます。
@end ifset
@ifset us
The format of this rule is as follow:
@end ifset

@example
rule ::= '((<key> <alist>) (<key> <alist>) (<key> <alist>) ...)
@end example

@ifset jp
全体は (<key> <alist>) のリストです。<key> はフィールド名を書きます。
<alist> は以下のようになります。
@end ifset
@ifset us
The whole is a list of (<key> <alist>). A field name is specified for
<key>. The format for <alist> is as follows:
@end ifset

@example
<alist> ::= (<value> . <folder>|<rule>) (<value> . <folder>|<rule>) ...
@end example

@ifset jp
<value> は <key> で示したフィールドにくる値です。<folder> は <key> にマッ
チした際にどのフォルダに整頓するかを意味しています。<value> と <folder> 
を @samp{.} で区切るのを忘れないで下さい。<folder> の代りに <rule> を再
帰的に記述することもできます。
@end ifset
@ifset us
<value> is a field value for <key>. <folder> means a folder to be chosen
if matched. Please note that <value> and <folder> is separated with
@samp{.}.
@end ifset

@ifset jp
特殊な <key> として @samp{nil} と @samp{t} があります。@samp{nil} は、何
も推測できなかった場合に返す <value> を指定するために用います。@samp{t} 
は、推測した値に加えて返す <value> を指示するために使います。
@end ifset
@ifset us
There are two special <key>s: @samp{nil} and @samp{t}. @samp{nil} is
used to specify <value> to be returned when nothing is guessed. @samp{t}
is for <value> to be returned in addition to guessed values.
@end ifset

@ifset jp
正規表現を知っている人は、以下のような複雑なルールを設定できます。
@end ifset
@ifset us
If you know regular expression, a more advanced rule can be defined like
this.
@end ifset

@example
(setq mew-refile-guess-alist
  '(("Newsgroups:"
    ("^nifty\\.\\([^ ]+\\)" . "+Nifty/\\1")
    (".*"         . "+rec/news"))
   ("To:"
    ("\\(inet\\|wide\\)@@wnoc-fuk" . "+wide/\\1-wnoc-fuk"))
   ("From:" 
    ("uucp@@"      . "+adm/uucp")
    ("ftpsync@@"   . "+adm/ftpsync"))
   (nil . "+unknown")))
@end example

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-alist} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-alist}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-thread, by-from-folder, by-alist, Refile
@ifset jp
@section 対話関係から推測
@end ifset
@ifset us
@section Guess by thread
@end ifset
@vindex mew-lisp-max-length

@ifset jp
Mew には、整頓しようとしているメッセージの親のメッセージが以前整頓された
フォルダを選択してくれる機能があります。
@end ifset
@ifset us
Mew provides a mechanism to guess a folder where the parent message of a
current message was refiled before.
@end ifset

@ifset jp
たとえば、pooh、piglet、roo との間で、蜂蜜を取りに行こうという話題が盛り
上がったとしましょう。pooh は、+project/honey というフォルダを作って、最
初のメッセージをそこに 整頓したとしましょう。以降、3人の間のメッセージが
きちんとした返答であるかぎり、+project/honey を推測してくれます。
@end ifset
@ifset us
For example, pooh, piglet, and roo had a chat to go and get honey. So,
pooh made +project/honey then refiled the message to it. The further
messages, if they are properly replied, they are supposed to be refiled
to +project/honey.
@end ifset

@ifset jp
あるメッセージをどこに保存したかという情報は、
"~/Mail/.mew-refile-msgid-alist" に保存されています。この情報を過去何通
のメッセージに関して保存するかは、@samp{mew-lisp-max-length} で決定しま
す。デフォルトは 1000 通です。2000 通にしたい場合は"~/.emacs" 中で以下の
ように設定して下さい。
@end ifset
@ifset us
Information that which folder was chosen for messages is stored to
"~/Mail/.mew-refile-msgid-alist". @samp{mew-lisp-max-length} controls
the amount of this information. The default value is 1000 messages. If
you want limits it to 2000 messages, put the following to "~/.emacs".
@end ifset

@example
(setq mew-lisp-max-length 2000)
@end example

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-thread} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-message-id}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-from-folder, by-from, by-thread, Refile
@ifset jp
@section 個人用のフォルダから推測
@end ifset
@ifset us
@section Guess by private folders
@end ifset
@vindex mew-refile-guess-from-me-is-special

@ifset jp
@xref{by-folder} で説明したメーリングリスト用のフォルダを推測するに加え
て、個人用のフォルダを推測する機能があります。個人用のフォルダは +from 
以下にありますから、+from 以下のフォルダを選択する機能だともいえます。以
下の例を考えてみましょう。
@end ifset
@ifset us
In addition to the mechanism to select a mailing-list folder described
in @xref{by-folder}, Mew provides a mechanism to choose a private
folder. Since private folders locate under +from, we can say that this
mechanism select a folder from the folders under +from. Let's see the
following example:
@end ifset

@example
To: pooh@@mew.org
From: piglet@@mew.org
@end example

@ifset jp
piglet から pooh にメッセージが来ました。pooh がこの機能を使うと、From: 
を手がかりに +from/piglet が選択されます。(+from 以下は階層化されていて
も構いません。また、フォルダ名はユーザ名だけではなくアドレス全体でも OK 
です。)
@end ifset
@ifset us
pooh received a message from piglet. If pooh uses this mechanism,
+from/piglet will be chosen according to From:. (Folders under +from can
be recurse. And you can select the entire address for a folder name
instead of the user part.)
@end ifset

@ifset jp
この機能を提供する関数は、@samp{mew-refile-guess-by-from-folder} といいます。
@end ifset
@ifset us
The function to provide this feature is
@samp{mew-refile-guess-by-from-folder}.
@end ifset

@ifset jp
次に、pooh が piglet に返答した場合を考えましょう。pooh は自分自身に Cc: 
していたので、自分にメッセージが戻ってきました。
@end ifset
@ifset us
Next, let's consider a care where pooh replied to piglet. Since pooh
Cc:ed the message to himself, the message was also delivered to him.
@end ifset

@example
To: piglet@@mew.org
Cc: pooh@@mew.org
From: pooh@@mew.org
@end example

@ifset jp
pooh の立場になって考えてみて下さい。このメッセージを +from/pooh に整頓
するか、あるいは +from/piglet に整頓するのかは、好みが分かれるところでしょ
う。そこで、どちらを選択するのかカスタマイズできるようになっています。
@end ifset
@ifset us
How do you feel if you are pooh? You may want to refile this to
+from/pooh. Also, you may want to move this to +from/piglet. So, it can
be customized.
@end ifset

@ifset jp
@samp{mew-refile-guess-from-me-is-special} が @samp{t} なら、
@samp{mew-refile-guess-by-from-folder} は、From: が自分のアドレスの場合
に、To: と Cc: にあるアドレスをもとに、+from 以下のフォルダを選択します。
@end ifset
@ifset us
If @samp{mew-refile-guess-from-me-is-special} is @samp{t} and if an
address in From: is yourself, @samp{mew-refile-guess-by-from-folder}
select a folder under +from according to To: and/or Cc:.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-from, by-newsgroups, by-from-folder, Refile
@ifset jp
@section From: から推測
@end ifset
@ifset us
@section Guess by From:
@end ifset
@vindex mew-lisp-max-length
@vindex mew-refile-guess-from-me-is-special

@ifset jp
From: に同一のアドレスを持つメッセージが、かつてどこに整頓されたかによっ
て推測する機能があります。
@end ifset
@ifset us
Mew also provides a mechanism to guess a folder by the place where a
message that has the same From: field is refiled.
@end ifset

@ifset jp
たとえば、piglet は piglet@@beech.tree.uk と p-p-p@@mew.org の 2 つのア
ドレスを持っているとしましょう。どちらのアドレスからメッセージが届いても、
pooh はそれらを +from/piglet に整頓したいと思っています。もちろん、以下
のように明示的にルールを書けば実現できます。
@end ifset
@ifset us
Suppose that piglet has two addresses, piglet@@beech.tree.uk and
p-p-p@@mew.org. pooh wants to refile messages from piglet to
+from/piglet no matter what his From: is. This policy can, of course, be
implemented if pooh specifies rules explicitly as follows:
@end ifset

@example
(setq  mew-refile-guess-alist
  '(("From:"
      ("piglet@@beech.tree.uk" . "+from/piglet")
      ("p-p-p@@mew.org"        . "+from/piglet"))))
@end example

@ifset jp
しかし、いちいちルールを書くのは面倒です。そこで、まず From: が 
piglet@@beech.tree.uk であるメッセージを +from/piglet に整頓します。これ
でフォルダ +from/piglet が作成されます。次に、From: が p-p-p@@mew.org で
あるメールを +from/piglet に整頓したとします。ここで Mew は、
p-p-p@@mew.org が +from/piglet に整頓されたことを学習します。以後 From: 
が p-p-p@@mew.org であるメッセージを整頓しようとすると、+from/piglet を
選択するようになります。
@end ifset
@ifset us
But such a work may bother you. So, first refile a message whose From:
is piglet@@beech.tree.uk to +from/piglet. At this time, +from/piglet is
created. Next, refile a message whose From: is p-p-p@@mew.org to
+from/piglet. Here Mews learns that p-p-p@@mew.org was refiled to
+from/piglet. After this, when messages whose From: is p-p-p@@mew.org
are refiled, +from/piglet is chosen.
@end ifset

@ifset jp
その他、機械からくるメッセージは、いつも +adm/misc に入れることにしたい
場合なども、明示的なルールを書かずに済ませられます。
@end ifset
@ifset us
For another example, you can refile messages from machinery to +adm/misc
without defining an explicit rule.
@end ifset

@ifset jp
From: とフォルダの情報は、"~/Mail/.mew-refile-from-alist" に保存されてい
ます。この情報を過去何通のメッセージに関して保存するかは、
@xref{by-thread} と同様に @samp{mew-lisp-max-length} で決定します。
@end ifset
@ifset us
Information for relationship between From: and folder is stored to
"~/Mail/.mew-refile-from-alist". @samp{mew-lisp-max-length} controls the
amount of this information as the same as @xref{by-thread}.
@end ifset

@ifset jp
この機能を提供する関数は @samp{mew-refile-guess-by-from} です。
@end ifset
@ifset us
The function name to provide this feature is
@samp{mew-refile-guess-by-from}.
@end ifset

@ifset jp
@samp{mew-refile-guess-from-me-is-special} が @samp{t} の場合、
@samp{mew-refile-guess-by-from} は 
@samp{mew-refile-guess-by-from-folder}(@xref{by-from-folder})と同様な動
きをします。
@end ifset
@ifset us
If the value of @samp{mew-refile-guess-from-me-is-special} is @samp{t},
@samp{mew-refile-guess-by-from} acts as
@samp{mew-refile-guess-by-from-folder}(@xref{by-from-folder}).
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-newsgroups, by-default, by-from, Refile
@ifset jp
@section Newsgroups: から推測
@end ifset
@ifset us
@section Guess by Newsgroups:
@end ifset

@ifset jp
ネットニュースをメッセージで受けて Mew で読んでいる人のために、
Newsgroups: からフォルダを推測する機能を用意しました。将来 Mew がネット
ニュースをサポートした場合にも有効でしょう。関数名は 
@samp{mew-refile-guess-by-newsgroups} です。
@end ifset
@ifset us
For those who read NetNews received by Email with Mew, Mew provides a
mechanism to guess a folder by Newsgroups:. It will be also useful when
Mew integrates NetNews in the future.  The function name to provide this
feature is @samp{mew-refile-guess-by-newsgroups}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node by-default, guess-rule, by-newsgroups, Refile
@ifset jp
@section デフォルトの規則
@end ifset
@ifset us
@section Guess by default rule
@end ifset
@vindex mew-refile-guess-strip-domainpart

@ifset jp
デフォルトの規則は、From: からアドレス名を切り出して、
@samp{+from/user@@domain} を選ぶようになっています。ただし、
@samp{mew-refile-guess-strip-domainpart} が @samp{t} ならユーザ名を切り
出すので、@samp{+from/user} が選択されます。
@end ifset
@ifset us
The default rule is extract an address from From: and chooses
@samp{+from/user@@domain}. But if
@samp{mew-refile-guess-strip-domainpart} is @samp{t}, it extracts the
user part. So, @samp{+from/user} is chosen.
@end ifset

@ifset jp
関数名は、@samp{mew-refile-guess-by-default} です。
@end ifset
@ifset us
The function name is @samp{mew-refile-guess-by-default}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node guess-rule, auto-refile, by-default, Refile
@ifset jp
@section ルールの制御
@end ifset
@ifset us
@section Controlling rules
@end ifset
@vindex mew-refile-guess-control
@vindex mew-refile-ctrl-multi

@ifset jp
Mew では、フォルダ推測のルールを2つの変数、
@samp{mew-refile-guess-control} と @samp{mew-refile-ctrl-multi} で制御し
ます。@samp{mew-refile-guess-control} は、呼び出す関数を順に定義します。
候補を複数にしたい場合は @samp{mew-refile-ctrl-multi} を @samp{t} に、単
数にしたい場合は @samp{nil} に設定します。
@end ifset
@ifset us
Mew controls guess rules by two variables,
@samp{mew-refile-guess-control} and @samp{mew-refile-ctrl-multi}. If you
want multiple candidates, set @samp{mew-refile-ctrl-multi}
@samp{t}. Otherwise, set it @samp{nil}.
@end ifset

@ifset jp
標準では、@samp{mew-refile-guess-control} は以下のように宣言されています
(宣言なので @samp{defvar} が使われています)。
@end ifset
@ifset us
By default, @samp{mew-refile-guess-control} is declared as follows(since
it is a declaration, @samp{defvar} is used):
@end ifset

@example
(defvar mew-refile-guess-control
  '(mew-refile-guess-by-alist
    mew-refile-ctrl-throw
    mew-refile-guess-by-newsgroups
    mew-refile-guess-by-folder
    mew-refile-ctrl-throw
    mew-refile-ctrl-auto-boundary
    mew-refile-guess-by-thread
    mew-refile-ctrl-throw
    mew-refile-guess-by-from-folder
    mew-refile-ctrl-throw
    mew-refile-guess-by-from
    mew-refile-ctrl-throw
    mew-refile-guess-by-default))
@end example

@ifset jp
Mew は @samp{mew-refile-guess-control} に並べられた関数を順番にすべて実
行します。各々の関数が複数の候補を推測することがあります。
@end ifset
@ifset us
Mew executes every function defined in @samp{mew-refile-guess-control}
in order. Each function may guess multiple candidates.
@end ifset

@ifset jp
@samp{mew-refile-guess-control} の動作例として以下を考えてみましょう。
@end ifset
@ifset us
Let's see the following example of @samp{mew-refile-guess-control}
action.
@end ifset

@table @samp
@ifset jp
@item mew-refile-guess-by-alist
    が +aaa, +bbb を推測。
@item mew-refile-guess-by-folder
    が +ccc, +ddd を推測。
@item mew-refile-guess-by-default
    が +eee       を推測。
@end ifset
@ifset us
@item mew-refile-guess-by-alist
    guessed +aaa, +bbb.
@item mew-refile-guess-by-folder
    guessed +ccc, +ddd.
@item mew-refile-guess-by-default
    guessed +eee.
@end ifset
@end table

@ifset jp
+aaa 〜 +eee すべてをユーザに提示して欲しい場合は、
@samp{mew-refile-ctrl-multi} を @samp{t} に, +aaa だけを提示して欲しい場
合は、@samp{nil} に設定します。
@end ifset
@ifset us
If you want to provide all candidates, +aaa - +eee, set
@samp{mew-refile-ctrl-multi} @samp{t}. If you want to provide +aaa only,
set it @samp{nil}.
@end ifset

@ifset jp
また、+aaa 〜 +ddd は提示して欲しいけれどもそれ以降はいらない、つまり、
+eee を提示するのは先に実行された関数群が何も推測できなかったときだけに
したい場合は、@samp{mew-refile-ctrl-multi} を @samp{t} にして、
@samp{mew-refile-guess-by-folder} と @samp{mew-refile-guess-by-default} 
の間に @samp{mew-refile-ctrl-throw} を入れて下さい。
@end ifset
@ifset us
If you want +aaa - +ddd but don't want left candidates, in other words,
you want +eee only when no candidate is guessed by functions executed
before, set @samp{mew-refile-ctrl-multi} @samp{t} and insert
@samp{mew-refile-ctrl-throw} between @samp{mew-refile-guess-by-folder}
and @samp{mew-refile-guess-by-default}.
@end ifset

@ifset jp
@samp{C-uo} は、この推測の流れを Message バッファに表示します。
@end ifset
@ifset us
@samp{C-uo} displays the flow of guess rules in Message buffer.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node auto-refile, Pick, guess-rule, Refile
@ifset jp
@section 自動で整理整頓
@end ifset
@ifset us
@section Auto refile
@end ifset
@vindex mew-refile-auto-refile-skip-any-mark

@ifset jp
毎日メッセージをたくさんもらう人は、まだ整頓していないメッセージを 
+inbox フォルダに大量に溜めてしまうことがあります。そんなときは、「メッ
セージ達よ、とにかく +inbox フォルダからどこかに行ってしまえ」と叫びたく
なることがあるでしょう。Mew は、そんなわがままなを満足させるための自動整
理整頓関数を提供しています。:) @samp{M-o} がその呪文です。
@end ifset
@ifset us
Those who receives many messages everyday is prone to store thousands of
messages in the +inbox folder. In such a case, they may want to speak
out like this, "Hey messages, get out of the +inbox folder to
somewhere". Mew provides a feature to satisfy such laziness. :)
@samp{M-o} is the spell.
@end ifset

@ifset jp
この関数を実行すると、現在のフォルダ内の特定のメッセージに対して、自動的
に @samp{o} マークを付けてくれます。特定のメッセージとは、
@samp{mew-refile-auto-refile-skip-any-mark} が @samp{nil}なら、@samp{o} 
や @samp{D} マークが付いていないメッセージです。
@samp{mew-refile-auto-refile-skip-any-mark} が @samp{t} なら、なにもマー
クが付いてないメッセージです。
@samp{mew-refile-auto-refile-skip-any-mark} のデフォルト値は @samp{nil} 
です。また、@samp{C-u} 付で呼び出すと、
@samp{mew-refile-auto-refile-skip-any-mark} の値とは関係なく @samp{*} マー
クの付いたメッセージを対象にします。
@end ifset
@ifset us
When you execute this function, it marks specific messages with
@samp{o}. The specific messages mean messages which are not marked with
@samp{o} nor @samp{D} if @samp{mew-refile-auto-refile-skip-any-mark} is
@samp{nil}. If @samp{mew-refile-auto-refile-skip-any-mark} is @samp{t},
they mean non-marked messages. The default value of
@samp{mew-refile-auto-refile-skip-any-mark} is @samp{nil}.  If executed
with @samp{C-u}, the targets mean messages marked with @samp{*}
regardless the value of @samp{mew-refile-auto-refile-skip-any-mark}.
@end ifset

@ifset jp
整頓先の決定には、先に説明した推測関数群が働くようになっています。この関
数は、@samp{o} を付けるだけですので、@samp{x} を押さない限り実際にメッセー
ジがどこかに行ってしまうことはありません。
@end ifset
@ifset us
Refile rule is the same described in the previous section. Please note
that what this function does is just mark messages with
@samp{o}. Messages are not refiled until you will press @samp{x}.
@end ifset

@ifset jp
Mew の整頓先推測はあまりにも賢すぎるので、この機能には仇となってしまいす。
というのは、Mew が推測機能をフルに使って勝手に整頓してしまうと、大抵のユー
ザはどこにメッセージが整頓されたか分からなくなってしまうのからです。:) 
そのために、Mew が使う推測関数を制限する機能が提供されています。前に出て
きた宣言をもう一度思い出して下さい。
@end ifset
@ifset us
Mew's refile mechanism is so smart that it would be harmful for this
function. That is, most users would not understand where messages have
been refiled if Mew made most use of its guess mechanism. :) For this
reason, break is provided to limit usage of guess functions. Recall the
declaration up above.
@end ifset

@example
(defvar mew-refile-guess-control
  '(mew-refile-guess-by-alist
    mew-refile-ctrl-throw
    mew-refile-guess-by-newsgroups
    mew-refile-guess-by-folder
    mew-refile-ctrl-throw
    mew-refile-ctrl-auto-boundary
    mew-refile-guess-by-thread
    mew-refile-ctrl-throw
    mew-refile-guess-by-from-folder
    mew-refile-ctrl-throw
    mew-refile-guess-by-from
    mew-refile-ctrl-throw
    mew-refile-guess-by-default))
@end example

@ifset jp
@samp{mew-refile-guess-control} の中に 
@samp{mew-refile-ctrl-auto-boundary} という関数があります。これがその仕
掛です。自動整理整頓のときに限り、Mew はこの関数より下に記述してある推測
を無視します。@samp{mew-refile-ctrl-auto-boundary} より上に記述している
関数が何も推測できなかった場合は、そのメッセージには @samp{o} が付きませ
ん。破滅が訪れる前に @samp{mew-refile-ctrl-auto-boundary} の御札を貼って
下さい。
@end ifset
@ifset us
You can find the @samp{mew-refile-ctrl-auto-boundary} function in
@samp{mew-refile-guess-control}. Only when auto refile is used, Mew
ignores guess functions below this function. If guess functions above
@samp{mew-refile-ctrl-auto-boundary} didn't guess any folder for a
message, the message is not marked with @samp{o}. Insert
@samp{mew-refile-ctrl-auto-boundary} before you ruin.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Pick
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Pick, condition, auto-refile, Top
@ifset jp
@chapter お目当てのメッセージを選択するには
@end ifset
@ifset us
@chapter How to select message which you want
@end ifset

@ifset jp
たとえば、Subject: に party という文字が含まれているメッセージを見つけ出
したり、From: が kazu@@mew.org であるメッセージを選択したいと思うことが
あります。このように、入力した条件にあるメッセージを見つけ出すコマンドを 
Mew は 3 つ提供しています。
@end ifset
@ifset us
You may want to pick up messages whose Subject: contains a string
"party" and whose From: is kazu@@mew.org. Mew provides three
methods to accomplish this.
@end ifset

@table @samp
@ifset jp
@item ?
入力した条件に合うメッセージに @samp{*} マークを付ける。現在の Summary 
モードの一覧を利用する。@samp{?} を押した後に、条件を入力して下さい。
@item /
入力した条件に合うメッセージを Summary モードに一覧表示する。現在の 
Summary モードの一覧は上書きされます。@samp{/} を押した後に、フォルダ名
と条件を入力して下さい。
@item V
複数のフォルダから入力した条件に合うメッセージを見つけ出して Virtual モー
ドに一覧表示する。操作は、@xref{virtual} を参照して下さい。
@end ifset
@ifset us
@item ?
Pick messages according to a pick pattern which you input, then put the
@samp{*} mark onto them.
@item /
Pick messages according to a pick pattern which you input, then list
them up.
@item V
Go to Virtual mode which gives a single view to picked messages from
multiple folders. Enter a virtual folder name, comma-separated folders,
and pick pattern. For more information, please refer to @xref{virtual}.
@end ifset
@end table

@ifset jp
以下条件の入力方法と Virtual モードに付いて解説します。
@end ifset
@ifset us
Following sections describes how to input conditions and Virtual mode in
detail.
@end ifset

@menu
@ifset jp
* condition::                   条件の入力方法
* virtual::                     Virtual モード
@end ifset
@ifset us
* condition::                   How to input conditions
* virtual::                     Virtual mode
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node condition, virtual, Pick, Pick
@ifset jp
@section 条件の入力方法
@end ifset
@ifset us
@section How to input conditions
@end ifset

@ifset jp
Mew が条件の入力をユーザに促すときは以下のように訊いてきます。
@end ifset
@ifset us
When Mew asks a user to input pick pattern, the following message is
displayed.
@end ifset

@example
pick pattern: 
@end example

@ifset jp
以下に示すキーワードを組み合わせて条件を入力して下さい。
@end ifset
@ifset us
Input pick pattern combining the following keywords:
@end ifset

@table @samp
@ifset jp
@item field=string
フィールド field に文字列 string が含まれているときマッチ。フィールド 
field が、head、body、および、all の場合は、それぞれヘッダ全体、本文、メッ
セージ全体を意味する。
@item <pattern1> & <pattern2>
<pattern1> かつ <pattern2> のときマッチ。
@item <pattern1> | <pattern2>
<pattern1> または <pattern2> のときマッチ。
@item ! <pattern>
<pattern> でないときマッチ。
@item ( <pattern> )
<pattern> の内容を先に評価。
@end ifset
@ifset us
@item field=string
Match if the "field" field contains the "string" string. If you specify
"head", "body" or "all" as "field", it means the entire header, the
body, and the entire message, respectively.
@item <pattern1> & <pattern2>
Match if <pattern1> AND <pattern2>.
@item <pattern1> | <pattern2>
Match if <pattern1> OR <pattern2>.
@item ! <pattern>
Match if not <pattern>.
@item ( <pattern> )
Evaluate <pattern> first.
@end ifset
@end table


@ifset jp
以下に例を示します。
@end ifset
@ifset us
Some examples are shown below.
@end ifset

@ifset jp
(a) From: に kazu か含まれるメッセージ
@end ifset
@ifset us
(a) Messages whose From: contains "kazu".
@end ifset

@example
from=kazu
@end example

@ifset jp
(b) To: が mew、または、Cc: が mew であるメッセージ
@end ifset
@ifset us
(b) Messages whose To: contains "mew" OR Cc: contains "mew".
@end ifset

@example
to=mew | cc=mew
@end example

@ifset jp
(c) To: が mew、または、Cc: が mew で、かつ、from が kazu である
メッセージ
@end ifset
@ifset us
(c) Messages whose To: contains "mew" OR Cc: contains "mew" AND
From: contains "kazu".
@end ifset

@example
(to=mew | cc=mew) & from=kazu
@end example

@ifset jp
後は類推して下さい。
@end ifset
@ifset us
Now you can guess how to input more complex patterns.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node virtual, Quit, condition, Pick
@ifset jp
@section Virtual モード
@end ifset
@ifset us
@section Virtual mode
@end ifset

@ifset jp
Virtual モードは、複数のフォルダから入力した条件に合うメッセージを選びだ
し、単一の仮想的なフォルダとして扱います。Summary モードで @samp{V} を押
すと、Virtual モードが作れます。
@end ifset
@ifset us
Virtual mode gives you a single view for matching messages from multiple
folders. Press @samp{V} in Summary mode to enter Virtual mode.
@end ifset

@ifset jp
最初に、仮想フォルダ名を訊かれます。
@end ifset
@ifset us
First you are asked a name of virtual folder
@end ifset

@example
Virtual folder name (virtual) : 
@end example

@ifset jp
任意の文字列を入力して下さい。単に @samp{RET} を押すと、"++virtual" にな
ります。次に、単数または複数のフォルダ名を入力します。複数のフォルダを入
力する場合は、"," で区切って下さい。もちろん、@samp{TAB} で補完できます。
@end ifset
@ifset us
Input an appropriate string. If you type just @samp{RET}, "++virtual" is
selected. Then you are asked to input a single or multiple folder name.
If you want to specify multiple folders, please separate them with ",".
Of course, you can complete folder names with @samp{TAB}.
@end ifset

@example
Folder name (+inbox) : +inbox, +mew
@end example

@ifset jp
そして、条件を入力します。
@end ifset
@ifset us
Now input conditions.
@end ifset

@example
pick pattern: 
@end example

@ifset jp
すると仮想フォルダができあがります。Virtual モードは、整頓や消去、検索な
ど一部のコマンドを除いて、Summary モードと一緒です。仮想フォルダはまさし
く仮想であり、ファイルシステムなどには存在しないことに注意して下さい。
Emacs を終了すると、仮想フォルダはなくなります。
@end ifset
@ifset us
OK. You get a Virtual mode. In Virtual mode, you can use same commands
that you can find in Summary mode except refile, delete, pick and etc.
You should take note that Virtual folder is really virtual and it does
not exist in file system. If you exit Mew, it then disappears.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Quit
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Quit, Customize, virtual, Top
@ifset jp
@chapter 一休み
@end ifset
@ifset us
@chapter Give me a break
@end ifset

@ifset jp
Mew を終了させたり、一時中断させたり、そのモード(正確にはバッファ)を消去
する方法を以下に示します。
@end ifset
@ifset us
Here are how to quit and suspend Mew and how to erase a mode(buffer).
@end ifset

@ifset jp
<Summary モードと Virtual モード>
@end ifset
@ifset us
<Summary mode and Virtual mode>
@end ifset

@table @samp
@ifset jp
@item q
Mew を一時中断し、他のバッファに切り替えます。Mew 用のバッファはすべて残っ
ていますから、バッファ操作で選べば再開できます。
@item Q
Mew を終了します。Mew が使ったすべてのバッファを消去します。
@item C-cC-q
そのモード(正確にはバッファ)を消去します。
@end ifset
@ifset us
@item q
Suspend Mew then switch to another buffer. All buffers of Mew remain, so
you can resume with buffer operations.
@item Q
Quit Mew. All buffers of Mew are erased.
@item C-cC-q
Erase the current mode(buffer).
@end ifset
@end table

@ifset jp
<Draft モード>
@end ifset
@ifset us
<Draft mode>
@end ifset

@table @samp
@ifset jp
@item C-cC-q
その草稿を消去します。
@end ifset
@ifset us
@item C-cC-q
Erase the draft.
@end ifset
@end table

@ifset jp
<"*Mew watch*" バッファ>
@end ifset
@ifset us
<"*Mew watch*" buffer>
@end ifset

@table @samp
@ifset jp
@item C-cC-q
そのバッファを消去します。
@end ifset
@ifset us
@item C-cC-q
Erase the current buffer.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Customize
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Customize, level-one, Quit, Top
@ifset jp
@chapter 自分好みの Mew にするには
@end ifset
@ifset us
@chapter Customizing Mew
@end ifset

@ifset jp
ここでは、Mew のデフォルトの動作を変更し、自分好みの Mew にする方法を説
明します。主に "~/.emacs" で設定して下さい。
@end ifset
@ifset us
Here are explained how to change default setting of Mew and make Mew
your favorite. Edit "~/.emacs" to do it!
@end ifset

@menu
@ifset jp
* level-one::                   初級
* level-two::                   中級
* level-three::                 上級
* hooks::                       フック
* config::                      IM Config
@end ifset
@ifset us
* level-one::                   Beginner course
* level-two::                   Junior course
* level-three::                 Senior course
* hooks::                       Hooks
* config::                      IM Config
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node level-one, level-two, Customize, Customize
@ifset jp
@section 初級
@end ifset
@ifset us
@section Beginner course
@end ifset
@vindex mew-draft-mode-hook
@vindex mew-from
@vindex mew-fcc
@vindex mew-cc
@vindex mew-dcc
@vindex mew-window-use-full
@vindex mew-summary-show-direction
@vindex mew-summary-mark-direction

@ifset jp
ここでは、以下の変数について説明します。
@end ifset
@ifset us
Here are described the following variables.
@end ifset

@itemize @minus
@item
mew-draft-mode-hook
@item
mew-from
@item
mew-fcc
@item
mew-cc
@item 
mew-dcc
@item
mew-window-use-full
@item
mew-summary-show-direction
@item
mew-summary-mark-direction
@end itemize

@ifset jp
Draft モードでは、フックを @samp{text-mode-hook}、
@samp{mew-draft-mode-hook} の順で評価します。@samp{text-mode-hook} で 
@samp{auto-fill-mode} を設定していない人は、 @samp{mew-draft-mode-hook} 
を以下のように設定するのがよいかもしれません。
@end ifset
@ifset us
Draft mode evaluates @samp{text-mode-hook} and
@samp{mew-draft-mode-hook} in order. If you don't set
@samp{auto-fill-mode} to @samp{text-mode-hook}, It would be useful to
define @samp{mew-draft-mode-hook} as follows:
@end ifset

@example
(setq mew-draft-mode-hook (function (lambda () (auto-fill-mode 1))))
@end example

@ifset jp
電子メールの管理者が設定しているのとは違うアドレスで送信したいことがあり
ます。たとえば、管理者の設定が甘く、不要なホスト名が付いてしまう場合など
です(この場合は管理者に頼み設定を修正してもらうのが一番です)。Mew では草
稿のヘッダに From: アドレスがあれば、それがそのまま From: となります。補
完を使いながら書いて下さい。いつも草稿に From: を用意するには、以下の例
のように @samp{mew-from} を指定して下さい。
@end ifset
@ifset us
You may want to use another address than which your Email manager
defined. An example is the case that a host name appears in your Email
address since the configuration by your Email manager is imperfect. (In
this case, ask him to resolve this problem first.) If From: is specified
on a draft, Mew treats it as it is. You can specify From: with
completion. If you want to prepare From: in drafts, set @samp{mew-from}
as follows:
@end ifset

@example
@ifset jp
(setq mew-from "Kazu Yamamoto (山本和彦) <Kazu@@Mew.org>")
@end ifset
@ifset us
(setq mew-from "Kazu Yamamoto <Kazu@@Mew.org>")
@end ifset
@end example

@ifset jp
From: 行を自分で指定できるということは、簡単にだれかになりすませるという
ことです。くれぐれもこの機能を使ったいたずらをしないで下さい。また、他人
も容易にだれかになりすませることに注意して下さい。大切な用件は、PGP/MIME 
で保護して送りましょう。
@end ifset
@ifset us
This feature means that you cannot trust From: in all cases. I would
sincerely ask all Mew users NOT to cheat others with this feature. And
please note that a bad guy can set himself up as another guy very
easily. For important messages, use PGP/MIME.
@end ifset

@ifset jp
毎回 Fcc: でバックアップを取りたい人は、以下を .emacs に設定して下さい。
@end ifset
@ifset us
If you want to back up your messages every time when you write them with
Fcc:, put the following line into ".emacs".
@end ifset

@example
(setq mew-fcc "+Backup")
@end example

@ifset jp
自分へ Cc:(Dcc:) したい人は @samp{mew-cc}(@samp{mew-dcc})を設定して下さ
い。
@end ifset
@ifset us
Define @samp{mew-cc}(@samp{mew-dcc}) to use Cc:(Dcc:).
@end ifset

@ifset jp
いつも Emacs のフレーム全体で Mew を使いたい人は、以下の設定をして下さい。
@end ifset
@ifset us
If you want to use Mew with full Emacs frame, set like this.
@end ifset

@example
(setq mew-window-use-full t)
@end example

@ifset jp
Summary モードの @samp{SPC} は、@samp{mew-summary-show-direction} によっ
て、次のメッセージの表示の仕方が変わります。また同様に、強いマークを付け
た後カーソルが動く方向は @samp{mew-summary-mark-direction} により指定で
きます。以下の値を設定できます。
@end ifset
@ifset us
@samp{SPC} in Summary mode decide the next action to view a message
according to @samp{mew-summary-show-direction}. Likewise, you can
specify the cursor direction after putting a strong mark by
@samp{mew-summary-mark-direction}. You can select one from the following
candidates.
@end ifset

@table @samp
@ifset jp
@item up 
上のメッセージを表示する。
@item down 
下のメッセージを表示する。
@item next
読み進めている方向の次のメッセージを表示する。
@item stop
次は表示しない。
@end ifset
@ifset us
@item up 
Display the message above.
@item down 
Display the message below.
@item next
Display the next message in the direction.
@item stop
Do not display the next message.
@end ifset
@end table

@ifset jp
両方ともデフォルトは @samp{next} です。いつもメッセージを下から読む人は、
以下のようにすればよいでしょう。
@end ifset
@ifset us
The default value for both is @samp{next}. If you read messages from the
bottom, set as follows:
@end ifset

@example
(setq mew-summary-show-direction 'up)
@end example

@c %%%%%%%%%%%%%%%%%
@node level-two, level-three, level-one, Customize
@ifset jp
@section 中級
@end ifset
@ifset us
@section Junior course
@end ifset
@vindex mew-use-highlight-cursor-line
@vindex mew-use-highlight-mouse-line
@vindex mew-use-highlight-mark
@vindex mew-use-highlight-header
@vindex mew-use-highlight-body
@vindex mew-use-highlight-url
@vindex mew-use-highlight-x-face
@vindex mew-highlight-mark-folder-list

@ifset jp
ここでは、以下の変数について説明します。
@end ifset
@ifset us
Here are described the following variables.
@end ifset

@itemize @minus
@item
mew-use-highlight-cursor-line
@item
mew-use-highlight-mouse-line
@item
mew-use-highlight-mark
@item
mew-use-highlight-header
@item
mew-use-highlight-body
@item
mew-use-highlight-url
@item
mew-use-highlight-x-face
@end itemize

@ifset jp
@samp{mew-use-highlight-cursor-line} が @samp{t} の場合、Summary モード
でカーソルのある行に下線が引かれます。デフォルトは @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-cursor-line} is @samp{t}, underline is put on
the cursor line in Summary mode. The default is @samp{t}.
@end ifset

@ifset jp
XEmacs では @samp{mew-use-highlight-mouse-line} が @samp{t} の場合、
Summary モードでマウスのある行に色がつきます。真中のボタンをクリックしな
がら、マウスだけでメッセージを読む際にはとても便利です。XEmacs でのデフォ
ルトの値は、@samp{t} になっています。
@end ifset
@ifset us
If @samp{mew-use-highlight-mouse-line} is @samp{t} on XEmacs, the mouse
line is painted in Summary mode. This is very convenient to read
messages clicking the middle button of the mouse. The default value on
XEmacs is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-mark} が @samp{t} で、かつ、
@samp{mew-highlight-mark-folder-list} に列挙したフォルダが Summary モー
ドである場合、マークの付いている行に色がつきます。
@samp{mew-highlight-mark-folder-list} のデフォルトは '("+inbox") であり、
@samp{mew-use-highlight-mark} のデフォルトは @samp{t} です。
@samp{mew-highlight-mark-folder-list} を @samp{t} に設定すると、
すべてのフォルダで色が付くようになります。
@end ifset
@ifset us
If @samp{mew-use-highlight-mark} is @samp{t} and you are in Summary mode
on one of folders enumerated in @samp{mew-highlight-mark-folder-list},
marked lines are painted. The default of
@samp{mew-highlight-mark-folder-list} is '("+inbox") and that of
@samp{mew-use-highlight-mark}is @samp{t}.
If @samp{mew-highlight-mark-folder-list} is set to @samp{t},
marked lines in all folders are painted.
@end ifset

@ifset jp
@samp{mew-use-highlight-header} が @samp{t} の場合、Message モードと 
Draft モードでヘッダが色付けされます。デフォルトは @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-header} is @samp{t}, a header is painted in
both Message mode and Draft mode.  The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-body} が @samp{t} の場合、Message モードと Draft 
モードで本文が色付けされます。デフォルトは @samp{nil} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-body} is @samp{t}, a body is painted in
both Message mode and Draft mode. The default is @samp{nil}.
@end ifset

@ifset jp
@samp{mew-use-highlight-url} が @samp{t} の場合、Message モードの URL を
示す文字列が強調されます。デフォルトは @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-url} is @samp{t} , strings containing URL are
emphasized in Message mode. The default is @samp{t}.
@end ifset

@ifset jp
@samp{mew-use-highlight-x-face} が @samp{t} で、かつ XEmacs を使っている
場合、ヘッダ中の X-Face: が Message モードでアイコン化されます。XEmacs 
でのデフォルトは @samp{t} です。
@end ifset
@ifset us
If @samp{mew-use-highlight-x-face} is @samp{t} on XEmacs, X-Face: in a
header is iconified in Message mode. The default value on XEmacs is
@samp{t}.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node level-three, hooks, level-two, Customize
@ifset jp
@section 上級
@end ifset
@ifset us
@section Senior course
@end ifset
@vindex mew-header-alist
@vindex mew-cite-fields
@vindex mew-cite-format
@vindex mew-cite-prefix

@ifset jp
ここでは、以下の変数について説明します。
@end ifset
@ifset us
Here are described the following variables.
@end ifset

@itemize @minus
@item
mew-header-alist
@item
mew-cite-fields
@item
mew-cite-format
@item
mew-cite-prefix
@end itemize

@ifset jp
いつも入れて欲しいヘッダは、@samp{mew-header-alist} に連想リスト形式で定
義して下さい。以下に例を示します。
@end ifset
@ifset us
Set header fields that you want to insert every time when you write messages
to @samp{mew-header-alist} as an associate list. The following is an
example.
@end ifset

@example
(setq mew-header-alist
      '(("X-fingerprint:" . "6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94")
        ("X-URL:" . "http://www.mew.org/~kazu/")))
@end example

@ifset jp
引用ラベルは、引用するフィールドを @samp{mew-cite-fields}、ラベルの書式
を @samp{mew-cite-format} に定義します。引用記号は 
@samp{mew-cite-prefix} に指定します。デフォルトは、以下のようになってい
ます。
@end ifset
@ifset us
To customize citation label, define field to cite in
@samp{mew-cite-fields} and format in @samp{mew-cite-format}. Define
citation symbol to @samp{mew-cite-prefix}. The default declaration is as
follows:
@end ifset

@example
(defvar mew-cite-fields '("From:" "Subject:" "Date:"))
(defvar mew-cite-format "From: %s\nSubject: %s\nDate: %s\n\n")
(defvar mew-cite-prefix "> ")
@end example

@ifset jp
引用ラベルに Message-ID: を加え、ユーザ名付の引用記号にするには、以下の
ようにします。
@end ifset
@ifset us
To add Message-ID: to citation label and to change the prefix with a
user name, take this way.
@end ifset

@example
(setq mew-cite-fields '("From:" "Subject:" "Date:" "Message-ID:"))
(setq mew-cite-format "From: %s\nSubject: %s\nDate: %s\nMessage-ID: %s\n\n")
(setq mew-cite-prefix-function 'mew-cite-prefix-username)
@end example

@c %%%%%%%%%%%%%%%%%
@node hooks, config, level-three, Customize
@ifset jp
@section フック
@end ifset
@ifset us
@section Hooks
@end ifset
@vindex mew-env-hook
@vindex mew-init-hook
@vindex mew-summary-mode-hook
@vindex mew-virtual-mode-hook
@vindex mew-message-mode-hook
@vindex mew-message-hook
@vindex mew-addrbook-mode-hook
@vindex mew-draft-mode-hook
@vindex mew-draft-mode-newdraft-hook
@vindex mew-draft-mode-reedit-hook
@vindex mew-cite-hook
@vindex mew-before-cite-hook
@vindex mew-make-message-hook
@vindex mew-send-hook
@vindex mew-real-send-hook
@vindex mew-quit-hook
@vindex mew-suspend-hook
@vindex mew-summary-inc-sentinel-hook
@vindex mew-summary-scan-sentinel-hook
@vindex mew-summary-exec-hook
@vindex mew-syntax-format-hook

@ifset jp
Mew で用意されているフックをまとめます。
@end ifset
@ifset us
Here is a summary of hooks used in Mew.
@end ifset

@table @samp
@ifset jp
@item mew-env-hook
Mew の起動時の環境が設定される前に評価される。
@item mew-init-hook
Mew の起動時に評価される。
@item mew-summary-mode-hook
Summary モードに入るときに評価される。
@item mew-virtual-mode-hook
Virtual モードに入るときに評価される。
@item mew-message-mode-hook
Message モードに入るときに評価される。
@item mew-message-hook
メッセージが Message モードで表示される度に評価される。
@item mew-addrbook-mode-hook
アドレス帳の登録モードに入るときに評価される。
@item mew-draft-mode-hook
Draft モードに入るときに評価される。
@item mew-draft-mode-newdraft-hook
Draft モードにおいて新しい草稿が用意された際に評価される。
@item mew-draft-mode-reedit-hook
Draft モードにおいて古い草稿を再編集した際に評価される。
@item mew-cite-hook
Draft モードで引用する際に呼ばれる。通常 supercite を設定するために使う。
@item mew-before-cite-hook
Draft モードでメッセージを引用する直前に呼ばれる。
@item mew-make-message-hook
Draft モードで MIME メッセージを作る前、つまり @samp{C-cC-m}
の際の最初に評価される。
例：(add-hook 'mew-make-message-hook 'ispell-message)
@item mew-send-hook
メッセージを送信する前に評価される。現在では無意味であり、互換性のために
残してある。
@item mew-real-send-hook
メッセージを送信する前に評価される。
@item mew-quit-hook
Mew の終了時に評価される。
@item mew-suspend-hook
Mew を一時中断した際に評価される。
@item mew-summary-inc-sentinel-hook
imget が終了する際に評価される。
@item mew-summary-scan-sentinel-hook
imls が終了する際に評価される。
@item mew-summary-exec-hook
Summary モードの @samp{x} の実行が終了する際に評価される。
@item mew-syntax-format-hook
マルチパートの書式を作成する関数 @samp{mew-syntax-format} が呼ばれた際に
評価される。
@end ifset
@ifset us
@item mew-env-hook
Evaluated at initialize time before setting environment.
@item mew-init-hook
Evaluated when Mew starts.
@item mew-summary-mode-hook
Evaluated at the entrance of Summary mode.
@item mew-virtual-mode-hook
Evaluated at the entrance of Virtual mode.
@item mew-message-mode-hook
Evaluated at the entrance of Message mode.
@item mew-message-hook
Evaluated every time when messages are displayed in Message mode.
@item mew-addrbook-mode-hook
Evaluated at the entrance of Addrbook mode.
@item mew-draft-mode-hook
Evaluated at the entrance of Draft mode.
@item mew-draft-mode-newdraft-hook
Evaluated in Draft mode only when new draft is prepared.
@item mew-draft-mode-reedit-hook
Evaluated in Draft mode only when an existing draft is used as draft.
@item mew-cite-hook
Evaluated every time when you cite a message. It is usually used for
supercite.
@item mew-before-cite-hook
Evaluated before citation.
@item mew-make-message-hook
Evaluated before making a message in Draft mode (i.e. in the begging
phase of @samp{C-cC-m}). 
An example: (add-hook 'mew-make-message-hook 'ispell-message)
@item mew-send-hook
Evaluated before sending a message in Draft mode. This hook is
meaningless now and is remained for backward-compatibility.
@item mew-real-send-hook
Evaluated before really sending a message in Draft mode.
@item mew-quit-hook
Evaluated at exit of Mew.
@item mew-suspend-hook
Evaluated when suspended.
@item mew-summary-inc-sentinel-hook
Evaluated when "inc" is finished.
@item mew-summary-scan-sentinel-hook
Evaluated when "scan" is finished.
@item mew-summary-exec-hook
Evaluated when @samp{x} in Summary mode is finished.
@item mew-syntax-format-hook
Evaluated when when the function @samp{mew-syntax-format}, which creates
the multipart format, is called.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node config, XEmacs, hooks, Customize
@ifset jp
@section Config
@end ifset
@ifset us
@section Config
@end ifset
@vindex mew-config-insert-when-prepared
@vindex mew-config-insert-when-composed

@ifset jp
IM の "Config" ファイルに case 文を記述すると imget や imput の挙動を変
化させられます。たとえば、Config が以下のように記述されていたとしましょ
う。
@end ifset
@ifset us
If you specify "case" blocks in your IM "Config" file, you can change
actions of imget and imput. Suppose that the followings are specified in
Config.
@end ifset

@example
Imget.Src=pop/apop:kazu@@mail.mew.org
User=kazu
FromDomain=Mew.org
case wide
Imget.Src=pop/rpop:robby@@mx.wide.ad.jp
User=robby
FromDomain=wide.ad.jp
case iijlab
Imget.Src=imap:kazu@@mailbox.iijlab.net
FromDomain=iijlab.net
@end example

@ifset jp
通常では、imget は APOP を使って mail.mew.org から kazu のメッセージを読
み込みます。また、imput は送信されるメッセージに From: がない場合
(mew-from が nil の場合など)、ユーザ名である kazu と Mew.org を @@ で連
結した文字列を From: に指定します。
@end ifset
@ifset us
By default, imget retrieves kazu's messages from mail.mew.org by APOP.
And if the From: field doesn't exist in a message to be sent(e.g. when
mew-from is set to nil), the user name "kazu" and Mew.org is
concatenated with "@@" then imput specifies it in the From: field.
@end ifset

@ifset jp
もし --config=wide が指定されると、imget は RPOP を使って mx.wide.ad.jp 
から robby のメッセージを読み込みます。また、imput は From: に対し 
robby@@wide.ad.jp を選ぶようになります。
@end ifset
@ifset us
If you specify --config=wide to imget, it retrieves robby's messages from
mx.wide.ad.jp by RPOP. Also, imput chooses robby@@wide.ad.jp for the
From: field.
@end ifset

@ifset jp
このように imget や imput は、--config オプションで指定された文字列をも
とに、有効な case 文を選択します。上の例から明らかですが、この機能を使う
と読み込むメールボックスや送信時の From: を変更できて便利です。
@end ifset
@ifset us
In this way, imget and imput selects valid case block according to the 
--config option. As you see above, with this feature, it is very
convenient since you can change mailbox and your address.
@end ifset

@ifset jp
Mew は起動時に Config の case 文を調べます。もし、1 種類以上の case があ
る場合、@samp{mew-config-list} に設定します。--config が指定されない場合
に読まれる部分は、default という文字列で表現されます。上の例では、
@samp{mew-config-list} には、'("default" "wide" "iijlab") が設定されま
す。
@end ifset
@ifset us
When Mew boots up, it investigates case statements. If there are one or
more kinds of case statements, @samp{mew-config-list} is set. The block
to be read when --config is not specified is represented as "default".
In the case up above, '("default" "wide" "iijlab") is set to
@samp{mew-config-list}.
@end ifset

@ifset jp
Summary モードで @samp{C} を押すと、@samp{mew-config-list} を補完の候補
として利用しながら、imget に渡す --config の値を選択できます。デフォルト
では "default" です。もし他の値が設定されていた場合、たとえば "wide" が
設定されていた場合、@samp{i} は次のように表示します。
@end ifset
@ifset us
If you type @samp{C} in Summary mode, you can complete the value to be
specified with the --config option for imget, using
@samp{mew-config-list} as candidates. The default value is "default". If
other value is selected, say "wide", @samp{i} displays the following
message.
@end ifset

@example
Getting +inbox (wide)...
@end example

@ifset jp
imput に case の選択を指示するには、送信するメッセージのヘッダ中の 
Config: フィールドで指定できます。Draft モードでは、@xref{header} で説明
したように、Config: というフィールド名を @samp{TAB} で補完できます。また、
@samp{mew-config-list} の値を @samp{TAB} で補完可能です。さらに、
@samp{C-cTAB} を使えば、@samp{mew-config-list} の値を循環的に補完できま
す。
@end ifset
@ifset us
To specify case block to imput, you can use the Config: field in a
message to be sent. In Draft mode, you can complete the Config: field
itself by @samp{TAB} as described in @xref{header}. Also, you can
complete its value by @samp{TAB} using @samp{mew-config-list} as
candidates. Moreover, you can use circular completion of
@samp{mew-config-list} by @samp{C-cTAB}.
@end ifset

@ifset jp
しかし、自分で値を選ぶのはめんどうです。Mew は整頓先のフォルダを推測する
のだから、Config: の値も推測して欲しいと思うでしょう。もちろん、Mew は 
Config: の値を推測できます。Config: の推測ルールは、
@samp{mew-config-guess-alist} に設定できます。書式は、@xref{by-alist} で
説明した @samp{mew-refile-guess-alist} と同じです。
@end ifset
@ifset us
However, you may think this is a boring job. You would want Mew to guess
a value of Config: because Mew can guess refile folders. Of course, Mew
supports this kind of guess feature. You can specify your guess rule to
@samp{mew-config-guess-alist}. Its syntax is exactly the same as
@samp{mew-refile-guess-alist} explained in @xref{by-alist}.
@end ifset

@ifset jp
1 つ例を挙げてみましょう。
@end ifset
@ifset us
Let's look at one example:
@end ifset

@example
(setq mew-config-guess-alist
   '(("To:"
      ("wide.ad.jp" . "wide")
      ("mew.org" . "mew"))))
@end example

@ifset jp
この場合、To: が wide.ad.jp に合致すれば "Config: wide" を、mew.org にマッ
チすれば "Config: mew" を挿入します。
@end ifset
@ifset us
In this case, if To: matches wide.ad.jp, "Config: wide" is inserted. If
it matches mew.org, "Config: mew" is inserted.
@end ifset

@ifset jp
この推測を利用して Config: を挿入できるタイミングは以下の 3 つです。
@end ifset
@ifset us
There are three changes that you can insert the Config: field with this
feature.
@end ifset

@enumerate
@item
@ifset jp
@samp{mew-config-insert-when-prepared} が @samp{t} なら、草稿を用意した
時点。
@end ifset
@ifset us
When a draft is prepared if @samp{mew-config-insert-when-prepared} is
@samp{t}.
@end ifset
@item
@ifset jp
@samp{mew-config-insert-when-composed} が @samp{t} なら、
@samp{C-cC-m} でメッセージを作成した時点。
@end ifset
@ifset us
When a message is composed by @samp{C-cC-m} if
@samp{mew-config-insert-when-composed} is @samp{t}.
@end ifset
@item
@ifset jp
@samp{C-cC-o} と入力した任意の時点。
@end ifset
@ifset us
Anytime when you type @samp{C-cC-o}.
@end ifset
@end enumerate

@ifset jp
参考までに書きますが、ホスト名で Config を変更したい場合は、以下の行を
".emacs" に入れるとよいでしょう。
@end ifset
@ifset us
This is just for your information. If you want select Config: by
hostname, put the following line in your ".emacs".
@end ifset

@example
(setq mew-config-guess-alist
   (list (cons nil (system-name))))
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	XEmacs
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node XEmacs, Convention, config, Top
@ifset jp
@chapter アイコンのある生活
@end ifset
@ifset us
@chapter Life with icons
@end ifset
@vindex mew-multipart-icon-position

@ifset jp
XEmacs で Mew を使えば、アイコン・ベースのインターフェイスでメッセージを
読み書きできます。アイコン・ベースのインターフェイスは、従来のキー入力に
よるインターフェイスと親和性が高いように設計されています。
@end ifset
@ifset us
If you use Mew on XEmacs, you can read and/or write messages with
icon-based interface. The icon-based interface was designed totally
equivalent to the original key-based interface.
@end ifset

@ifset jp
アイコン・インターフェイスの使い方は.....、説明するまでもありません。直
感的にわかるはずです。でも少しだけ手ほどきを。
@end ifset
@ifset us
So, how to use the icon-based interface? I believe that it is intuitive
enough that no future explanation is necessary. Nonetheless, some basic
rules are shown below.
@end ifset

@ifset jp
Summary、Virtual、および、Draft モードの標準のアイコンに束縛されている機
能を利用するには、左ボタンをクリックして下さい。
@end ifset
@ifset us
To execute a function bounded to each BASIC icon in Summary, Virtual,
and Draft mode toolbar, click the left button of your mouse.
@end ifset

@ifset jp
マルチパートのメッセージを読み書きする際に表示されるアイコンは、左ボタン
のクリックでそのバーを表示し、右ボタンを押すとポップアップ・メニューが表
示されます。このメニューのおかげで、パートに対しさまざまな処理が可能となっ
ています。
@end ifset
@ifset us
For multipart messages, multipart icons appears in toolbars. Clicking
the left button on a multipart icon visualizes the part. When you press
the multipart icon, a popup menu appears. Thanks to this menu, many
operations can be applied to the part.
@end ifset

@ifset jp
マルチパートのアイコンは、デフォルトで標準のアイコンの右に表示されます。
左に表示するのが好きな人は、以下のように設定して下さい。
@end ifset
@ifset us
By default, multipart icons are displayed at the right size of the basic
icons in toolbars. If you like the left size, configure as follows:
@end ifset

@example
(setq mew-multipart-icon-position 'left)
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Message Convention
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Convention, MIME, XEmacs, Top
@ifset jp
@chapter メッセージの作法
@end ifset
@ifset us
@chapter Email convention
@end ifset

@ifset jp
メッセージをやりとりする際には、最低限のマナーがあります。マナーを守って
いないメッセージは読みにくいため、大変損します。簡潔かつ適切な文章を書き、
なるべく相手に理解してもらえるよう努力しましょう。
@end ifset
@ifset us
When you exchange messages with other people, you should obey minimum
manner. It gives a bad impression to the people if you violate the
manner since such messages are hard to read. We always should try to
write concise yet comprehensive explanations and make an effort to make
receivers well-understood.
@end ifset

@ifset jp
メッセージを書く際に気を付けるべき項目を以下に示します。
@end ifset
@ifset us
We should take good care of the following items.
@end ifset

@table @asis
@ifset jp
@item To: と Cc: を正しく書く
To: が目的の人で、Cc: は参考までに送り付ける人です。自分のアドレスが Cc: 
の場合は、読み飛ばす人がいますから注意して下さい。また、不必要なアドレス
を To: や Cc: に書いて、相手に迷惑をかけないようにしましょう。
@end ifset
@ifset us
@item Fill To: and Cc: fields precisely
To: is for target receivers and Cc: is for those who are received for
their information. If his address is not on To:, he might skip to read
the message. We should take care not to deliver to wrong people by
mistaking the addresses.
@end ifset

@ifset jp
@item To: と Cc: に書くアドレスの数は少なくする
アドレスをたくさん To: や Cc: に書くのはよくないことです。面倒でもメーリ
ングリストを作りましょう。
@end ifset
@ifset us
@item The number of addresses To: and Cc: should be small
It is discouraged to specify a lot of mail addresses on To: and Cc:. You
should create a mailing-list instead.
@end ifset

@ifset jp
@item Subject: には本文の内容を的確に短く書く
Subject: を見て読むか決める人がいますから、不適切な Subject: だと読んで
もらえないかもしれません。長い Subject: は読みにくいので止めましょう。
@end ifset
@ifset us
@item Write a short and clear summary of body in Subject:
There are people who decide to read contents from their Subject:. So,
they might skip messages with improper Subject:. We should not write a
long subject since it is hard to read.
@end ifset

@ifset jp
@item 改行は行末を、空行は改段落を表す。1行は半角70文字程度にとどめる
意味もなく1行おきに書いたり、なん行にも渡って改行しないのは読みづらいで
す。とくに行が長いと引用するのに困ります。また、行頭にいくつかの空白文字
を入れて右によせて書く人がいますが、これも無意味です。テキストの表示は、
使っているコンピュータでまちまちですから、結局自分のコンピュータでみため
がよくても、他人のコンピュータでそうであるとは限らないのです。
@end ifset
@ifset us
@item Carriage return means end of line and null line expresses end of paragraph. One line should be limited to 70 characters or so. 
It is very hard to read if you write a message on every other line or in
a long line without folding. Especially long lines are trouble to
cite. Some people write a message with indent but it is
meaningless. Text is displayed differently on each machines, so even if
the layout is excellent on your machine, it might not be so on other
machines.
@end ifset

@ifset jp
@item 必要な部分だけを引用する
面倒でも不要な部分は削りましょう。Mew を使っていれば、引用は楽勝のはずで
す。
@end ifset
@ifset us
@item Cite only necessary sentences
You should not bother to remove unnecessary sentences. With Mew,
citation must be a piece of cake.
@end ifset

@ifset jp
@item シグニチャは簡素にする
長いシグニチャは単なる自己満足です。
@end ifset
@ifset us
@item Make your signature simple
A long signature is just self-satisfaction.
@end ifset

@ifset jp
@item いたずらメッセージを送らない
こんなことは注意したくありませんが、それでも不幸のメッセージなどを送って
くる人がいます。人格を疑われることを理解すべきです。
@end ifset
@ifset us
@item Do not send prank messages
I don't want to warn this kind of stuff. Nonetheless, someone sends
Happy or Unhappy messages to others. You should understand that people
doubt your character.
@end ifset

@ifset jp
@item 相手の読めるデータのみを添付する
なんの合意もなしに送ってよいデータはテキストのみです。それ以外のデータを
送る場合は、あらかじめ相手に送ってよいか確認をとりましょう。メーリングリ
ストには、テキストのみを投稿するのが無難でしょう。
@end ifset
@ifset us
@item Attach data files that the receivers can read
It is text only that you can send without any agreement with the
receivers. If you want to send data files other than text, you should
make an agreement with the receivers. To mailing-list, you should send
text only.
@end ifset
@end table

@ifset jp
また、インターネットのマナーは RFC1855 を読むといいでしょう。@xref{Bib} 
を参照して下さい。著者は、正確な文章の書き方について学生のためにまとめた
入門書を WWW で公開しています。興味があれば、以下の URL にアクセスして下
さい。

@example
http://www.mew.org/~kazu/doc/japanese.html
@end example
@end ifset

@ifset us
If you wish to learn manner on the Internet more comprehensively, please
refer to RFC1855(@xref{Bib}).
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	MIME
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node MIME, mime-ct, Convention, Top
@ifset jp
@chapter MIME ってなぁに？
@end ifset
@ifset us
@chapter What's MIME?
@end ifset

@ifset jp
今までのメッセージ、正確には RFC822 メッセージは、本文にテキストしか格納
できない規格でした。MIME は RFC822 を拡張した多目的メッセージです。
@end ifset
@ifset us
Messages so far, more exactly RFC822 messages, cannot contain objects
other than text. MIME is multi-purpose message to extend RFC822.
@end ifset

@ifset jp
MIME は、ヘッダに
@end ifset
@ifset us
MIME has 
@end ifset

@example
MIME-Version: 1.0
@end example

@ifset jp
というフィールドを持ちます。このフィールドがない場合は、RFC822 メッセー
ジです。MIME では、データの型を示す Content-Type: と符号化方式を示す
Content-Transfer-Encoding: が重要なフィールドです。以下ではこれらのフィー
ルドや MIME の特長について説明します。
@end ifset
@ifset us
field in its header. Without this field, it is an RFC822 message. In
MIME, Content-Type: to indicate data type and Content-Transfer-Encoding
to specify encoding are important fields. The following sections
describe these fields and feature of MIME.
@end ifset

@menu
@ifset jp
* mime-ct::                     データの型の指定
* mime-cte::                    安全な符号化
* mime-multi::                  マルチパート
* mime-header::                 ヘッダの拡張
@end ifset
@ifset us
* mime-ct::                     Labeling data type
* mime-cte::                    Encoding for transport-safe
* mime-multi::                  Multipart structure
* mime-header::                 Header extensions
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node mime-ct, mime-cte, MIME, MIME
@ifset jp
@section データの型指定
@end ifset
@ifset us
@section Labeling data type
@end ifset


@ifset jp
MIME では、Content-Type:(以下 CT:)というフィールドにデータの型を指定でき
ます。以下は、本文が US-ASCII である MIME の例です。
@end ifset
@ifset us
With MIME, data type can be specified in Content-Type:(CT:) field. The
following is an example message whose body is US-ASCII text.
@end ifset

@example
MIME-Version: 1.0
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Subject: hello
From: Kazu

Hi all,
@end example

@ifset jp
CT: が省略された場合は、Text/Plain; charset=us-ascii として取り扱われま
す。また、CT: Text/Plain のときに、charset が省略されると US-ASCII と解
釈されます。
@end ifset
@ifset us
If CT: is omitted, the content is treated as "Text/Plain;
charset=us-ascii". And if CT: is "Text/Plain" and charset is not
specified, its charset is considered as US-ASCII.
@end ifset

@ifset jp
このように MIME では、CT: がテキストの場合は、charset で文字コードを指定
できます。日本語には ISO-2022-JP を使います。
@end ifset
@ifset us
Likewise, if CT: is text, charset can be specified in the context of
MIME. For Japanese, ISO-2022-JP is used.
@end ifset

@ifset jp
MIME では、本文に複数のデータを格納できます。これをマルチパートといいま
す。マルチパートのそれぞれのパートは、コンテントヘッダとコンテントボディ
から構成されています。CT: はヘッダだけでなく、コンテントヘッダ中にも現れ
ます。逆に、ヘッダは特殊なコンテントヘッダだと考えても構いません。
@end ifset
@ifset us
MIME can embed multiple objects in its body, so called multipart. Each
part in multipart consists of content-header and content-body. CT:
appears in content-header as well as header. In the contrary, you can
take header as a special type of content-header.
@end ifset

@ifset jp
詳しくは、@xref{mime-multi} を参照して下さい。
@end ifset
@ifset us
For more information, please refer to @xref{mime-multi}.
@end ifset

@ifset jp
以下に重要な CT: を示します。
@end ifset
@ifset us
Important CT: is listed below.
@end ifset

@table @samp
@ifset jp
@item Text/Plain
テキスト
@item Message/Rfc822
MIME を含むメッセージ。ヘッダと本文という構造がある。
@item Multipart/Mixed
マルチパート
@item Application/Postscript
PostScript
@item Application/Octet-Stream
バイトストリーム。バイナリファイルと思ってよい。
@item Image/Gif
GIF
@item Image/Jpeg
JPEG
@item Audio/Basic
AU 形式の音声ファイル
@item Video/Mpeg
MPEG
@item Message/External-Body
メッセージの外部に実体がある
@end ifset
@ifset us
@item Text/Plain
Text
@item Message/Rfc822
Message including MIME which has a header and a body
@item Multipart/Mixed
Multipart
@item Application/Postscript
PostScript
@item Application/Octet-stream
Binary stream. Can be considered as a binary file
@item Image/Gif
GIF 
@item Image/Jpeg
JPEG
@item Audio/Basic
Audio file with AU format
@item Video/Mpeg
MPEG
@item Message/External-body
An phantom object whose real object exists outside of the message
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%
@node mime-cte, mime-multi, mime-ct, MIME
@ifset jp
@section 安全な符号化
@end ifset
@ifset us
@section Encoding for transport-safe
@end ifset

@ifset jp
以前からバイナリを配送するために uuencode という符号化プログラムが使われ
ていました。uuencode は、8ビット3文字を6ビット4文字に変換しますが、変換
後にたくさんの記号が現れます。これらの記号はメッセージのヘッダで特殊な意
味を持つものが含まれており、ヘッダの拡張のためには利用できません。
@end ifset
@ifset us
"uuencode" has been used for a long time to transport binary. It encodes
three 8-bit characters into four 6-bit characters, however, the result
contains many kinds of symbols. Some of them have special meanings in
header so they cannot be used to extent header functionality.
@end ifset

@ifset jp
また、空白文字も使われているのも厄介です。なぜなら、BITNET のファイルシ
ステムには、行末に空白がありえないのです。もし、uuencode で符号化したと
きに、行末にたまたま空白が現れたとしましょう。これを BITNET のメッセージ
ゲートウェイが受け取ると、当然行末の空白を削ってしまいます。よって、受信
者は元のバイナリファイルを復元できません。
@end ifset
@ifset us
Space character bothers the transport system. Space character cannot
exist in end of line of the file system of BITNET. Suppose that an
encoded object with uuencode contains space character in end of line.
When a message gateway BITNET received this kind of message, it removes
the space character, of course. In the result, receivers cannot decode
and extract the original object.
@end ifset

@ifset jp
そこで、MIME では本文用に 2 つの符号化方式を定めました。
@end ifset
@ifset us
MIME specified 2 encoding methods for body.
@end ifset

@table @asis
@ifset jp
@item Base64 符号化方式
"0-9A-Za-z/+" の64文字を用いて、8ビット3文字を6ビット4文字に変換する。元々
は PEM で考え出された。
@item Quoted-Printable 符号化方式
表示不可能な文字を "=" に続けて16進表記する。
@end ifset
@ifset us
@item Base64 encoding
Encode three 8-bit characters into four 6-bit characters with 64
letters, "0-9A-Za-z/+". PEM originates it.
@item Quoted-Printable encoding
Represent non-printable characters in hexagonal preceded by "=".
@end ifset
@end table

@ifset jp
各コンテントヘッダ中の Content-Transfer-Encoding:(CTE:)で符号化方式を指
定します。取り得る値は以下の通りです。
@end ifset
@ifset us
Encoding is specified by Content-Transfer-Encoding:(CTE:) in
content-header. The candidate values are as follows:
@end ifset

@table @asis
@ifset jp
@item 7bit
無変換。7ビットの行から構成される。
@item 8bit
無変換。8ビットの行から構成される。
@item binary
無変換。8ビットのデータ・ストリーム。
@item base64
Base64 で符号化した。7ビットの行から構成される。
@item quoted-printable
Quoted-Printable で符号化した。7ビットの行から構成される。
@end ifset
@ifset us
@item 7bit
No encoding is applied. The content consists of 7 bit lines.
@item 8bit
No encoding is applied. The content consists of 8 bit lines.
@item binary
No encoding is applied. The content is 8 bit stream.
@item base64
Encoded with Base64. The content consists of 7 bit lines.
@item quoted-printable
Encoded with Quoted-Printable. The content consists of 7 bit lines.
@end ifset
@end table

@ifset jp
CTE: が省略された場合は @samp{7bit} として扱われます。
@end ifset
@ifset us
If CTE: is omitted, it is treated as @samp{7bit}.
@end ifset

@ifset jp
ISO-2022-JP は7ビットの文字コードですから、CTE: は 7bit です。つまり、
CTE: は省略して構いません。もちろん、base64 や quoted-printable で符号化
しても構いませんが、フォルダにあるメッセージを more などで直接読めなくな
るので、お勧めではありません。
@end ifset
@ifset us
Since ISO-2022-JP is 7bit character set, CTE: is 7bit. That it, CTE: can
be omitted. You may encode it with base64 or quoted-printable, of
course. However, you cannot read messages in folder directly with such a
encoding, I don't recommend.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mime-multi, mime-header, mime-cte, MIME
@ifset jp
@section マルチパート
@end ifset
@ifset us
@section Multipart structure
@end ifset

@ifset jp
CT: が Multipart である場合、そのコンテントボディには複数のデータが格納
されることを意味します。データの境界は boundary に指定された文字列で区切
られます。以下に例を示します。
@end ifset
@ifset us
If CT: is multipart, its content-body has multiple objects. They are
separated with a string specified in the "boundary" parameter. Let's
look at an example.
@end ifset

@example
@ifset jp
Message-Id: <13060.789566615@@mew.org>
From: Kazuhiko Yamamoto =?ISO-2022-JP?B?GyRCOzNLXE9CSScbKEI=?=
        <kazu@@mew.org>
Subject: =?ISO-2022-JP?B?GyRCPC8kTjMoGyhC?=
To: m-sakura@@ccs.mt.nec.co.jp
Mime-Version: 1.0
Content-Type: Multipart/Mixed; boundary=simple
Content-Transfer-Encoding: 7bit

--simple
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

奈良名物「鹿」の絵を送ります。
 
--かず
    
--simple
Content-Type: Image/Gif
Content-Transfer-Encoding: base64
Content-Description: "Deer on the Nara park"
    
R0lGODdhFwG8ANUAABETDCoYDC8lFi4dJxcnKTMwLkUUC04uG2opEkgeJ04yMWg4Ly1FLVJG
NWdSMywyTks1Tmc3RjdRVjNcalRMUG9UU1xbY051eG9pcIcxEp5bM8d1NI1VSJhrVrRwUpR0
cKZ1dcN9WXuHOWmHc7WJN6yLbcyEWNCZdDZjjml0i5t7im+TmGeRonWly5aLlrCLlK+arJmn
pbettMabktWumM+zsrnCrtTLua21ycq6x6/J3NbQ1+bk29na5dzp8+7w8ywAAAAAFwG8AAAG
/8CLcPhYtVgNyirWasZYEgDhIWGxRiXWcTIATHS/Hs6K2+1wt59azYtdJnBhKrVaWYcp7==
    
--simple--
@end ifset
@ifset us
Message-Id: <13060.789566615@@iijlab.net>
From: Kazuhiko Yamamoto =?ISO-2022-JP?B?GyRCOzNLXE9CSScbKEI=?=
        <kazu@@iijlab.net>
Subject: =?ISO-2022-JP?B?GyRCPC8kTjMoGyhC?=
To: m-sakura@@ccs.mt.nec.co.jp
Mime-Version: 1.0
Content-Type: Multipart/Mixed; boundary=simple
Content-Transfer-Encoding: 7bit

--simple
Content-Type: Text/Plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Here is a picture of deer.

--Kazu
    
--simple
Content-Type: Image/Gif
Content-Transfer-Encoding: base64
Content-Description: "Deer on the Nara park"
    
R0lGODdhFwG8ANUAABETDCoYDC8lFi4dJxcnKTMwLkUUC04uG2opEkgeJ04yMWg4Ly1FLVJG
NWdSMywyTks1Tmc3RjdRVjNcalRMUG9UU1xbY051eG9pcIcxEp5bM8d1NI1VSJhrVrRwUpR0
cKZ1dcN9WXuHOWmHc7WJN6yLbcyEWNCZdDZjjml0i5t7im+TmGeRonWly5aLlrCLlK+arJmn
pbettMabktWumM+zsrnCrtTLua21ycq6x6/J3NbQ1+bk29na5dzp8+7w8ywAAAAAFwG8AAAG
/8CLcPhYtVgNyirWasZYEgDhIWGxRiXWcTIATHS/Hs6K2+1wt59azYtdJnBhKrVaWYcp7==
    
--simple--
@end ifset
@end example

@ifset jp
この例では、"simple" という文字列で区切られています。boundary に指定され
た文字列には、先頭に "--" が付きます。最後の区切りには、後ろにも "--" が
付きます。
@end ifset
@ifset us
In this case, a string "simple" is used. A string specified in the
"boundary" parameter is preceded with "--". The last one is also
followed by "--".
@end ifset

@ifset jp
各パートは、コンテントヘッダとコンテントボディから構成されます。両者は、
ヘッダと本文のように空行で区切られます。逆にいうと、ヘッダと本文は、それ
ぞれ特殊なコンテントヘッダとコンテントボディです。
@end ifset
@ifset us
Each part consists of a content-header and a content-body. They are
separated with a null line as header and body. Changing a point of view,
header and body is special content-header and special content-body
respectively.
@end ifset

@ifset jp
テキスト以外を MIME で送信する場合は、必ずマルチパートを利用するようにし
ましょう。たとえば、本文にいきなり Audio/Basic を格納できますが、そんな
メッセージを受け取ったらびっくりします。パート 1 に説明のテキスト、パー
ト 2 に Audio/Basic を入れた方が親切でしょう。
@end ifset
@ifset us
When you send objects other than text, you should use multipart. Of
course, it is not illegal to contain, for example, Audio/Basic in body
but the receivers would be really confused. You are kind if you enclose
describing text in the first part and embed Audio/Basic in the second
part.
@end ifset

@ifset jp
マルチパートは、入れ子構造にできます。つまり、マルチパートのマルチパート
なども作成できます。
@end ifset
@ifset us
Multipart can take recursive. So, you can enjoy multipart of multipart.
@end ifset

@ifset jp
ちなみに境界ですが、前後の改行まで含みます。上記の例では、
"CRLF--simpleCRLF" が区切りです。
@end ifset
@ifset us
By the way, preceding CRLF is included in a boundary. For example up
above, the boundary is "CRLF--simpleCRLF".
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mime-header, Kanji, mime-multi, MIME
@ifset jp
@section ヘッダの拡張
@end ifset
@ifset us
@section Header extensions
@end ifset

@ifset jp
ヘッダはメッセージの配送に関わる情報を格納しているため、配送プログラムが
誤動作するような文字列を入れるべきではありません。MIME では、フィールド
値に ASCII 以外の文字列を格納する場合、以下のような形式で符号化し、安全
な文字列に変えて挿入します。
@end ifset
@ifset us
Header contains information used for transportation, so it should be
strongly prohibited to insert improper characters that make transport
agents misoperated. With MIME, non-ASCII characters are encoded into
transport-safe characters then stored as a field value with the
following format.
@end ifset

@example
=?<charset>?<encoding>?<encoded-string>?=
@end example

@ifset jp
指定できる <charset> は CT: Text/Plain の charset と同じです。<encoding> 
には、@samp{B} と @samp{Q} 符号化方式があり、前者は Base64 符号化方式、
後者は Quoted-Printable 符号化方式の亜種を意味します。
@end ifset
@ifset us
<charset> is identical to the charset parameter of CT: Text/Plain. For
<encoding>, @samp{B} or @samp{Q} is used. The former is exactly base64
and the latter is a kind of Quoted-Printable.
@end ifset

@ifset jp
ISO-2022-JP には、@samp{B} 符号化方式が奨励されていますが、@samp{Q} 符号
化方式でも構いません。しかし、@samp{Q} 符号化方式に対応しているインター
フェイスはあまりないようです(もちろん Mew は対応しています)。
@end ifset
@ifset us
For ISO-2022-JP, @samp{B} is encouraged. @samp{Q} is also acceptable,
however, few message interfaces support it(of course, Mew does).
@end ifset

@ifset jp
たとえば、Subject: に「山本和彦」と書いた場合、以下のように符号化されま
す。
@end ifset
@ifset us
For instance, the author's Japanese name in Subject: is encoded as
follows:
@end ifset

@example
Subject: =?ISO-2022-JP?B?GyRCOzNLXE9CSScbKEI=?=
@end example

@ifset jp
上記の形式で符号化してもよいのはフィールド値であって、パラメータ値ではあ
りません。パラメータ値の符号に使ってはならない理由としては、キーワードと
なっている @samp{=} が、パラメータ名とパラメータ値の区切り文字と重なって
いることが挙げられます。パラメータを符号化するには、別の形式を利用します。
以下に、「日本語のファイル」というファイル名をパラメータ値に指定した例を
示します。
@end ifset
@ifset us
It is not parameter values but field values that this format can handle.
One of the reasons why this format must not be applied to parameter
values is that the "=" keyword conflicts the separator between parameter
names and parameter values. To encode non-ASCII characters in a
parameter value, another format should be used. Please see the following
example to understand the differences:
@end ifset

@example
Content-Disposition: attachment;
 filename*=iso-2022-jp''%1B%24BF%7CK%5C8l%24N%25U%25%21%25%24%25k%1B%28B
@end example

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Kanji
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Kanji, rfc822, mime-header, Top
@ifset jp
@chapter 嗚呼漢字コード
@end ifset
@ifset us
@chapter Ahhh, Kanji code
@end ifset

@ifset jp
ここでは、非 ASCII 文字をメッセージで使うために人々が奮闘してきた歴史を漢字
を例に取って振り返ります。
@end ifset
@ifset us
"Kanji" is main characters for Japanese which typically have meanings
and two sounds. The total number of Kanji usually used is over
3,000. Kanji was originated from Chinese characters and had been
modified and simplified in Japan for a long time.

There are also about 80 characters, so called "Hiragana", each expresses
just one sound and has a soft shape. Kanji is mainly used for nouns and
beginning portion of verbs while Hiragana is used for other parts
including last portion of verbs. Japanese sentences typically consist of
Kanji in 30% and Hiragana in 70%. There is one more character set,
called "Katakana", which is another notation of Hiragana. Katakana has
exactly same sound of Hiragana and a little hard shape and is used to
express exported words from other countries based on their sounds.

I describe an example of struggle history for non-alphabetical character
set in messaging system.
@end ifset

@menu
@ifset jp
* rfc822::                      電子メールと地域化
* mime-comes::                  MIME の登場
* canonical::                   正規化の概念
@end ifset
@ifset us
* rfc822::                      Email and localization
* mime-comes::                  The appearance of MIME
* canonical::                   The concept of canonicalization
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node rfc822, mime-comes, Kanji, Kanji
@ifset jp
@section 電子メールと地域化
@end ifset
@ifset us
@section Email and localization
@end ifset

@ifset jp
1982年、互換性を保証するために、電子メールの規格 RFC822 が記述されました。
電子メールはアメリカ育ちであったため、残念ながら本文やヘッダには、ASCII 
文字列しか格納できない規格でした。
@end ifset
@ifset us
A spec of Email, RFC822, was defined with a hope to ensure
interoperability in 1982. Since Email was grown in America, its header
and body could not contains other character sets than US-ASCII.
@end ifset

@ifset jp
しかし、英語以外の言語を母国語としている人達にはとても不便です。そこで、
配送に関わるヘッダはともかく、本文に母国語を格納するため RFC822 はさまざ
まな国で拡張されました。
@end ifset
@ifset us
It is, however, very inconvenient for people whose language is not
English. So, despite of extension of header, many people from various
countries extended RFC822 messages to contain non-English characters from
their native language.
@end ifset

@ifset jp
ヨーロッパ諸国では、ウムラウト(アクセント)文字を表す8ビット1文字のコード 
Latin 1 がよく使われるようになりました。Latin 1 は ISO-8859-1 と呼ばれる
ことがあります。
@end ifset
@ifset us
In Europe, Latin 1 started to be used that presents umlaut(accent)
characters by 8 bit word. Latin 1 is sometime called ISO-8859-1.
@end ifset

@ifset jp
日本では、7ビット2文字の JIS コード、UNIX でよく使われる 8ビット2文字の 
EUC コード、パソコンで使われている 8ビット2文字の SJIS コードが存在しま
した。日本のインターネットの前身である JUNET の先駆者達は、配送のための
コードとして JIS コードを ESC シーケンスで切り替える、いわゆる JUNET コー
ドを選びました。
@end ifset
@ifset us
In Japan, there are three major codes, (1) JIS code which is 7-bit 2
characters, (2) EUC code which is 8-bit 2 characters and is used in
UNIX, (3) SJIS which is 8-bit 2 characters and is used in PCs. Pioneers
of JUNET which is the antecedent of Japanese Internet chose a switch
mechanism of ASCII and JIS with ESC sequence, so called JUNET code, for
transportation.
@end ifset

@ifset jp
JUNET コードは ISO-2022-JP と呼ばれることがあります。ISO-2022-JP を使え
ば、複数の文字コードを切り替えるだけでなく、使われている文字コードが何か
という情報を得られます。
@end ifset
@ifset us
JUNET code is sometime called ISO-2022-JP. With JUNET code, we can tell
what their character sets are in addition to switch them.
@end ifset

@ifset jp
Latin 1 や ISO-2022-JP に見られる本文の拡張は、あくまで地域に限定された
紳士協定です。RFC822 を使う限り、地域間を越えてメッセージをやりとりする
には、結局英語を使うしかないのです。
@end ifset
@ifset us
The extension such as Latin 1 and JUNET code is an agreement within the
region. You are compelled to use English to send a message across regions
in the context of RFC822.
@end ifset

@ifset jp
RFC822 は記述が曖昧なので、ヘッダや本文に 7 ビット文字である ISO-2022-JP 
を入れてもよいように読めます。たぶん、この説明を読めば誤解が解けるでしょ
う。「RFC822 は、ヘッダと本文のシンタックス(構文)を7ビット、それらのセマ
ンティックス(意味)を US-ASCII と定めています。ISO-2022-JP のシンタックス
は RFC822 に従っていますが、セマンティックスは RFC822 に違反しています。」
@end ifset
@ifset us
RFC822 is so ambiguous that we misunderstand that JUNET code can be used
for header and body since it is 7 bit. Probably this is a good
explanation to blow away your misunderstanding. "RFC822 defines that the
syntax of header and body is 7bit and the semantics of header and body
is US-ASCII". JUNET code is syntactically legal but its semantics is
illegal.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node mime-comes, canonical, rfc822, Kanji
@ifset jp
@section MIME の登場
@end ifset
@ifset us
@section The appearance of MIME
@end ifset

@ifset jp
絵や音声などを配送したい、地域化された RFC 822 の架け橋となる規格が欲し
いなどの要望を満たすために、1992年に MIME が規定されました。MIME では、
テキストの文字コードを charset というパラメータに指定できます。たとえば、
ISO-2022-JP は以下のように指定します。
@end ifset
@ifset us
To satisfy users' desire such as transportation of picture and audio and
to bridge localized RFC822, MIME was defined in 1992. With MIME, the
character parameter can be specified. Since JUNET code is called
ISO-2022-JP, Japanese message looks as follows:
@end ifset

@example
@ifset jp
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

日本語のテキスト
@end ifset
@ifset us
Content-Type: Text/Plain; charset=iso-2022-jp
Content-Transfer-Encoding: 7bit

Japanese text.
@end ifset
@end example

@ifset jp
この charset は役に立つのでしょうか？ もちろんです。charset は、インター
フェイスに正しくテキストの文字コードを伝える役割を果たします。ノルウェー
の人が ISO-8859-1 で日本にメッセージを送ってきたとしましょう。ISO-8859-1 
に対応しているインターフェイスなら、対応するフォントで表示すればいいし、
対応していないなら無視すればいいのです。Mew では、Mule の内部コードに変
換する関数の引数に charset を利用しています。
@end ifset
@ifset us
Is this charset useful? Absolutely! The charset parameter can tell user
interface an exact character set. Suppose that a Norway guy send a
message with ISO-8859-1 to Japanese. If his interface supports
ISO-8859-1 then it is no problem to display the body. Otherwise the
interface can safely ignore the body. Mew makes use of the charset
parameter to convert messages to Mule's internal representation.
@end ifset

@ifset jp
「ISO-2022-JP の上位互換規格であり、さまざまな文字コードを格納できる 
ISO-2022-JP-2 などを使えば charset など要らない。なぜなら ISO-2022-JP-2 
自体に文字コードの情報が含まれているから」という人がいます。しかし、これ
らの人は MIME を理解できているとは思えません。
@end ifset
@ifset us
Some people say like this; "If we use ISO-2022-JP-2 which is upper
compatible to ISO-2022-JP and can handle numerous character set, the
charset parameter is not necessary since ISO-2022-JP-2 itself contains
information about character set." Maybe, just maybe, such people don't
understand MIME.
@end ifset

@ifset jp
確かに理想的にいえば、この主張は正しいのです。しかし、MIME は現実主義で
す。MIME はユーザが明日から ISO-2022-JP-2 を使うようになるという大胆な仮
定はしていません。また、世の中に存在する脆弱な配送プログラムでも安定して
動くように考慮されています。世の中は、そんなにお行儀のよいプログラムばか
りではないし、たくさんの資源を使えるほど豊かでもないのです。「明日から
UNICODE を使え」と言われたらいやでしょう？
@end ifset
@ifset us
Ideally speaking, this assessment is correct. But MIME takes a practical
stance. MIME does not suppose that all people in the world will start
using ISO-2022-JP-2 tomorrow. Moreover, MIME is designed to be robust
against unstable transfer programs. All transfer program in the world
are not well implemented. And all site cannot use rich resources. If you
ask to use UNICODE as of today, how do you feel?
@end ifset

@ifset jp
MIME は、さまざまに地域化されたメッセージの架け橋として charset を用意し
ました。MIME で増えた作業は、charset の挿入だけであり、今まで通り我々は 
ISO-2022-JP を使えます。ISO-2022-JP-2 を標準にしたいなら、ISO-2022-JP-2 
をデフォルトで使う地域を広げていけばよいのです。この意味で、
ISO-2022-JP-2 と MIME は相反してはなく、逆に、ISO-2022-JP-2 の普及のため
に MIME を利用できると言えます。もちろん文字コードの符号化方式である 
ISO-2022-xx に charset という単語が相応しくないのは、MIME の開発者も認め
ているところです。
@end ifset
@ifset us
MIME provides the charset parameter to bridge between numerous localized
regions. The additional procedure under MIME is to label the charset
parameter and we can use ISO-2022-JP as we used to. If you wish to make
ISO-2022-JP-2 an Internet standard, you should make an effort to spread
region where ISO-2022-JP-2 is used by default. Likewise, ISO-2022-JP-2
and MIME is not inconsistent. Rather, ISO-2022-JP-2 can make most use of
MIME to make itself widely spread. Of course, the name of "charset" is
not proper for character switching mechanisms such as ISO-2022-xx.
@end ifset

@ifset jp
MIME を使えば、非 ASCII 文字を ASCII 文字列に符号化し、ヘッダに挿入でき
ます。このような枠組で、電子メールの配送プログラムの誤動作を防止し、また、
ヘッダに英語以外の言語を書くことを実現しているのです。もう、Subject: に
「日本語を書いてはいけません」なんて言わなくてよくなりました。:)
@end ifset
@ifset us
With MIME, you can encode non-ASCII character set and insert it into
header. This scheme prevents errors of Email transfer programs and makes
it possible to convey non-ASCII strings in header. We don't have to say
"Do not use Japanese on Subject:" anymore!
@end ifset

@ifset jp
MIME は地域化された RFC 822 を禁止する規格ではありません。よって、MIME 
のインターフェイスは、以下のような動作が望まれています。
@end ifset
@ifset us
MIME is not a spec to prohibit localized RFC822. So, MIME interfaces are
supposed to act as follows:
@end ifset

@ifset jp
読むとき
@end ifset
@ifset us
Viewing
@end ifset

@enumerate
@ifset jp
@item
ユーザがデフォルトの charset を選べるようにしておく。
@item
MIME-Version: がないメッセージの場合は、本文をデフォルトの charset とし
て扱う。
@item
MIME-Version: があり、Content-Type: がない場合は、US-ASCII として扱う。
@item
MIME-Version: と Content-Type: がある場合は、Content-Type: に指示された 
charset を利用する。
@end ifset
@ifset us
@item
Allow user to choose a default charset.
@item
If MIME-Version: doesn't exist, the body is treated as the default charset.
@item
If MIME-Version: exists and Content-Type: is not provided, 
the body is treated as US-ASCII.
@item
If both MIME-Version: and Content-Type: exist, specified charset is used.
@end ifset
@end enumerate

@ifset jp
書くとき
@end ifset
@ifset us
Composing
@end ifset

@enumerate
@ifset jp
@item
MIME-Version: と Content-Type: Text/Plain の charset を必ず付ける。
@item
charset には、最小限の文字集合を選ぶようにする。たとえば、英語だけなら 
US-ASCII を選ぶようにする。これを守らないと、読めるべきメッセージが読め
なくなる可能性がある。たとえば、US-ASCII だけなのに、ISO-2022-JP と書い
てあると、US-ASCII にしか対応してないメーラで読めないかもしれない。
@end ifset
@ifset us
@item
Specify MIME-Version:, Content-Type:, and its charset.
@item
Choose minimum character set for charset. For instance, US-ASCII for
English. If the rule is violated, it is likely that a message to be read
cannot be read. For instance, consider a message labeled ISO-2022-JP
whose body is US-ASCII in fact. Mailers which support US-ASCII only
could not handle such a message.
@end ifset
@end enumerate

@ifset jp
スプールやフォルダに ISO-2022-JP を EUC-Japan に変更して格納する場合は、
無条件に変換してはいけません。きちんと charset を確かめ、ISO-2022-JP だ
けを EUC-Japan に変換するようにして下さい。
@end ifset
@ifset us
If you store messages in a spool or folders after conversion from
ISO-2022-JP to EUC-Japan, please don't be blind. You should check
charset out, and convert only ISO-2022-JP messages to EUC-Japan.
@end ifset

@ifset jp
ヘッダに非 ASCII 文字を挿入する機能は MIME の一機能ですが、実際には、
MIME-Version: フィールドは必要ありません。
@end ifset
@ifset us
Insertion of non-ASCII in header is one of MIME features but in fact
MIME-Version: is not necessary.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node canonical, Policy, mime-comes, Kanji
@ifset jp
@section 正規化の概念
@end ifset
@ifset us
@section The concept of canonicalization
@end ifset

@ifset jp
残念ながら、世の中のコンピュータは、データをさまざまな方法で表現します。
以下によく利用されている OS とその行末を示します。
@end ifset
@ifset us
Unfortunately, each computer in the world represents data with its own
format. The followings are end of lines used in major OSes.
@end ifset

@itemize @minus
@item
UNIX   :: LF(0x0a)
@item 
MS-DOS :: CRLF(0x0d0a)
@item
MacOS  :: CR(0x0d)
@end itemize

@ifset jp
よって、行末に関して取り決めがないと、これらの OS 間では安全にテキストが
交換できません。RFC822 では、メッセージの再送の際に行末を CRLF に変換す
ることになっています。このように、共通の書式への変換を「正規化」といいま
す。SJIS や EUC-Japan を ISO-2022-JP に直すのも正規化の一種です。
@end ifset
@ifset us
As you know, if there is no agreement for end of line, text is not
transfered between these OSes safely. RFC822 defines to transform end of
line into CRLF. This kind of format conversion is called
canonicalization. Converting SJIS and EUC-Japan to JUNET code is a kind
of canonicalization.
@end ifset

@ifset jp
さて、PGP の暗号化や署名ついて考えてみましょう。たとえば、Mac のユーザが
行末が CR である文章に署名し UNIX ユーザに送ったとします。UNIX ユーザが
行末を LF に変換し署名を確認したとしたら、検証が失敗するのは明らかでしょ
う。そこで、PGP への入力はあらかじめ正規化されている必要があるのがお分か
りになると思います。
@end ifset
@ifset us
OK, let's think about encryption and signature with PGP. Suppose that a
Mac user signed text whose line breaks are CR then sent it to a UNIX
user. If the UNIX user transforms line break to LF then verifies the
signature, it is obvious that the verification fails. You thus
understand that canonicalization is necessary.
@end ifset

@ifset jp
PGP で暗号化したり署名したりする場合は、まずテキストを ISO-2022-JP に変
換し、行末を CRLF に直して下さい。
@end ifset
@ifset us
When you encrypt or sign text with PGP, first convert it to ISO-2022-JP
then transform its end of lines into CRLF. 
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Policy
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Policy, History, canonical, Top
@ifset jp
@chapter Mew のこだわり
@end ifset
@ifset us
@chapter Mew's policy
@end ifset

@ifset jp
Mew の精神を一言で表すと、
@end ifset
@ifset us
The following words mention Mew's spirit:
@end ifset

@quotation
Mew wants something simple or nothing at all.
@end quotation

@ifset jp
となります。つまり、複雑な機能は要らないのです。単純で吟味された機能しか
提供しません。
@end ifset
@ifset us
That is, complicated mechanism is not necessary. What Mew provides is
simple yet comprehensive feature.
@end ifset

@ifset jp
たくさんの方が「昔使っていたメーラにはこんな機能があって便利だから、Mew 
にも付け加えて欲しい」といいます。しかし、こんな説明では著者を説得するの
は難しいでしょう。なぜなら、Mew は他のプログラムが今までやっていないこと
を実現しようとしているからです。「昔はこうだった」という理由はあまりにも
力不足です。
@end ifset
@ifset us
Many people tell me like this: "A mailer that I used before has this
kind of feature and I think it's very convenient. So, please implement
it in Mew". Sorry, such a explanation might not convince me. Mew is
trying to carry out stuff that other programs have not ever done so.
The word "good-old" seems to me not enough.
@end ifset

@ifset jp
もし自分の意見が正しいと思うのでしたら、根気強く著者を説得して下さい。著
者は忙しいので昔説明されたことはすぐ忘れてしまいますし、人間ですから思い
込みや偏見があります。素晴らしいアイディアを理解できないことが多分にある
でしょう。どうか、くじけないで下さい。
@end ifset
@ifset us
If you believe in your opinion, please pursue the author
patiently. Since I'm hell-of-a busy person I'm prone to forget what you
explained before. And because I'm just a man I regret to say I'm
subjective. It is quite possible for me not to understand your novel
ideas. So, please don't give up!
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	History
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node History, mh-e, Policy, Top
@ifset jp
@chapter Mew の来た道
@end ifset
@ifset us
@chapter Where did Mew come from?
@end ifset

@ifset jp
役には立ちませんが、Mew の歴史をひもといてみましょう。
@end ifset
@ifset us
It might not be useful but let's open the book about Mew's history...
@end ifset

@menu
@ifset jp
* mh-e::                        mh-e からの脱却
* birth::                       Mew の誕生
* pgp::                         PGP との出会い
* im::                          MH からの独立
* netnews::                     ニュースの統合
@end ifset
@ifset us
* mh-e::                        Departure from mh-e
* birth::                       Birth of Mew
* pgp::                         Meet to PGP
* im::                          Independence from MH
* netnews::                     Integration of NetNews
@end ifset
@end menu

@c %%%%%%%%%%%%%%%%%
@node mh-e, birth, History, History
@ifset jp
@section mh-e からの脱却
@end ifset
@ifset us
@section Departure from mh-e
@end ifset

@ifset jp
1993年の秋に WIDE Project の FJPEM の実験に参加しました。そのころ、櫻井
さんが FJPEM を mh-e で利用しやすくするため、mhpem を作りました。mhpem 
に触発され、1994年の冬は修論の逃避行動を兼ねて mhpem の改良に励みました。
@end ifset
@ifset us
I took part in the FJPEM research project of WIDE Project in the fall of
1993. At that time, Mine had implemented mhpem to make it convenient to
use FJPEM with mh-e. Inspired by mhpem, I spend many time to enhance
mhpem as escape from my master thesis in winter 1994. :)
@end ifset

@ifset jp
mhpem は暗号メッセージを自動的に復号化するおしゃれなプログラムでしたが、
いくつか問題がありました。大きな問題は、mh-e が簡単に拡張できない柔軟性
に欠けたプログラムだったことです。復号化したメッセージは、次に読むときは
速くなるよう保存したいと思いますが、mh-e を改良するのは難しいのです。
mh-e がバージョンアップし、mhpem が新しい mh-e で動かなかったとき、著者
は切れました。
@end ifset
@ifset us
mhpem was a lovely program to decrypt cipher messages automatically,
however, we met some problems. The biggest one was that mh-e was not
flexible enough to enhance some features. I really wanted to cache
decrypted message to display it quickly for the second time but it was
quite hard to enhance mh-e to do so. When a new version of mh-e was
released and it appeared that mhpem didn't work with it, I decided to
kick it out.
@end ifset

@ifset jp
復号化した PEM を保存したい。MIME も保存したい。どうして、簡単に MIME を
取り扱えるインターフェイスがないのか。なぜ、複数のメッセージから簡単に引
用できないのか。マークを駆使して面白いことができないなんて。メッセージの
整頓が大変なのはいやだ。結局、mh-e を改良することでは、自分の欲しいプロ
グラムは書けなかったのです。
@end ifset
@ifset us
I want to cache decrypted PEM. Also MIME. Why isn't there a good
interface to handle MIME with easy operations? Tell me the reason not to
be able to cite multiple messages to one replying message. It's
ridiculous that we cannot enjoy cheerful marks. I'd hate to refile
messages with difficult operations. All in all, it appeared impossible
for me to implement what I want by modifying mh-e.
@end ifset

@ifset jp
mhpem の自動復号機能、mhasync の非同期な scan 機能、ウインドウの大きさを
動的に変更できる GNUS の機能、マークを付けて複数のニュースを取り扱える 
gnus-mark の機能、VM のような整頓機能、解析したメッセージの保存、美しく
柔軟性のあるプログラミングスタイル.... さまざま断片が著者の中で1つにまと
まり始めました。1994年3月、奈良への引越し前のことでした。
@end ifset
@ifset us
Auto decryption in mhpem, asynchronous scan in mhasync, dynamic window
setup in GNUS, cheerful mark system for multiple messages in gnus-mark,
refile feature in VM, message cache mechanism, and beautiful and
flexible programming style.... A pieces of puzzle was gradually getting
together in my mind. It was early in the spring of 1994.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node birth, pgp, mh-e, History
@ifset jp
@section Mew の誕生
@end ifset
@ifset us
@section Birth of Mew
@end ifset

@ifset jp
1994年4月、本格的に Mew の製作に取り掛かりました。一覧表示の終了を待たな
くてよい機能、動的なウインドウ設定、マーク、解析したメッセージの保存など
は、お手本があったので早くから実装されていました。
@end ifset
@ifset us
In April 1994, I started to program Mew. Since there were references,
inc and scan not to wait the exit, dynamic window configuration, marks,
and message cache were implemented in early time.
@end ifset

@ifset jp
はじめの頃は MIME を MIME モードで表示していました。マルチパートのメッセー
ジで @samp{SPC} を押すと、Summary モードから MIME モードに移動していたの
です。しかし、歌代さんは言いました、「なぜ MIME モードかあるの？ Summary 
だけで十分ではないか」。目から鱗の落ちる思いでした。
@end ifset
@ifset us
To tell the truth, Mew displayed MIME messages in MIME mode. When you
type @samp{SPC} on a multipart MIME message, Mew moved from Summary mode
to MIME mode. Utashiro said to me, however, "Why MIME mode? Summary mode
is enough, isn't it?". It's a really breakthrough.
@end ifset

@ifset jp
このころの大きな障害は、メッセージの整頓方法と MIME の作成方法でした。
@end ifset
@ifset us
At this time, big problems were how to refile messages and to compose
complex MIME.
@end ifset

@ifset jp
確かに VM のように、ユーザにいちいち Lisp を書かせれば、整頓は簡単になり
ます。しかし、ユーザにこまめに設定させること自体が嫌だったのです。「メッ
セージのヘッダから無限の可能性のある整頓先を模索するのは馬鹿だ。限りのあ
る実際のフォルダの中から候補を選べばいい」。このアイディアを思いついたと
きは、次の朝が来るのが待ち遠しかったものです。整頓機能は、後に乃村さんに
よって強化されました。
@end ifset
@ifset us
It is certain that if users are always forced to write Lisp, message
refile becomes easy. But I really hate to require users to setup Lisp by
themselves. "It is ridiculous to try to choose default refile-folder
from message header since there are thousands of candidates. Rather, it
is quite reasonable to select the default from existing folder". When
this idea hit my head, I could not wait for the next morning. After
that, refile feature was enhanced by Nomura.
@end ifset

@ifset jp
複雑な MIME を簡単に作成するにはどうすればよいか？ ユーザには作成文法と
か MIME の書式などの理解を押しつけるのはあんまりだ。一言説明すれば、だれ
でも直感的に MIME を作れるようにしたい。この答えをくれたのは門林さんです。
「MIME の構造ってファイルシステムに似ているよね」。そうです、シングルパー
トをファイル、マルチパートをディレクトリと考えればよいのです。ファイル操
作はだれにでもできるし、ファイル構造を MIME に変換する仕事は Mew が請け
負います。
@end ifset
@ifset us
How to compose complicated MIME message with easy operations? It is a
tragedy for users to be compelled to learn a composition grammar. I
really wanted to provide simple yet comprehensive method to users. It
was Youki that gave me the answer. Yes, MIME is file structure! We can
consider that a singlepart is a file while a multipart is a
directory. Users can create a file tree without any troubles, of course,
and it is a Mew's job to convert the file structure to MIME format.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node pgp, im, birth, History
@ifset jp
@section PGP との出会い
@end ifset
@ifset us
@section Meet to PGP
@end ifset

@ifset jp
FJPEM の実装に疑問を感じていた著者は、1994年の初夏 PGP と出会いました。
そのころは PGP 2.5、つまり、MIT が RSAREF を使って、RSA の特許に抵触しな
い非商用の PGP を模索していた時期です。PGP 2.6 のリリースによって、Phil 
と RSADSI は和解しましたが、RSAREF を使っている 2.6 は米国国外への持ち出
しが禁止されています。
@end ifset
@ifset us
I couldn't swipe out reservations to the implementation of FJPEM for a
long time, then PGP finally appeared in front of me in the early summer
of 1994. At that time, MIT tried to find a solution to make
non-commercial PGP legal against the RSA patent, so called PGP 2.5. The
release of PGP 2.6 settled down the relationship between Phil and
RSADSI, yet PGP 2.6 based on RSAREF was under US export control.
@end ifset

@ifset jp
しかし、2.3a を基にした 2.6ui の存在を知り、PGP ユーザになりました。PGP 
を始めて使ったときの感動は忘れられません。本当に計算し尽くされたプログラ
ムです。1995年の冬、サンディエゴで開かれた通称 ISOC Security
Symposium(NDSS)という国際会議に参加しました。このとき、プロシーディング
と共に O'Reilly から発売されてすぐの Simson の PGP という本をもらいまし
た。久々に読みふけった傑作中の傑作です。このような理由から、PEM と MIME 
の統合よりも、PGP と MIME の統合に力を注ぐようになりました。PGP/MIME は
現在実験段階であり、標準化にはまだ時間がかかります。
@end ifset
@ifset us
Meet to 2.6ui based on 2.3a finally leaded me to be a PGP user. I cannot
forget my first impression to PGP. It's a really well-designed program.
In the summer of 1995, I took part in NDSS, so called ISOC Security
Symposium in San Diego. In addition of the proceedings, PGP by Simson
published from O'Reilly was delivered to early registered
participants. It's a masterpiece of masterpieces.  For these reasons, I
have spent time to integrate PGP and MIME rather than to integrate PEM
and MIME.
@end ifset

@ifset jp
「暗号化とか署名はマークで表せばいい」というアイディアは、櫻井さんと情報
処理全国大会の論文を書いたときに教えてもらいました。マークならいつでも好
きなときにキャンセルできるという利点を理解するのは少し時間がかかりました
けど。
@end ifset
@ifset us
The idea that marks can represent encryption and signature was given by
Mine when we wrote a paper for IPSJ together. It took a time a bit to
understand its merit that marks could be canceled at any time.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node im, netnews, pgp, History
@ifset jp
@section MH からの独立
@end ifset
@ifset us
@section Independence from MH
@end ifset

@ifset jp
「うまい寿司を食わせてやるからみんな福岡に集合だ」のかけ声のもと、1997年
4月にそうそうたるプログラマが福岡ドームのある百道に結集しました。九州シ
ステム情報技術研究所にハック部屋を借り、近くのハイヤット・リージェンシー
を寝床にして、3泊4日に及ぶ MH からの独立作戦が開始されました。
@end ifset
@ifset us
"Get together in Fukuoka for good sushi!" Under these words, excellent
programmers came to Momochi, Fukuoka, where Fukuoka dome locates, in
April, 1997. Using Institute of Systems & Information Technologies,
Kyushu as a hacking room and Hyatt Regency as sleeping rooms, MH
independence project for 3 nights started.
@end ifset

@ifset jp
とにかく食べる、気に入るまでハックする、とことんまで議論するという作業を
なんども繰り返し、福岡を後にするころにはほぼ Mew が MH から独立し、IM を
使うようになっていました。(この週のエンゲル係数が高かったのは言うまでも
ありません。)
@end ifset
@ifset us
Eating anyway, hacking as we like, and discussing comprehensively. We
repeated these steps over and over. As we left Fukuoka, Mew became
somehow independent on MH by using IM instead. (Engel's coefficient of
this week is, of course, very high...)
@end ifset

@ifset jp
その後もメーリングリストで議論を戦わせ、合意を取り、またハックするという
作業を繰り返し、最後に歌代先生が高速化の魔法を唱えて、ようやく7月頭にベー
タリリースにこぎつけました。
@end ifset
@ifset us
Afterwords, we discussed on mailing list, tried to achieve consensus,
and then hacked again and again. Finally master Utashiro casted a spell
to make IM much faster then IM beta version was released in early July.
@end ifset

@c %%%%%%%%%%%%%%%%%
@node netnews, Future, im, History
@ifset jp
@section ニュースの統合
@end ifset
@ifset us
@section Integration of NetNews
@end ifset

@ifset jp
1994年秋の WIDE 合宿で Mew の BOF(Birds Of a Feather::井戸端会議)をしま
した。この BOF で佐野さんは「電子メールとニュースの中間がメーリングリス
トだよね」という忘れられない言葉を残しました。闇の中で手探り状態だったと
ころに、一筋の光を見た思いです。Perl 5 が安定してきた現在、ニュースの統
合は間近に迫っています。
@end ifset
@ifset us
In the fall of 1994, I held Mew BOF(Birds Of a Feather) at WIDE camp.
Mr. Sano left unforgettable words to me: "Mailing-list is some between
Email and NetNews". It's like I saw a light in darkness. Now that Perl 5
become stable, the integration of NetNews is coming soon.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Future
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Future, Avail, netnews, Top
@ifset jp
@chapter Mew の行く道
@end ifset
@ifset us
@chapter Where will Mew go?
@end ifset

@ifset jp
Mew 1.95 がバージョン 1 としては最後になる予定です。以下に Mew 1.95 で実
装する機能を挙げます。
@end ifset
@ifset us
Mew 1.95 would be the last version of the version 1 series. The
followings are features to be implemented in Mew 1.95.
@end ifset

@table @asis
@ifset jp
@item 真の多言語対応
Mew の多言語対応は今でも素晴らしいのですが、8bit のメッセージをうまく転
送できない、韓国語の取り扱いが難しいなどの欠点があります。これらを欠点を
修正して真の多言語対応を目指します。
@item MIME エディタ
現在、マルチパート・メッセージを再編集するのは困難です。Mew 1.95 では、
あたかも新規メールを扱っているかのような再編集機能を実現します。
@item カスタマイズ
@samp{defcustom} などを利用して、カスタマイズを容易にします。
@item Draft モードの定型書式とサブモード
Draft モードで定型の文書をあらかじめ用意したり、携帯電話メールへメッセー
ジを書くために便利なモードを用意したりします。
@end ifset
@ifset us
@item Real multi-lingualization
Though The current multi-lingualization feature of Mew is really cool,
there are some shortcoming such as inability of 8bit message forwarding,
difficulty of Korean processing, etc. Mew 1.95 will aim at real
multi-lingualization solving these problems.
@item MIME editor
Currently, it is hard to re-edit multipart messages. Mew 1.95 will
implement a generic mechanism to re-edit multipart messages.
@item Customizing
Making it easy to customize Mew's options with @samp{defcustom}.
@item Template in Draft mode
Draft mode will provide template features. For example, a typical
greeting sentence can be inserted according to the To: field.
@end ifset
@end table

@ifset jp
Mew 2 では IM から独立する予定です。このプロジェクトは 「Mew 2 の逆襲」
と呼ばれています。
@end ifset
@ifset us
It is planed that Mew 2 will be independent on IM.
@end ifset

@table @asis
@ifset jp
@item IMAP デーモン
Mew 1.9x の欠点の 1 つは、IM を何度も呼び出すので、Perl が起動し IM のファ
イル群を読む時間その都度待たされることです。そこで、ローカルのコンピュー
タに常駐する IMAP デーモンを作成し、Mew は IMAP デーモンと通信するように
します。
@item 全文検索のデータベース
全文検索のためのデータベースに対応します。実は現在でも Namazu が利用でき
ます。"contrib/00readme-namazu.jis" を参照して下さい。
@item 親子関係のデータベース
メッセージの親子関係を保存するデータベースに対応します。これによってスレッ
ドが実現できます。また、メッセージの未読管理もできるようになります。ひょっ
とすると、メッセージの整頓という作業はまったくなくなるかもしれません。
@item ネットニュース
そろそろネットニュースにも対応しないといけませんね。
@end ifset
@ifset us
@item IMAP daemon
One of shortcomings of Mew 1.9x is that users are made to wait every
time Perl is executed and reads configuration files. To solve this, we
are planing to implement an IMAP daemon running on a local computer and
make Mew communicate with it.
@item Database for full body search
Mew 2 will support database for full body search (WAIS for English?).
@item Database for message relations
Mew 2 will support database for message relations. Thanks to this,
thread can be implemented. Also, it will be possible to manage unread
messages. Possibly refiling messages will be unnecessary.
@item NetNews
Mew 2 will support NetNews.
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Avail
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Avail, ftp, Future, Top
@ifset jp
@chapter 入手方法とメーリングリスト
@end ifset
@ifset us
@chapter Availability and mailing-list
@end ifset

@ifset jp
ここでは、Mew の入手方法とメーリングリストについて触れます。
@end ifset
@ifset us
This chapter describes how to get Mew and related mailing-lists.
@end ifset

@menu
@ifset jp
* ftp::                         Mew の入手方法
* ml::                          メーリングリスト
@end ifset
@ifset us
* ftp::                         How to get Mew?
* ml::                          Mailing list
@end ifset
@end menu 

@c %%%%%%%%%%%%%%%%%
@node ftp, ml, Avail, Avail
@ifset jp
@section Mew の入手方法
@end ifset
@ifset us
@section How to get Mew?
@end ifset

@ifset jp
Mewの最新バージョンは以下から入手できます。
@end ifset
@ifset us
The latest Mew is available from the following repository.
@end ifset

@example
ftp://ftp.Mew.org/pub/Mew/mew-current.tar.gz
@end example

@ifset jp
ときどきサンプルメッセージが以下のように提供されます。
@end ifset
@ifset us
Samples are given time to time under the following file name:
@end ifset

@example
ftp://ftp.Mew.org/pub/Mew/samples.tar.gz
@end example

@c %%%%%%%%%%%%%%%%%
@node ml, Ack, ftp, Avail
@ifset jp
@section メーリングリスト
@end ifset
@ifset us
@section Mailing list
@end ifset

@ifset jp
新しいバージョンは、
@end ifset
@ifset us
A new version is announced to 
@end ifset

@example
mew-release@@Mew.org
@end example

@ifset jp
で英語でアナウンスしています。入りたい人は
@end ifset
@ifset us
in English. If you wish to join, please send a message to
@end ifset

@example
mew-release-ctl@@Mew.org
@end example

@ifset jp
宛に本文に "#help" と書いて電子メールを送って下さい。mew-release には著
者以外が投稿できないように制限が加えられています。
@end ifset
@ifset us
whose the first line of its body is "#help" (without quotes). This list
is under access control so that nobody but the author can post.
@end ifset

@ifset jp
Mew の質問や議論などは、

@example
mew-dist@@Mew.org
@end example

に日本語で投稿できます。mew-dist へ入りたい人は

@example
mew-dist-ctl@@Mew.org
@end example

宛に本文に "#help" と書いて電子メールを送って下さい。mew-dist は 
mew-release に含まれているので、mew-dist に登録すれば、自動的に 
mew-release 宛の電子メールを受け取るようになります。

Mew の質問はできるだけ mew-dist へお願いします。著者には受け取ったすべて
の質問に答えている時間はありません。mew-dist へ質問すると、他の人が答え
てくれることを期待できます。
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Ack
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Ack, Copyright, ml, Top
@ifset jp
@chapter 謝辞
@end ifset
@ifset us
@chapter Acknowledgement
@end ifset

@ifset jp
まずはじめに、櫻井三子さんにお礼を述べたいと思います。彼女が mhpem を作
り触発してくれなかったら Mew を作ることはなかったからです。(もうなくなっ
てしまいましたが) mew-url や mew-pem の多くの部分を書いています。また、
複雑なメッセージの作成にマークを使うというヒントも与えてくれました。
@end ifset
@ifset us
First and foremost, I would like to thank Mine Sakurai. If she had not
have implemented mhpem and inspired me, Mew would not be realistic. She
also implemented most part of mew-url and mew-pem(that are obsolete,
though). It is she that gives me an idea of mark based composing. To her
goes my deepest gratitude.
@end ifset

@ifset jp
Summary モードをもっと簡素にと助言して頂いた歌代和正さん、MIME とファイ
ル構造って似てるよねと言ってくれた門林雄基さん、いつも電子メールに関して
貴重な助言をしてくれる中村素典さん、電子メールとニュースを統合するきっか
けを与えてくれた佐野晋さんに心から感謝します。
@end ifset
@ifset us
The author of Mew would sincerely like to acknowledge Kazumasa Utashiro
for telling me simplicity of Summary mode, Youki Kadobayashi for
noticing me a scheme to map file structures to MIME, Motonori Nakamura
for his precious suggestions regarding with Email, and Susumu Sano for
giving me a hint to integrate Email and NetNews.
@end ifset

@ifset jp
いつも素晴らしいコードを提供しくれる酒井清隆さん、メッセージの整頓機能を
賢くしてくれた乃村能成さん、こまめに英語を直してくれる牛島幹友さん、info 
を書く気にさせてくれた島慶一さん、ありがとうございます。
@end ifset
@ifset us
Kiyotaka Sakai always contributes neat codes. Yoshinari Nomura enhanced
functionality of message refile. Mikitomo Ushijima always proofreads my
poor English. Keiichi Shima encouraged me to write Info. I very much
appreciate.
@end ifset

I would like to thank David Worenklein for contributing many codes. I'm
grateful to Atsushi Shionozaki, Darren Stalder, and David Worenklein for
proofreading my paper. I'd like to acknowledge to Scandinavia guys for
their good suggestions.

@ifset jp
IM の作成に協力してくれた萩野純一郎さん、笠原義晃さん、中村素典さん、乃
村能成さん、西和則さん、太田英憲さん、IM を高速にしてくれた歌代和正さん
に感謝します。Mew を OS/2 で動かす努力とたくさんのテストをしてくれる奥西
藤和さんにお礼を申し上げます。Mew が Win95/WNT で動くようになったのは、
主に北口修一さんと山口修平さんの努力によるところが大きいです。Mew が 
XEmacs で楽しいのは、寺西裕一さんのおかげです。
@end ifset
@ifset us
My deep gratitude goes to Jun'ichiro Ito, Yoshiaki Kasahara, Motonori
Nakamura, Yoshinari Nomura, Kazunori Nishi, and Hidenori Ohta for their
help to create IM. My thank also goes to Kazumasa Utashiro for making IM
much faster. I would acknowledge to Fujikazu Okunishi for his
contribution on OS/2 area and his comprehensive tests. Significant works
to run Mew on Win95/WNT were mostly accomplished by Shuichi Kitaguchi
and Shuhei Yamaguchi. Yuuichi Teranishi made Mew funny on XEmacs.
@end ifset

@ifset jp
Mew に対し献身的な白井秀行さん、鯉江英隆さん、そして後藤俊一さんに感謝し
ます。
@end ifset
@ifset us
I would like to express my thanks to devoted users: Hidetaka Koie,
Hideyuki Shirai, and Shun-ichi Goto.
@end ifset

@ifset jp
Mew はたくさんの人の貢献の上に成り立っています。ここに名前を挙げていない
方にも心から感謝しています。著者はなにぶん多忙ですので、すべての電子メー
ルに答える時間が取れません。返事が帰って来なかった人は、本当にすみません
でした。
@end ifset
@ifset us
Mew is supported by contributions from many users. I'd like to express
hearty thanks to those who are not listed here. The author is hell-of-a
busy guy, so he cannot afford to respond all Emails. I'm so sorry if you
have not received my reply.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Copyright
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Copyright, Author, Ack, Top
@ifset jp
@chapter 著作権について
@end ifset
@ifset us
@chapter Copyright
@end ifset

@ifset jp
Mew は以下の著作権に従います。

Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999 Mew developing team.@*
All rights reserved.

変更の有無にかかわらず、ソースおよびバイナリ形式の再配布および利用は、以
下の条件を満たしていれば、これを許可する。

@enumerate
@item
ソース・コードの再配布は、上記の著作権表示、この条件項目、および、以下の
免責事項を保存しなければならない。
@item
バイナリ形式の再配布は、上記の著作権表示、この条件項目、および、以下の免
責事項を、その配布に付随する説明書、あるいはその他の資料のいずれかに明記
しなければならない。
@item
前もって特別に許諾を得ない限り、このソフトウェアから派生した製品の推奨や
販売促進のために、このチーム名と貢献者達の名前を利用してはならない。
@end enumerate

このソフトウェアは「このままの形で」提供され、明示的あるいは言外の保証
は、商用利用および特定目的への適合に対する言外の保証も含み、またこれら
だけに限らず、存在しない。たとえ以下のような損害の可能性を示唆されてい
たとしても、どのような形にしろこのソフトウェアの利用から発生した問題に
おいて、このチームと貢献者達は、(代替製品やサービスの調達; 利用権、デー
タ、あるいは利益の損失; あるいは営業の中断を含む、またこれらだけに限ら
ず)直接的に、間接的に、偶然に、特別に、懲罰上、あるいは、必然的に生じ
てしまった損害に対し責任はなく、いかなる責任理論上でも契約の有無に係わ
らず厳密な責任はなく、また(過失あるいはその他を含む)不法行為に対しても
責任はない。
@end ifset
@ifset us
Mew conforms the following copyright.

Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999 Mew developing team.@*
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

@enumerate
@item
Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
@item
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
@item
Neither the name of the team nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
@end enumerate

THIS SOFTWARE IS PROVIDED BY THE TEAM AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE TEAM OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@end ifset

@ifset jp
CD ROM に入れて配布したいという方は、できるだけ教えて下さい。教えてくれ
なくても怒りませんが、教えて頂けるとありがたいです。配布を断ったことは
ありません。
@end ifset
@ifset us
If you wish to distribute Mew in CD or something, please let me know. I
do not go mad even if you don't tell me but I'm very grad if you do so.
I have not declined requirements.
@end ifset

@ifset jp
この Info の著作権は、著者に属します。配布、利用共に自由ですが、無保証で
す。また、この Info から発生した被害に対し、著者は一切責任を負いません。
@end ifset
@ifset us
The copyright of this Info belongs to the author. It is granted to copy,
modify, redistribute this Info but no warranty.
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Author
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Author, Terminology, Copyright, Top
@ifset jp
@chapter 著者紹介
@end ifset
@ifset us
@chapter About the author
@end ifset

Kazuhiko YAMAMOTO // Kazu
        
@ifset jp
山本和彦 // かず(くん)
@end ifset
        
@ifset jp
1970年、南を虹の松原を湛える海岸、東をウグイが泳ぐ川、北と西をなだらかな
山に囲まれる山口県光市に生まれる。中学生のときに映画「ウォーゲーム」を見
てセキュリティに関心を持つ。自然と遊びながら、高校まで光市で過ごす。
@end ifset
@ifset us
In 1970, Kazu was born at Hikari city, Yamaguchi prefecture, Japan,
where is surrounded by a beach with "Rainbow pine forest" in the south,
by an abundant river in the east, by gentle mountains in the north and
the west. When he was a junior high-school student, he watched the movie
"War Game", which made him interested in computer security. He had been
grown with beautiful nature at Hikari city until high school.
@end ifset

@ifset jp
1988年、九州大学工学部電気系入学のため福岡へ。都会の殺伐さ、汚れた海、言
葉の違いに苦しみながらも卒業まで至る。3年生のときに初めて電子メールに触
れ、4年生のころにインターネットに惹かれていく。Sun に入社渡米を試みるが、
不幸にも米国のビザ発行ポリシーが厳しくなった時期と重なり、失敗。
@end ifset
@ifset us
He was moved to Fukuoka city to take a course of electronic engineering
at Kyushu university in 1988. Despite of pain from the urban city, the
dirty ocean, and the language barrier, he somehow graduated from the
university. Email appeared to him in the third year and the Internet
fascinated him through the fourth. The trial to be a employee of Sun
Microsystems to visit the US failed because US' visa policy became
severe at that time.
@end ifset

@ifset jp
1992年、九州大学大学院工学研究科情報工学専攻へ進学。本格的にインターネッ
トの研究に従事。経路制御を専門とする。セキュリティの普及活動を開始。修士
2年の春に、書く書くと言ってなかなか書かなかった「ハッピーネットワーキン
グ」をリリース。
@end ifset
@ifset us
He took a course of Computer Science and Communication Engineering at
the graduate school of Kyushu university in 1992. The specialty was
Internet routing. He started to make security knowledge and technology
widely spread to the Japan portion of the Internet community. He finally
released "Happy Networking", one of the most popular beginner's guide of
the Internet, in the spring of 1993.
@end ifset

@ifset jp
1994年、奈良先端科学技術大学院大学に助手として就任。約4年の大学教官生活
中に、Mew の開発に取り組む。「若いうちにプログラムを書こう、教育は歳をとっ
てからもできるよね」という結論に至り、1998年 IIJ 技術研究所に新たな研究
環境を求めた。
@end ifset
@ifset us
He moved to Nara Institute of Science and Technology as a research
associate in 1994. During the four years of faculty life, he developed
Mew. Since he reached a conclusion that he should concentrate on
programming in young days and it's possible to educate students when he
will became older, he moved to IIJ Research Laboratory in 1998.
@end ifset

@ifset jp
研究分野 :: メッセージ・システム、IP version 6@*
ひとこと :: 「うまく説明できないものは、本質的に優れていない」@*
ふたこと :: 「優しいものが優れている」
@end ifset
@ifset us
Research areas: Messaging system, IP version 6@*
Favorite words: "Challenges start everyday."@*
Favorite words: "Living is learning. Giving is taking."
@end ifset

Email: Kazu@@Mew.org@*
URL: http://www.mew.org/~kazu/@*
PGP fingerprint:  6B 63 38 88 67 5E 96 8E  CE A4 62 73 3F 11 64 94@*

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Terminology
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Terminology, Bib, Author, Top
@ifset jp
@chapter 用語集
@end ifset
@ifset us
@chapter Terminology
@end ifset

@ifset jp
Mew で使う単語をまとめます。
@end ifset
@ifset us
Here is terminology for Mew.
@end ifset

@table @samp
@ifset jp
@item フォルダ
受け取ったメッセージを保存するファイルやディレクトリ
@item Summary モード
メッセージの一覧を表示するモード
@item Message モード
テキストメッセージの内容を表示するモード
@item Draft モード
メッセージを書いたり、作成したりするモード
@item MIME
本文にテキスト以外のオブジェクトを格納したり、ヘッダに非 ASCII 文字を挿
入したりできる規格。MIME を使えば、本文にテキスト、絵、音声などを同時に
取り込め、また、Subject: に日本語を書ける。Multipurpose Internet Mail
Extensions の略称で、「多目的メール」と呼ぶことがある。
詳しくは、@xref{MIME} を参照。
@item PGP
Phil Zimmermann 氏が作成した暗号メッセージや電子署名を実現するプログラム。
Pretty Good Privacy の略。
@item ニュース
ネットニュース、あるいは、USENET ニュースのこと。
@item メッセージ
電子メールやニュース、あるいは、MIME などの総称。インターネットメッセー
ジの省略語。
@end ifset
@ifset us
@item folder
Directories to save received messages.
@item Summary mode
A mode to display a list of messages.
@item Message mode
A mode to display a content of a text message.
@item Draft mode
A mode to write or compose a message.
@item MIME
A format to contain objects other than text in a body and to embed
non-alphabetical words in a header. With MIME you can enclose text
files, picture files and audio files at the same time, and insert your
first language such as Japanese into Subject:. It is an acronym of
"Multipurpose Internet Mail Extensions". For more information, please
refer to @xref{MIME}.
@item PGP
A program to accomplish encrypted message and digital signature created
by Phil Zimmermann. An acronym for "Pretty Good Privacy".
@item composer
An interface to write or compose a message. Regarding with Mew, it is
Draft mode.
@item viewer
An interface to read or view messages. As far as Mew is concerned, it is
Summary mode and Message mode.
@item Email
A short word for "electronic mail".
@item NetNews
It was also known as "USENET news".
@item message
An integrated concept of Email, NetNews, MIME, etc. A short word of
"Internet message".
@end ifset
@end table

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Bib
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Bib, Variable Index, Terminology, Top
@ifset jp
@chapter 参考文献
@end ifset
@ifset us
@chapter Bibliography
@end ifset

@ifset jp
ここでは、参考文献を紹介します。RFC(Request For Comments) は、インターネッ
トで知識を共有するために書かれた文献です。たとえば、以下のサイトから入手
できます。
@end ifset
@ifset us
This section shows you bibliography. RFC(Request For Comments) is a
series of documents to share our knowledge about the Internet Protocol
suite. It is available, for instance, from the following repository.
@end ifset

@example
ftp://ftp.isi.edu/in-notes/
@end example

@ifset jp
インターネットでのマナーは、以下の RFC を読んで学んで下さい。
@end ifset
@ifset us
Please read the following RFC to learn manner on the Internet.
@end ifset

@itemize @bullet
@item
S. Hambridge, "Netiquette Guidelines", RFC 1855, 1995
@end itemize

@ifset jp
昔のテキスト・メールの書式や配送の仕組みは以下の RFC を参照しましょう。
@end ifset
@ifset us
To understand the format of good old text Email and the delivery system,
please refer to:
@end ifset

@itemize @bullet
@item
D. Crocker, 
"Standard for the format of ARPA Internet text messages", 
RFC 822, 1982
@item
J. Postel, 
"Simple Mail Transfer Protocol", 
RFC 821, 1982
@end itemize

@ifset jp
MIME については、以下の RFC を読んで下さい。
@end ifset
@ifset us
MIME is specified in the following RFCs.
@end ifset

@itemize @bullet
@item
N. Freed and N. Borenstein, "Multipurpose Internet Mail Extensions
(MIME) Part One: Format of Internet Message Bodies", RFC 2045, 1996.
@item
N. Freed and N. Borenstein, "Multipurpose Internet Mail Extensions
(MIME) Part Two: Media Types" RFC 2046, 1996.
@item
K. Moore, "MIME (Multipurpose Internet Mail Extensions) Part Three:
Message Header Extensions for Non-ASCII Text", RFC 2047, 1996.
@item
N. Freed, J. Klensin and J. Postel, "Multipurpose Internet Mail
Extensions (MIME) Part Four: Registration Procedures", RFC 2048, 1996.
@item 
N. Freed and N. Borenstein, "Multipurpose Internet Mail Extensions
(MIME) Part Five: Conformance Criteria and Examples", RFC 2049, 1996.
@item
R. Troost, S. Dorner, K. Moore, "Communicating Presentation Information
in Internet Messages: The Content-Disposition Header Field", RFC 2183,
1997.
@item
N. Free and K. Moore, "MIME Parameter Value and Encoded Word Extensions:
Character Sets, Languages, and Continuations", RFC 2231, 1997.
@end itemize

@ifset jp
ニュースの書式と配送プロトコルは、以下の RFC で定義されています。
@end ifset
@ifset us
You can find the format and distribution protocol of NetNews in the
following RFCs.
@end ifset

@itemize @bullet
@item
M. Horton and R. Adams, "Standard for interchange of USENET messages",
RFC 1036, 1987.
@item
B. Kantor and P. Lapsley, "Network News Transfer Protocol: A Proposed
Standard for the Stream-Based Transmission of News", RFC 977, 1986.
@end itemize

@ifset jp
PGP を学ぶなら、以下の書籍がいいでしょう。
@end ifset
@ifset us
The following document contains concise yet comprehensive explanations
about PGP.
@end ifset

@itemize @bullet
@item
PGP: Petty Good Privacy, Simson Garfinkel, O'Reilly & Associates, Inc,
1995. 
@ifset jp
(訳書:: "PGP 暗号メールと電子署名", Simson Garfinkel 著, 山本和彦
監訳, 株式会社オライリージャパン, 1996.)
@end ifset
@end itemize

@ifset jp
PGP と MIME の統合については、以下を参照して下さい。
@end ifset
@ifset us
For details of an integration of PGP and MIME, please refer to:
@end ifset

@itemize @bullet
@item
J. Galvin, S. Murphy, S. Crocker and N. Freed, "Security Multiparts for
MIME: Multipart/Signed and Multipart/Encrypted", RFC 1847, 1995.
@item
M. Elkins, "MIME Security with Pretty Good Privacy (PGP)", RFC 2015,
1996.
@end itemize

@ifset jp
メールの基礎知識は、Mew ニュースレターにまとめられています。
http://www.Mew.org/ を参照して下さい。
@end ifset

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c      Variable Index
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@node Variable Index,  , Bib, Top
@ifset jp
@chapter 変数索引
@end ifset
@ifset us
@chapter Variable Index
@end ifset

@printindex vr

@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@c 	Tailer
@c %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@shortcontents
@contents
@bye
