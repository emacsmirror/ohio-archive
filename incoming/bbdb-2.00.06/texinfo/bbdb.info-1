This is bbdb.info, produced by Makeinfo version 3.12h from bbdb.texinfo.

   This file documents the Insidious Big Brother Database

   This is edition $Revision: 1.20 $ of the BBDB User Manual for BBDB
version 2.00.03.

   Copyright (c) 1991-1994 Jamie Zawinski <jwz@netscape.com> Copyright
(c) 1997-1998 Matt Simmons <simmonmt@acm.org>


File: bbdb.info,  Node: Top,  Next: Installation,  Up: _

BBDB
****

   BBDB is a rolodex-like database program for GNU Emacs.  BBDB stands
for Insidious Big Brother Database, and is not, repeat, _not_ an
obscure reference to the Buck Rogers TV series.

   It provides the following features:

   * Integration with mail and news readers, with little or no
     interaction by the user:

        * easy (or automatic) display of the record corresponding to
          the sender of the current message;

        * automatic creation of records based on the contents of the
          current message;

        * automatic addition of data to arbitrary fields of the record
          corresponding to the sender of the current message.

   * Listing all records which match a regular expression;

   * Listing all records which match a regular expression in a
     particular field (`company' or `notes,' for example);

* Menu:

* Installation::		Installation
* The BBDB::		        Overview
* BBDB Mode::			BBDB Mode
* Interfaces::			Interfaces to various readers
* Reader-specific Features::    Features only available to specific readers
* Other Packages::              Using the BBDB with other packages
* Options::			Options
* Utilities::                   Utilities
* Internals::                   BBDB Internals
* Mailing Lists::		The BBDB mailing lists
* Changes::                     New in this version
* The Latest Version::		Where to Get It
* The Future::                  Known Bugs, the TODO list and EOL statements
* Thanks::			to the Ministry of Bugs

* Concept Index::		Concept Index
* Variable Index::		Variable Index


File: bbdb.info,  Node: Installation,  Next: The BBDB,  Prev: Top,  Up: Top

Installation
============

   This program consists of several groups of files, organized by
directory:

          lisp     - the main program code for the BBDB
          tex      - TeX support files for *Note bbdb-print::, the BBDB
                     printing utility
          texinfo  - the documentation files for the BBDB
          utils    - miscellaneous external utility programs

* Menu:

* General Prerequisites::       General BBDB requirements

File Installation
* Normal User::                 "Normal" Installations
* XEmacs Package::              Installing as an XEmacs package

Initial Configuration
* Initial Configuration::       How to initially set up the BBDB


File: bbdb.info,  Node: General Prerequisites,  Next: Normal User,  Prev: Installation,  Up: Installation

General Prerequisites
---------------------

   Various parts of the BBDB require extra packages to be available
that are not part of the BBDB distribution.  Please note that with one
exception no extra packages (beyond those which ship with both GNU
Emacs and XEmacs) are required for the use of BBDB core
functionality.(1)  This one exception applies to XEmacs 20.5 users -
the `xemacs-base' package must be installed for the correct operation
of the core BBDB functionality.  The table below lists the requirements
of the various portions of the BBDB.  Please note that the absence of
any of the below optional packages will not affect core BBDB
functionality.

BBDB file           Package needed   GNU 19.34   GNU 20.2   XEmacs   XEmacs
                                                            >=20.4    20.5
`bbdb-ftp'          EFS or               B           B         B        P
                    Ange-FTP                                         
`bbdb-gnus'         Gnus[1]              B           B         B        P
`bbdb-mhe'          MH-E                 B           B         B        P
`bbdb-reportmail'   Reportmail                                 B      P[2]
`bbdb-sc'           Supercite            B                     B        P
`bbdb-srv'          `gnuserv' and                              B        B
                    `itimer'                                         
`bbdb-vm'           VM                                         B        P
`bbdb-w3'           `browse-url'         B           B         B      P[3]

NOTES:
  1. The three year old GNUS mail/newsreader should still work.  Please
     keep in mind that you have a relatively recent Emacs (GNU 19.34 or
     later, XEmacs 19.15 or later), you are probably using Gnus.

  2. As of this writing, Reportmail is available as part of the
     `edit-utils' package.

  3. As of this writing, `browse-url' is available as part of the
     `mail-lib' package.

   Please also note that the XEmacs package locations are as of this
writing.  As the XEmacs 20.5 package system is still in development, the
locations may change without warning.

   ---------- Footnotes ----------

   (1) "Core Functionality" is defined as the parts of the BBDB used to
implement basic record creation (`M-x bbdb-create') and searching (`M-x
bbdb').


File: bbdb.info,  Node: Normal User,  Next: XEmacs Package,  Prev: General Prerequisites,  Up: Installation

Normal User Installation
------------------------

Byte Compiling the Lisp files
-----------------------------

   First, you need to byte-compile the appropriate BBDB Lisp files.
While this is in theory an optional step, it is virtually required in
practice due to speed reasons.

   In order to successfully compile the BBDB, the build process needs
to know the location of the various optional packages.  If the
directories containing these optional packages are in the default Emacs
search path (the `load-path' variable), no other changes need be made
for the build process to complete successfully.

   If the optional packages are not in the default search path, the
build process will not find them unless explicitly told of their
location(s).  To tell the build process where to find Gnus, MH-E,
and/or VM, set the `GNUSDIR', `MHEDIR', and/or `VMDIR' variables,
respectively, in `Makefile'.  To tell the build process where to find
any other package(s), add the directories containing the lisp files for
the package(s) to the `OTHERDIR' variable in `Makefile'.  If multiple
directories are to be added, they should be separated by spaces, and
should not be quoted.  For example, to add the
`/p/local/elisp/footnote' and `/p/local/elisp/sc' directories, set
`OTHERDIR' as follows:

         `OTHERDIR=/p/local/elisp/footnote /p/local/elisp/sc'

   After setting the paths (if necessary), run one of the following
commands:

          `make bbdb'  - Build the core, mailer independent, components
          `make gnus'  - Core components plus `Gnus' support
          `make mhe'   - Core components plus `MH-E' support
          `make rmail' - Core components plus `RMAIL' support
          `make vm'    - Build the core components with `VM' support
          `make all'   - Core components plus support for all mailers
                              listed above

   You can also combine the above `make' commands.  For example, to
build the BBDB with support for `Gnus' and `VM', you can do so by
typing:

     make gnus vm

Moving the files to their final destination
-------------------------------------------

Lisp files
..........

   As stated above, the `lisp' subdirectory contains the Emacs Lisp
source files for the BBDB.  Therefore, these files must be in the Emacs
`load-path'.  There are several ways of doing this, three of which are
described below:

   * Add the `lisp' directory from the source distribution to the
     `load-path'.  This will allow you to run the BBDB in-place.  This
     method is recommended for normal users or BBDB developers,
     especially if disk usage is an issue.  It is not recommended for
     site-wide installations.

   * Link the `lisp' directory into your `site-lisp' directory.  This is
     for a site-wide installation, but it is subject to the following
     caveat.  If you link the `lisp' directory into `site-lisp', you
     will make life more difficult for yourself down the road, as you
     will not be able to make changes to the source directory (new
     versions, patches, etc) without having an effect on other users
     who now depend on it.  This directory will automatically be added
     to the `load-path' when Emacs starts.

   * Make a directory whose sole purpose in life is containing the
     production copies of the BBDB source and byte-compiled source
     files.  Either put this directory under `site-lisp' (or put it
     somewhere else and link it into `site-lisp').  This directory will
     automatically be added to the `load-path' when Emacs starts.  This
     is the best of the three listed here, as it allows for a degree of
     separation between the (possibly changing) source tree and the
     production code.

TeX files
.........

   The `tex' subdirectory contains the TeX support files for
bbdb-print, the BBDB printing utility (*Note bbdb-print::).  The three
support files, `bbdb-cols.tex', `bbdb-print.tex', and
`bbdb-print-brief.tex', must be placed in a directory that is either on
the default TeX search path or is listed in the `TEXINPUTS' environment
variable.  If neither of these two options is taken, TeX will not be
able to process the file output by `bbdb-print'.

texinfo files
.............

   The `bbdb.info' file in this directory contains the documentation
for the BBDB.  This file should either be linked or copied to a
directory on the default path for the `info' program or listed in the
`INFOPATH' environment variable.


File: bbdb.info,  Node: XEmacs Package,  Next: Initial Configuration,  Prev: Normal User,  Up: Installation

XEmacs Package Installation
---------------------------

NOTE: XEmacs packages are currently supported only under XEmacs 20.5.
If you are not running 20.5, you should install the BBDB according to
the instructions in *Note Normal User::.

Byte Compiling the Lisp files
-----------------------------

   The byte-compilation procedure is the same as that used in the Normal
User installation.  See *Note Normal User::.

Moving the files to their final destination
-------------------------------------------

   Support is provided for the automatic installation of the BBDB in an
XEmacs package directory.  Before installation, one or more variables
must be set in the `Makefile' as described below.

`PACKAGEROOT'
     This variable sets the root of the XEmacs package directory.  It is
     required for XEmacs package - the installation will not even begin
     unless this variable is set.

`LINKPATH'
     If this variable is either undefined (commented out) or set to the
     empty string, the `lisp' and `info' directories will be copied into
     `PACKAGEROOT'.  If `LINKPATH' is set, the `lisp' and `info'
     directories will be linked into `PACKAGEROOT'.

`LINKPATH'
     If this variable is either undefined (commented out) or set to the
     empty string, the `lisp' and `info' directories will be linked in
     with the output of `pwd' as the source directory.  If something
     else should be used as the source directory, `LINKPATH' should be
     set to the 'something else'.  If, for example, `pwd' returns
     `/p/local/elisp/bbdb', the `lisp', `info' and `etc' (which will
     include the files distributed in `tex' and `utils') directories
     will be linked in from `/p/local/elisp/bbdb/{lisp,info,etc}'.  If,
     however, you prefer that they be linked in from
     `/usr/local/elisp/bbdb/...', set `LINKPATH' to
     `/usr/local/elisp/bbdb'.  This variable is ignored if `LINKPATH'
     is not set.

   To perform the installation, use the command `make install-pkg'.
This will compile the `lisp/auto-autoloads.el' file and will install
the source and documentation files as indicated by the variables
described above.  The final installation tree will take the following
form:

`$PACKAGEROOT/'

    `etc/'

         `bbdb/'

              `tex/'
                    support files for bbdb-print, copied from the `tex'
                    directory     in the source distribution

              `utils/'
                    miscellaneous utilities, copied from the `utils'
                    directory in     the source distribution

    `info/'

         `bbdb/'
               BBDB documentation files, copied from the `info'
               directory    in the source distribution

    `lisp/'

         `bbdb/'
               BBDB lisp source files, copied from the `lisp' directory
                 in the source distribution     After you install the
package, you should probably redump XEmacs.


File: bbdb.info,  Node: Initial Configuration,  Prev: XEmacs Package,  Up: Installation

Initial Configuration
---------------------

   The simplest way to configure the BBDB is to include the following
forms in your Emacs configuration file:

     `(require 'bbdb)'
     `(bbdb-initialize)'

   Note:  The forms above replace the autoloads needed for previous
versions of the BBDB.

   This will set up the BBDB for basic querying and record manipulation
(the Core Functionality referred to in the Prerequisites section).  It
will not enable any of the mailreader-, newsreader- or other
package-specific BBDB features.  To enable some or all of these
features, the `(bbdb-initialize)' form can be enable as shown below.
Alternatively, the features can be enabled manually as described in the
following sections.

Modifying `(bbdb-initialize)'
-----------------------------

   The `bbdb-initialize' function can be used to enable the various
package-specific BBDB functions.  This feature activation is
accomplished through the passing of symbols which tell the function
which features to activate.  These symbols are outlined below and in the
Emacs documentation for the `bbdb-initialize'(1)

Initialization symbols for mail and news readers
................................................

`gnus'
     Initialize support for Gnus(2).  If you pass the `gnus' symbol,
     you should  probably also pass the `message' symbol.

`mh-e'
     Initialize support for the MH-E mail reader.

`rmail'
     Initialize support for the RMAIL mail reader.

`sendmail'
     Initialize support for sendmail (`M-x mail')

`vm'
     Initialize support for the VM mail reader.(3)

Initialization symbols for other packages
.........................................

`message'
     Initialize support for Message mode (the mail composition program
     included with Gnus).

`reportmail'
     Initialize support for the Reportmail mail notification package.

`sc'
     Initialize support for the Supercite message citation package.
     Additional initialization is required for Supercite to work with
     the  BBDB.  *Note Supercite Prep::.

`w3'
     Initialize support for Web browsers.

Initialization example
......................

   To initialize support for Gnus 5.5, Message mode, Supercite, and Web
browsers, the following forms would be used:

     (require 'bbdb)
     (bbdb-initialize 'gnus 'message 'sc 'w3)

Manual initialization
.....................

   If your initialization needs exceed those provided by
`bbdb-initialize', refer to the following sections for a description of
the procedures necessary for enabling BBDB support for the packages
listed above.  The procedures described are the same as those carried
out by the `bbdb-initialize' function when passed the appropriate
symbols.  That is, the procedure listed in the RMAIL Prep section below
is the same as than executed by `bbdb-initialize' when the `rmail'
symbol is passed.

* Menu:

Mail and News readers:

* Gnus Prep::           Initializing BBDB support for Gnus
* MH-E Prep::           Initializing BBDB support for MH-E
* RMAIL Prep::          Initializing BBDB support for RMAIL
* Sendmail Prep::       Initializing BBDB support for Sendmail
* VM Prep::             Initializing BBDB support for VM

Other packages:

* Message Prep::        Initializing BBDB support for Message mode
* Reportmail Prep::     Initializing BBDB support for Reportmail
* Supercite Prep::      Initializing BBDB support for Supercite
* Web Browser Prep::    Initializing BBDB support for Web Browsers

   ---------- Footnotes ----------

   (1) This documentation can be accessed by typing `C-h f
bbdb-initialize RET'.

   (2) If you are using GNUS (not Gnus),  and if your GNUS version is
3.14 or older, use the `Gnus' (note  the capitalization) symbol.

   (3) For the VM  initialization to work properly, you must either call
`bbdb-initialize' with the `vm' symbol from within your VM
initialization file (`~/.vm'), or you must call  `bbdb-insinuate-vm'
manually from within your VM initialization  file.


File: bbdb.info,  Node: Gnus Prep,  Next: MH-E Prep,  Prev: Initial Configuration,  Up: Initial Configuration

Initializing BBDB support for Gnus
..................................

   To take advantage of the Gnus features of the BBDB, add one of the
following forms to your Emacs configuration file:

For Gnus 3.14 or older:

   `(add-hook 'gnus-Startup-hook 'bbdb-insinuate-gnus)'

For Gnus 3.15 or newer:

   `(add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)'

   `bbdb-insinuate-gnus' adds bindings for the default keys to Gnus and
configures Gnus to notify the BBDB when new messages are loaded.  This
notification is required if the BBDB is to be able to display BBDB
entries for messages displayed in Gnus.


File: bbdb.info,  Node: MH-E Prep,  Next: RMAIL Prep,  Prev: Gnus Prep,  Up: Initial Configuration

Initializing BBDB support for MH-E
..................................

   To take advantage of the MH-E features of the BBDB, add the
following form to your Emacs configuration file:

     (add-hook 'mh-folder-mode-hook 'bbdb-insinuate-mh)

   `bbdb-insinuate-mh' adds bindings for the default keys to MH-E and
configures MH-E to notify the BBDB when new messages are loaded.  This
notification is required if the BBDB is to be able to display BBDB
entries for messages displayed in MH-E.


File: bbdb.info,  Node: RMAIL Prep,  Next: Sendmail Prep,  Prev: MH-E Prep,  Up: Initial Configuration

Initializing BBDB support for RMAIL
...................................

   To take advantage of the RMAIL features of the BBDB, add the
following form to your Emacs configuration file:

     (add-hook 'rmail-mode-hook 'bbdb-insinuate-rmail)

   `bbdb-insinuate-rmail' adds bindings for the default keys to RMAIL
and configures RMAIL to notify the BBDB when new messages are loaded.
This notification is required if the BBDB is to be able to display BBDB
entries for messages displayed in RMAIL.


File: bbdb.info,  Node: Sendmail Prep,  Next: VM Prep,  Prev: RMAIL Prep,  Up: Initial Configuration

Initializing BBDB support for Sendmail
......................................

   To take advantage of send-mail-mode (the one invoked with `M-x
mail') features of the BBDB, add the following form to your Emacs
configuration file:

     (add-hook 'mail-setup-hook 'bbdb-insinuate-sendmail)

   `bbdb-insinuate-sendmail' enables auto-completion in send-mail-mode.


File: bbdb.info,  Node: VM Prep,  Next: Message Prep,  Prev: Sendmail Prep,  Up: Initial Configuration

Initializing BBDB support for VM
................................

   To take advantage of the VM features of the BBDB, add the following
form to your `~/.vm' file:

     `(bbdb-insinuate-vm)'

   `bbdb-insinuate-vm' adds bindings for the default keys to VM and
configures VM to notify the BBDB when new messages are loaded.  This
notification is required if the BBDB is to be able to display BBDB
entries for messages displayed in VM.


File: bbdb.info,  Node: Message Prep,  Next: Reportmail Prep,  Prev: VM Prep,  Up: Initial Configuration

Initializing BBDB support for Message mode
..........................................

   To allow the BBDB to be used in Message mode, add the following form
to your Emacs initialization file:

     `(bbdb-insinuate-message)'

   `bbdb-insinuate-message' adds a binding for `M-TAB' to Message mode.
This will enable completion of addressees based on BBDB records. See
*Note Using Message Mode:: for more details on the operation of Message
mode BBDB record completion.


File: bbdb.info,  Node: Reportmail Prep,  Next: Supercite Prep,  Prev: Message Prep,  Up: Initial Configuration

Initializing BBDB support for Reportmail
........................................

   To allow the Reportmail package to report information from BBDB
records for new mail, add the following form to your Emacs
initialization file:

     `(bbdb-insinuate-reportmail)'

   `bbdb-insinuate-reportmail' adds to the `display-time-get-field'
function to allow access to BBDB records during new mail information
display.  See *Note Using Reportmail:: for more details on the
operation of Reportmail with the BBDB.


File: bbdb.info,  Node: Supercite Prep,  Next: Web Browser Prep,  Prev: Reportmail Prep,  Up: Initial Configuration

Initializing BBDB support for Supercite
.......................................

   To allow the BBDB to assist in the storage of Supercite citations,
add the following form to your Emacs initialization file:

     `(bbdb-insinuate-sc)'

   `bbdb-insinuate-sc' adds BBDB functions to two Supercite hooks -
`sc-post-hook' and `sc-attribs-postselect-hook'.  See *Note Using
Supercite:: for more details on the operation of Supercite citation
management using the BBDB.

   Three other Supercite variables must be set/modified to allow the
BBDB to work with it.  These variables are not automatically set as it
would be impossible to reliably set them without interfering with other
user customizations.  The modifications are:

`sc-preferred-attribution-list'
     `"sc-consult"' should be added to the list.  An example
     configuration is:

          (setq sc-preferred-attribution-list
            '("sc-lastchoice" "x-attribution" "sc-consult"
              "initials" "firstname" "lastname"))

`sc-attrib-selection-list'
     The following form should be added to `sc-attrib-selection-list':

                '(("sc-from-address"
          	 ((".*" . (bbdb/sc-consult-attr
          		   (sc-mail-field "sc-from-address"))))))

`sc-mail-glom-frame'
     The following form should be added to `sc-mail-glom-frame', to
     allow the retrieval of the name of a person who is a) in the BBDB
     and b) has only included their net address in the message in
     question.

            ("^$"  (progn (bbdb/sc-default)
                      (list 'abort '(step . 0))))

     An example configuration is as follows:

     `(setq sc-mail-glom-frame'
     `   '((begin                        (setq sc-mail-headers-start (point)))'
     `     ("^x-attribution:[ \t]+.*$"   (sc-mail-fetch-field t) nil t)'
     `     ("^\\S +:.*$"                 (sc-mail-fetch-field) nil t)'
     `     ("^$"                         (progn (bbdb/sc-default)'
     `                                   (list 'abort '(step . 0))))'
     `     ("^[ \t]+"                    (sc-mail-append-field))'
     `     (sc-mail-warn-if-non-rfc822-p (sc-mail-error-in-mail-field))'
     `     (end                          (setq sc-mail-headers-end (point)))))'

   The above is also documented in `bbdb-sc.el'.  The
`bbdb/sc-setup-variables' function has been provided as an example for
Supercite variable initialization.  Please note that while
`bbdb/sc-setup-variables' makes every attempt to safely configure the
Supercite variables, it will not always work.  Specifically, the
variables `sc-attrib-selection-list' and `sc-mail-glom-frame' will not
be overridden if they have already been defined.


File: bbdb.info,  Node: Web Browser Prep,  Prev: Supercite Prep,  Up: Initial Configuration

Initializing BBDB support for Web Browsers
..........................................

   To allow URLs to be added to BBDB records, add the following form to
your Emacs initialization file:

     `(bbdb-insinuate-w3)'

   `bbdb-insinuate-w3' adds the definition of `:' to the W3 keymap.

   The other `bbdb-w3' functions, specifically the passing of URLs from
BBDB records to Web browsers, do not require initialization within the
BBDB.  They do, however, require the configuration of the `browse-url'
package so it knows to which Web browser URLs are to be passed.  For
more details on the operation of `bbdb-w3', see *Note Using Web
Browsers::.


File: bbdb.info,  Node: The BBDB,  Next: BBDB Mode,  Prev: Installation,  Up: Top

The BBDB
========

   This section discusses the basics of the BBDB - an overview of the
database's layout, and a discussion of the basic BBDB manipulation
commands.

   The database itself lives in a file which is named by the variable
`bbdb-file'.  If this variable is not set, the database is assumed to
be in `~/.bbdb'.

* Menu:

* Database Fields::             Description of database fields
* Basic Searching::             Basic database searching commands
* Advanced Searching::          Advanced database searching commands
* Manual Record Addition::      Adding records by hand


File: bbdb.info,  Node: Database Fields,  Next: Basic Searching,  Prev: The BBDB,  Up: The BBDB

Database Fields
---------------

   The database is organized as a set of records, where each record
corresponds to one person or organization.  Each record has several
fields, and each field is of one of several types.  Below, the built-in
types are listed, followed by a description of how and why some types
can be used more than once in a single record:

Type    Description                          Notes
`name'  The name of this person, or none if  Single value, single
        the record corresponds to an         instance.
        organization.                        
`company'The name of this person's            Single value, single
        organization, or none.               instance.
`AKA'   A list of other names for this       Multiple values through
        person.                              commas.
`net'   A list of this person's network      Multiple values through
        addresses.                           commas.
`address'A list of postal (physical)          Multiple values through
        addresses for this person.           multiple occurences.
`phone' A list of telephone numbers for      Multiple values through
        this person.                         multiple occurences.
`notes' Random commentary.                   Multiple values through
                                             multiple occurences.

   The field types listed above can be classified into four categories,
as indicated by the comments in the `Notes' column.

   Field types marked as "Single value, single occurrence" may only
occur once per record.  Each occurrence can only have a single value.
For example, there will be only one field of type `name' in a record.
It will be named `name', and will contain a single value (the person's
name).

   The types marked as "Multiple values through commas" are essentially
the same as the single value, single occurrence field types, but with
one crucial difference: they can contain multiple values in the form of
a comma-separated list.  So, for example, while a `name' field with a
value of "foo, bar" would be treated as if it contained the single value
"foo, bar", a `net' field with the same data would be thought of as
having two separate values - "foo" and "bar".  As in the single
occurrence, single value field types, there will be only one occurrence
of each "Multiple values through commas" field type, and the occurrence
will have the same name as the type.

   The "Multiple values through multiple occurrences" field type is the
most flexible of the four listed here.  There can be multiple
occurrences of each type.  This type necessarily does not have the name
restriction imposed by the previous two types.  For example, there can
be multiple fields of the `address' type, none of which have to be
named `address'.  One could be named `home', and the other could be
named `work'.

   Special properties of the `notes' field type: All user-defined
fields that don't fit into the other predefined field types (`name',
`company', `AKA', `net', `address', and `phone') will be created as a
`notes'-type field.  In addition, several of the user-defined field
names are "special".  That is, the BBDB treats the values of these
"special" fields differently than it does other user-defined fields.
The "special" fields are:

`attribution'
     (Available only when the Supercite-specific BBDB functions have
     been enabled) Used for the storage of Supercite attributions.  For
     initialization details, see *Note Supercite Prep::.  For usage
     details, see *Note Using Supercite::.  The field used can be
     changed by changing the value of `bbdb/sc-attribution-field'.

`aka'
     Used to store non-primary names associated with a given record.

`face'
     (XEmacs only) Used for the storage of image data.  This data is to
     be in the format output by `compface', and commonly found in
     `X-Face:' headers in messages.  If face support has been compiled
     into XEmacs, the image contained in the `face' header will be
     displayed when the record is viewed.

`finger-host'
     Address used in place of the listed net address for fingering the
     entity indicated by the record. *Note BBDB Mode::.  The field used
     can be changed by changing the value of `bbdb-finger-host-field'.

`gnus-score'
     Gnus scoring adjustment for this person.  For initialization
     details, see *Note Gnus Prep::.  For usage details, see *Note Gnus
     Features::. The field used can be changed by changing the value of
     `bbdb/gnus-score-field'.

`mail-alias'
     Value used instead of `name' for completion.  *Note Mail Sending
     Interfaces::.

`mail-name'
     (Available only when the Reportmail-specific BBDB functions have
     been enabled)  Used for the storage of non-default names to be
     used in the reporting of new mail by Reportmail.  For
     initialization details, see *Note Reportmail Prep::.  For usage
     details, see *Note Using Reportmail::.

`mark-char'
     The field containing the character to be used for marking a given
     poster in the Gnus Summary Buffer.  For usage details, see *Note
     Gnus Summary Buffer::.

`tex-name'
     The value of this field is used in place of the `name' field when
     printing the database using `bbdb-print'.  *Note bbdb-print::.

`www'
     This field contains the URL assocated with the BBDB record.
     Common uses are with `bbdb-snarf' (*note bbdb-snarf::.) and the
     BBDB/Web Browser functionality (for initialization details, see
     *Note Web Browser Prep::.  For usage details, see *Note Using Web
     Browsers::).


File: bbdb.info,  Node: Basic Searching,  Next: Advanced Searching,  Prev: Database Fields,  Up: The BBDB

Basic searching commands
------------------------

   You can list the contents of the database with the command
`M-x bbdb'.  You will be prompted for a regular expression, and all
records which match that regexp in the name, company, network address,
or any notes fields will be displayed.

   A narrower search may be made by using the commands `bbdb-name',
`bbdb-company,' `bbdb-net,' or `bbdb-notes'.  These commands limit
their searches to the name, company, email address, and notes fields,
respectively.  If these commands are given a prefix argument, the
listing displayed will be one line per entry; otherwise, the full
database entry will be shown on multiple lines.

   The functions described above are predefined to certain keys in the
`*BBDB*' buffer.  *Note BBDB Mode:: for more details.

   The `bbdb-notes' command will prompt for the notes field to search
(`RET' for all).  In this way you can limit your searches to the
contents of one particular user-defined notes field.  (You can add
user-defined fields with the `bbdb-insert-new-field' command; *Note
BBDB Mode::.)


File: bbdb.info,  Node: Advanced Searching,  Next: Manual Record Addition,  Prev: Basic Searching,  Up: The BBDB

Advanced searching commands
---------------------------

   The following functions can be used to search for records based on
creation and/or modification dates.  These functions will match records
that have `timestamp' and/or `creation-date' fields (as appropriate.
*Note Predefined Hooks:: for more information on these fields, which
are created by default.

`bbdb-timestamp-older'
     Display all records modified before a given date.  If this
     function is called interactively, it will prompt for a date.  If
     it is being called non-interactively, the date should be provided
     as a string in `yyyy-mm-dd' format.

`bbdb-timestamp-newer'
     Display all records modified after a given date.  If this function
     is called interactively, it will prompt for a date.  If it is
     being called non-interactively, the date should be provided as a
     string in `yyyy-mm-dd' format.

`bbdb-creation-older'
     Display all records created before a given date.  If this function
     is called interactively, it will prompt for a date.  If it is
     being called non-interactively, the date should be provided as a
     string in `yyyy-mm-dd' format.

`bbdb-creation-newer'
     Display all records created after a given date.  If this function
     is called interactively, it will prompt for a date.  If it is
     being called non-interactively, the date should be provided as a
     string in `yyyy-mm-dd' format.

`bbdb-creation-no-change'
     Display all records that have not been changed since creation.


File: bbdb.info,  Node: Manual Record Addition,  Prev: Advanced Searching,  Up: The BBDB

Manual record addition
----------------------

   There are several ways to add new entries to the Insidious Big
Brother Database; the most straightforward is to use `M-x bbdb-create',
which will prompt you for all relevant information.  However, the
easiest way is to allow them to be added automatically by one of the
mail or news-reading interfaces (*Note Interfaces::).


File: bbdb.info,  Node: BBDB Mode,  Next: Interfaces,  Prev: The BBDB,  Up: Top

BBDB Mode
=========

Functions bound to keys in BBDB Mode
------------------------------------

   When the `*BBDB*' buffer is active (either summoned by one of the
commands in the previous section [*Note The BBDB::] or by your mail or
news program), a variety of commands become available for database
manipulation.  Some of the commands listed below take numeric arguments.
These arguments can be generated by entering the number before pressing
the key(s) corresponding to the desired command.  The output (if any) of
the listed commands will be displayed in the `*BBDB*' buffer, and can
be navigated through using the usual cursor motion commands.

`e'
     (`bbdb-edit-current-field')  Edit the field on the current line.
     If the cursor is in the middle of a multi-line field, such as an
     address or comments section, then the entire field is edited, not
     just the current line.

`;'
     (`bbdb-edit-notes')  A shortcut for editing the NOTES field.

`d, C-k'
     (`bbdb-delete-current-field-or-record') Delete the field on the
     current line.  If the current line is the first line of a record,
     the BBDB will, after prompting the user, delete the entire record
     from the database.

`C-o'
     (`bbdb-insert-new-field') Inserts a new field into the current
     record.  You are prompted (with completion) for the type of field
     to insert (phone, address, notes, etc); if the string you type is
     not a known field type, you will be asked whether to add a new
     field with the entered name of type `notes'.

     If you are inserting a new phone-number field, you can control
     whether it is a North American or European phone number by
     providing a prefix argument.  A prefix arg of `^U' means it's to
     be a euronumber, and any other prefix arg means it's to be a a
     structured North American number.  If no prefix argument is
     supplied, the style used is controlled by the variable
     `bbdb-north-american-phone-numbers-p'.

`C-x C-t'
     (`bbdb-transpose-fields') This is like the `transpose-lines'
     command, but it is for BBDB fields.  If the cursor is on a field of
     a BBDB record, that field and the previous field will be
     transposed.

     With non-zero numeric argument ARG, the previous field is moved
     past ARG fields.  With argument 0, the field indicated by point is
     interchanged with the one indicated by mark.

     Both fields must be in the same record, and must be of the same
     basic type (that is, you can use this command to change the order
     in which phone-number fields are listed, but you can't use it to
     make an address appear before a phone number; the order of field
     types is fixed.)

`n, p'
     (`bbdb-next-record', `bbdb-prev-record')  Move to the next and
     previous displayed record, respectively.

`t'
     (`bbdb-elide-record') Toggles whether the current record is
     displayed in a one-line listing, or a full multi-line listing.
     With a numeric argument of 0, the current record will
     unconditionally be made elided; with any other argument, the
     current record will unconditionally be shown expanded.

     If `*t' is used instead of simply `t', then the state of all
     records will be changed instead of just the one at point.  In this
     case, a numeric argument of 0 means that all records will
     unconditionally be made elided; any other numeric argument means
     that all of the records will unconditionally be shown expanded;
     and no numeric argument means that the records are made to be in
     the opposite state of the record under point.

`o'
     (`bbdb-omit-record') Removes the current record from the display,
     but does not delete it from the database; it merely makes it seem
     as if the most recent search had not matched this record.  With a
     numeric argument, omit the next N records.  With a negative
     argument, go backwards.

`m'
     (`bbdb-send-mail') Begin composing mail to the person represented
     by the current record.  The first email address is used.
     Normally, the mail-sending package which is used is determined by
     which mail-reading package is loaded; that is, if MH-E is loaded,
     then `mh-send' will be used; if VM is loaded, then `vm-mail' is
     used; if message is loaded, then it is used; otherwise, `mail' is
     used.  You can override this by setting the variable
     `bbdb-send-mail-style' to one of the symbols `vm', `mh',
     `message', or `mail'.

     If `*m' is used instead of simply `m', then mail will be sent to
     all of the folks listed in the `*BBDB*' buffer instead of just the
     person under point.

     This function does not at present use the facility provided by
     `compose-mail' and `mail-user-agent'.  In a future version of the
     BBDB, it will.

`s, C-x C-s'
     (`bbdb-save-db')  Saves the BBDB file to disk.

`r'
     (`bbdb-refile-record')  Merge the current record into some other
     record; that is, delete the record under point after copying all
     of the data within it into some other record.  this is useful if
     you realize that somehow a redundant record has gotten into the
     database, and you want to merge it with another.

     If both records have names and/or companies, you are asked which
     to use.  Phone numbers, addresses, and network addresses are
     simply concatenated.  The first record is the record under the
     point; the second is prompted for.  Completion behavior is as
     dictated by the variable `bbdb-completion-type'.

`M-d'
     (`bbdb-dial') If you are on a machine with the ability to play
     sounds, this command will play the appropriate tones on the builtin
     speaker to dial the phone number corresponding to the current
     line.  If the point is at the beginning of a record, dial the
     first phone number.  This does not dial the extension.  This also
     does not dial the area code if it is the same as
     `bbdb-default-area-code', unless a prefix argument is given.

     The BBDB comes configured to play sounds on machines running
     Solaris.  If you are on another type of machine, you must set
     `bbdb-sound-player' to a string containing the name of the audio
     file player on your machine.  You must also set `bbdb-sound-files'
     to a vector of arguments to be passed to the program indicated by
     `bbdb-sound-player'.  `bbdb-sound-player' will be called with the
     first element of `bbdb-sound-files' for the digit `0', the second
     for `1', the third for `2', and so on.

    `bbdb-dial-local-prefix'
          Set this to a string of digits if your phone system requires
          you to dial some code to access an outside line.

    `bbdb-dial-long-distance-prefix'
          Set this to a string of digits if your phone system requires
          you to dial some code before dialing a long-distance number
          (one not in your local area code.)

`f'
     (`bbdb-finger')  This command fingers the network address of a
     BBDB record.  If this command is executed from the `*BBDB*' buffer,
     it fingers the network address of the record which is at point;
     otherwise, it prompts in the minibuffer (with completion) for a
     user to finger.  With a numeric prefix argument, it fingers the
     Nth network address of the current record; with a prefix argument
     of `^U', it fingers all of them.  The `*finger*' buffer is filled
     asynchronously, meaning that you don't have to wait around for it
     to finish; but fingering another user before the first finger has
     finished could have unpredictable results.

     If this command is executed from the `*BBDB*' buffer, it may be
     prefixed with `*' (as in `*f' instead of simply `f'), meaning to
     finger all of the users currently listed instead of just the one
     under point.  The numeric prefix argument has the same
     interpretation.

     You can define a special network address to "finger" by defining a
     field `finger-host'.  The name of the field to be fingered can be
     changed by setting `bbdb-finger-host-field'.

`q'
     (`bbdb-bury-buffer')  Hides the `*BBDB*' buffer.  Note: This
     command does not kill the `*BBDB*' buffer.

`?'
     (`bbdb-help')  This displays a one-line help message in the
     minibuffer, showing some of the most common bbdb-mode commands.

`i'
     (`bbdb-info')  This documentation is displayed.  Please note that
     either `bbdb' or `bbdb.info' must be installed in one of the info
     directories known to Emacs for this command to work.

    `bbdb-info-file'
          If this documentation is not installed in the standard Info
          directory, then you should set this variable to the name of
          the texinfo-formatted version of this file; the `bbdb-info'
          command will use this file instead.

`W'
     (`bbdb-www')  Displays the Web page listed in the `www' field of
     the current record.  *Note Using Web Browsers::.

`P'
     (`bbdb-print')  Creates a TeX file that contains a pretty-printed
     version of BBDB records.  If prefixed by `*', only the records
     currently displayed will print.  *Note bbdb-print::.

`h'
     Moves point to another window via the `other-window' function.

`c'
     (`bbdb-create')  Create a new database record from information
     supplied by the user.

`C'
     (`bbdb-changed')  Display all records that have been changed since
     the last time the database was saved.

`b'
     (`bbdb')  Begin a new database search.  The results of the new
     search will be displayed in place of the results of the old search.

`S a, S c, S o, S n'
     (`bbdb-net', `bbdb-company', `bbdb-notes', `bbdb-name')
     Begin a new database search.  This search will be limited to the
     net address, company, notes, or name fields, respectively, of
     database records.  *Note Basic Searching:: for more details.

Other database manipulation functions
-------------------------------------

`bbdb-kill-older'
     If called interactively (or with a single argument - a date in
     `yyyy-mm-dd' format), it will kill all records that were last
     modified before the given date as determined by the `timestamp'
     field.  *Note Predefined Hooks::.  If called non-interactively
     with a date (in `yyyy-mm-dd' format), a comparison function and an
     action function, the comparison function is applied to the
     `timestamp' field of all records, and the action function applied
     to those for whom the comparison function returns true.  If `nil'
     is supplied as the comparison function, `string-lessp' is used.


File: bbdb.info,  Node: Interfaces,  Next: Reader-specific Features,  Prev: BBDB Mode,  Up: Top

Interfaces
==========

   The BBDB interfaces itself with several message-handling packages,
but certain parameters control its behavior depending on whether it is
being used from within a mail reader or a news reader.

   In all of these packages, two new keybindings will be added:

`:'
     (`bbdb/package-show-sender') Displays the BBDB entry corresponding
     to the author of the current message.  If there is none, you will
     be asked whether to create one.  The function called is
     `bbdb/package-show-sender', where `package' is either `gnus',
     `mh', `rmail', or `vm', depending on the mail or news program
     being used when the command is invoked.

`;'
     (`bbdb/package-annotate-sender') Lets you edit the `notes' field
     of the BBDB record corresponding to the sender of the current
     message.  If there is no record for the current author, you will be
     asked whether to create one.  The function called is
     `bbdb/package-annotate-sender', where `package' is either `gnus',
     `mh', `rmail', or `vm', depending on the mail or news program
     being used when the command is invoked.

   These keybindings (and several other features) will not be available
unless you call the appropriate "insinuation" function; *Note
Installation::.

   It is possible to configure BBDB so that it automatically creates a
record when it sees a message from a person who is not in the database.
It is also possible to have text automatically added to the notes field
of the corresponding record depending on the contents of the message
headers.  *Note Customization Hooks::

* Menu:

* Mail Reading Interfaces::		Mail Reading Interfaces
* News Reading Interfaces::		News Reading Interfaces
* Mail Sending Interfaces::		Mail Sending Interfaces


File: bbdb.info,  Node: Mail Reading Interfaces,  Next: News Reading Interfaces,  Prev: Interfaces,  Up: Interfaces

Mail Reading Interfaces
-----------------------

   There are BBDB interfaces for the following mail readers:

   * Gnus, a news- and email- reader written by Lars Magne Ingebrigtsen
     (based on GNUS by Mansanobu Umeda).

   * MH-E, the Emacs interface to Mail Handler (MH), from the standard
     emacs library, but packaged separately from XEmacs since version
     20.4.

   * RMAIL, from the standard emacs library (packaged separately for
     XEmacs users as of 20.4);

   * View Mail, by Kyle Jones, version 5.31 or newer;


File: bbdb.info,  Node: News Reading Interfaces,  Next: Mail Sending Interfaces,  Prev: Mail Reading Interfaces,  Up: Interfaces

News Reading Interfaces
-----------------------

   There are BBDB interfaces for the following news readers:

   * GNUS, a newsreader written by Masanobu Umeda.

   * Gnus, the modern news- and email-reading incarnation of GNUS.
     Gnus is written by Lars Magne Ingebrigtsen.

