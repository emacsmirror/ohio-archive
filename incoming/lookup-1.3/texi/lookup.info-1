Info file: lookup.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `lookup.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.



INFO-DIR-SECTION The Emacs editor and associated tools
START-INFO-DIR-ENTRY
* Lookup: (lookup).             Lookup, a Search Interface.
END-INFO-DIR-ENTRY


This file documents Lookup, a search interface.

Copyright (C) 1997,1998,1999 Keisuke Nishida

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.





File: lookup.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)

Lookup Manual
*************

Lookup は Emacs エディタで利用できる辞書検索インターフェースです。市販の
CD-ROM 辞書やネットワークの辞書サーバを始め、様々な情報源から簡単な操作
と設定で辞書検索が行なえます。

本書は Lookup 1.2 について説明します。

* Menu:

* Introduction::                はじめに
* Quick Tour::                  大まかな使い方
* Getting Started::             Lookup を利用するには
* How To Lookup::               検索を行なうには
* Customization::               自分好みに調節する
* Dictionary Types::            辞書形式一覧
* Search Agents::               検索エージェント一覧
* Mode Details::                各モードの詳細
* How To Get::                  最新情報を手に入れる
* Troubleshooting::             トラブルシューティング
* Glossary::                    用語集
* Concept Index::               コンセプト索引
* Command Index::               コマンド索引
* Variable Index::              変数索引

 -- The Detailed Node Listing ---

はじめに

* Features::                    Lookup の特徴
* Environment::                 動作環境
* Copying::                     著作権について

大まかな使い方

* Quick Prepare::               辞書の準備
* Quick Setup::                 設定すべきこと
* Quick Example::               簡単な設定例
* Quick Startup::               起動するには
* Quick Search::                検索してみよう
* Quick View::                  結果を見ていく

Lookup を利用するには

* Setup Dictionary::            辞書の準備を整える
* Setup Agent::                 辞書に合わせて設定する
* Setup Command::               新しい検索コマンドを作る
* Setup Others::                その他の主な設定項目
* Setup Example::               初期化ファイルの設定例
* Setup Variables::             セットアップ変数一覧
* Setup Functions::             セットアップ関数一覧

辞書に合わせて設定する

* Setup Basis::                 基本的な設定方法
* Setup Option::                各種オプションの設定
* Setup Restriction::           利用する辞書の制限
* Setup Package::               補助パッケージの利用

その他の主な設定項目

* Setup Coding::                文字コードの設定
* Setup Gaiji::                 外字表示の準備
* Setup Query Expansion::       拡張検索の準備

拡張検索の準備

* Stemming::                    単語の語尾を取り除く
* Spell Checking::              スペルチェックを行なう
* Kanji-Kana Expansion::        漢字ひらがな拡張検索
* Universal Query Expansion::   任意の拡張検索

初期化ファイルの設定例

* Initialization::              初期化プロセスの概要
* ~/.emacs::                    `~/.emacs' の設定
* ~/.lookup::                   `~/.lookup' の設定
* site-start.el::               サイト毎の共通設定

検索を行なうには

* Startup Commands::            起動と終了
* Search String::               文字列検索
* See Result::                  検索結果の眺め方
* Specify Dictionary::          特定の辞書を利用する

文字列検索

* Search Commands::             標準の検索コマンド
* Default Method::              標準の検索方式
* Search Methods::              検索方式のいろいろ

検索結果の眺め方

* See Entries::                 エントリを順に見る
* See Contents::                本文を詳しく見る
* Make Reference::              リファレンスを参照する
* Cite Contents::               本文を引用する

自分好みに調節する

* Customize General::           一般的なカスタマイズ
* Customize Option::            辞書とエージェントのカスタマイズ
* Customize Contents::          エントリ本文のカスタマイズ
* Supplement Package::          補助パッケージを作る
* Customize Example::           詳細な設定例

一般的なカスタマイズ

* Customize Variables::         主なカスタマイズ変数
* Customize Face::              文字装飾のカスタマイズ

辞書とエージェントのカスタマイズ

* Agent Options::               エージェント・オプション一覧
* Dictionary Options::          辞書オプション一覧

エントリ本文のカスタマイズ

* Reference Pattern::           リファレンスの設定
* Gaiji Table::                 外字置き換えの設定
* Format Contents::             テキストの整形

辞書フォーマット一覧

* Setup SDIC::                  SDIC フォーマット
* Setup dictd::                 dictd フォーマット
* Setup cookie::                cookie ファイル
* Setup CD-ROM::                各種 CD-ROM 辞書
* Setup NDTP::                  NDTP 辞書サーバ
* Setup DICT::                  DICT 辞書サーバ

検索エージェント一覧

* ndic::                        フリー辞書から検索する
* ndeb::                        CD-ROM 辞書から検索する
* ndtp::                        NDTP サーバから検索する
* ndict::                       DICT サーバから検索する
* ndsrd::                       ランダムハウス英語辞典Windows版を検索する
* ndkks::                       日本語の読みを調べる
* ndspell::                     スペルチェックとスペル検索
* ndcookie::                    cookie ファイルから検索する

ndic

* ndic prepare::                ndic の準備
* ndic setup::                  ndic の設定
* ndic dictionary::             ndic の辞書
* ndic customize::              ndic のカスタマイズ

ndeb

* ndeb prepare::                ndeb の準備
* ndeb setup::                  ndeb の設定
* ndeb dictionary::             ndeb の辞書
* ndeb customize::              ndeb のカスタマイズ

ndtp

* ndtp prepare::                ndtp の準備
* ndtp setup::                  ndtp の設定
* ndtp dictionary::             ndtp の辞書

ndict

* ndict prepare::               ndict の準備
* ndict setup::                 ndict の設定
* ndict dictionary::            ndict の辞書

ndsrd

* ndsrd prepare::               ndsrd の準備
* ndsrd setup::                 ndsrd の設定
* ndsrd dictionary::            ndsrd の辞書
* ndsrd customize::             ndsrd のカスタマイズ

ndkks

* ndkks prepare::               ndkks の準備
* ndkks setup::                 ndkks の設定
* ndkks dictionary::            ndkks の辞書
* ndkks customize::             ndkks のカスタマイズ

ndspell

* ndspell prepare::             ndspell の準備
* ndspell setup::               ndspell の設定
* ndspell dictionary::          ndspell の辞書
* ndspell customize::           ndspell のカスタマイズ

ndcookie

* ndcookie prepare::            ndcookie の準備
* ndcookie setup::              ndcookie の設定
* ndcookie dictionary::         ndcookie の辞書

各モードについての詳細

* Select Mode::                 Select モード
* Entry Mode::                  Entry モード
* Content Mode::                Content モード

Select モード

* Select Mode Details::         Select モードの詳細
* Select Mode Commands::        Select モードのコマンド一覧

Entry モード

* Entry Mode Details::          Entry モードの詳細
* Entry Mode Commands::         Entry モードのコマンド一覧

Content モード

* Content Mode Details::        Content モードの詳細
* Content Mode Commands::       Content モードのコマンド一覧




File: lookup.info, Node: Introduction, Next: Quick Tour, Prev: Top, Up: Top

はじめに
********

近年、コンピュータで電子辞書を利用することもずいぶん一般的となり、機能的
に優れた多数の CD-ROM 辞書が販売されるようになりました。しかし、日頃から
エディタでの作業に慣れ親しんでいる者にとってはまず、いかに充実した機能を
使い込なすかよりも、単純な用語検索をどれだけ手軽に行なえるかという要求が
少なからずあるのではないかと思います。

自分も Emacs の一ファンとして、日常的な検索作業をより快適に行ないたいと
いう飽く無き欲求を持っており、そうして生まれたのがこの Lookup です。さほ
ど高度なことはやれずとも、使っていて手に(指に?)しっくりくるような快適さ、
便利さを備えた日用道具としてのソフトウェアを作りたい。そうした思いが基本
としてあります。

何を快適と感じるかは人それぞれでしょう。今後ソフトウェアをよりいっそう使
いやすいものへと育てていくため、プログラムを使ってみて感じた卒直なご意見
を頂けますと幸いです。ひいては、このプログラムを利用することで、より多く
の皆さんが快適に辞書検索を行なえるようになりましたなら嬉しく思います。

* Menu:

* Features::                    Lookup の特徴
* Environment::                 動作環境
* Copying::                     著作権について



File: lookup.info, Node: Features, Next: Environment, Prev: Introduction, Up: Introduction

Lookup の特徴
=============

Lookup の基本的な検索スタイルは、日頃よく用いる辞書をまとめて用意してお
き、そこから一気に目的の語を見付け出すことです。少しでも検索のための労力
を減らせるよう、多くの工夫を行なっています。

   * 複数の辞書から一度に検索を行ないます。最初に利用したい辞書を全て登
     録しておくことで、検索結果がまとめて表示されます。検索は普通、十分
     高速に行なわれるので、いちいち目的の辞書を切り替えるよりも効率的で
     す。

   * 様々な種類の辞書を扱えます。市販の CD-ROM 辞書に限らず、ネットワー
     ク上の辞書サーバや、フリーに配布されている用語集など、多くの情報源
     からその違いを気にすることなく検索が行なえます。(*Note Setup
     Agent::)

   * 目的ごとに、辞書のまとまりを分けて検索が行なえます。例えば、英語学
     習用に英和・和英辞典のグループ、ニュース記事を読むために現代用語集・
     コンピュータ用語集のグループ、といった具合にまとめておき、それぞれ
     に個別の検索コマンドを割り当てることが可能です。(*Note Setup
     Command::)

   * CD-ROM 辞書などに含まれる外字もそのまま表示出来ます。外字置き換えの
     ために追加の設定を行なうことなく、辞書をそのまま利用出来ます。逆に
     置き換え文字列を指定することで、処理を高速化するようなことも可能で
     す。(*Note Setup Gaiji::)

   * スペルチェックのための仕組みを備えています。英単語の複数形や、綴り
     に誤りがある場合にでも、適切な単語を推測して、自動的に再検索を行な
     うように設定することが出来ます。(*Note Setup Query Expansion::)

   * 辞書をより快適に使えるよう行なったカスタマイズを、特定の書式でファ
     イルにまとめることで、設定用パッケージとして他の人とも共有出来るよ
     うになります。もし既に手持ちの辞書用のパッケージがあれば、それを用
     いることで辞書をいっそう使いやすくすることが出来るでしょう。(*Note
     Setup Package::)



File: lookup.info, Node: Environment, Next: Copying, Prev: Features, Up: Introduction

動作環境
========

Lookup が公式にサポートを考えている Emacs は、次の通りです。

   * GNU Emacs 19.28 以降
   * XEmacs 20.3 以降
   * Mule 2.3(based 19.28 or 19.34)
   * Meadow 1.0 以降

このうち、GNU Emacs をメインターゲットとして開発しています。そのため、最
新版の GNU Emacs で利用するのが最も確実に動作します。

XEmacs 20 以降でも一通りの機能が利用できるはずです。アイコン等の追加機能
はありませんが、特別な設定なしに外字が表示出来るといった利点はあります。
ただし、表示の関係でまだ少し問題が残されています。

Mule 2.3 でも一応の動作は確認しています。ただし、一部の機能が適切に動作
しないといったいくつかの制限はあります。協力者次第で、これらはいずれ解決
されるかもしれません。

Meadow(Emacs 20 for Win32)や Mule for Win32 といった、Microsoft Windows 
で利用できる Emacs でも動作は確認されています。ただし、外部コマンドの呼
び出しなどの関係で、いくらか注意が必要です。

もし上記の Emacsen で動作がうまくいかなかったり、あるいはこれら以外の
Emacs での動作を希望される方は、Lookup のメーリングリスト、もしくは管理
人までメールをお願いします。(*Note How To Get::)



File: lookup.info, Node: Copying, Prev: Environment, Up: Introduction

著作権について
==============

Lookup はフリー・ソフトウェアです。あなたは、Free Software Foundation が
公表した GNU General Public License (GNU 一般公有使用許諾)のバージョン 2 
あるいはそれ以降の各バージョンの中からいずれかを選択し、そのバージョンが
定める条項に従って Lookup を再配布または変更することができます。

Lookup は有用とは思いますが、頒布にあたっては、市場性及び特定目的適合性
についての暗黙の保証を含めて、いかなる保証も行ないません。詳細については
GNU General Public License をお読みください。

あなたは、Lookup と一緒に GNU General Public License の写しを受け取って
いるはずです。そうでない場合は、Free Software Foundation, Inc., 59
Temple Place - Suite 330, Boston, MA 02111-1307, USA へ手紙を書いてくだ
さい。

Lookup の著作権は Lookup 開発チームにあります。これは有志による開発陣の
集まりで、Lookup の配布条件等の決定はその間の合意により行なわれます。問
い合わせ等は lookup-ja@ring.gr.jp までお願いします。



File: lookup.info, Node: Quick Tour, Next: Getting Started, Prev: Introduction, Up: Top

大まかな使い方
**************

さあ、それでは Lookup を使ってみましょう。ヤヤコシイ説明は後回しにして、
ともかく動かすことから始めていきます。

* Menu:

* Quick Prepare::               辞書の準備
* Quick Setup::                 設定すべきこと
* Quick Example::               簡単な設定例
* Quick Startup::               起動するには
* Quick Search::                検索してみよう
* Quick View::                  結果を見ていく



File: lookup.info, Node: Quick Prepare, Next: Quick Setup, Prev: Quick Tour, Up: Quick Tour

辞書の準備
==========

まず、何はなくとも辞書が必要です。とはいえたぶん、このプログラムを使おう
と思われた時点で既に、利用したい辞書は決まっているでしょうね。辞書をもう
用意しているという方は、本節は読み飛ばして次へ進んで下さい。

もしこれから辞書を探そうと思っている、あるいはどの辞書を選べばいいか迷っ
ているという方は、Lookup のホームページや配布物に含まれる FAQ にいくつか
アドバイスがありますので、参考にして下さい。

あるいは、「辞書はいらないから、とにかく Lookup を使ってみたいんだっ!」
という奇特な方も中にはおられるかもしれません。そのような方のために一つ、
Lookup を手っ取り早く試すための材料として、Emacs に附属の Zippy ファイル
を紹介しておきましょう。

Zippy ファイルとは、アメリカのコミック "Zippy the Pinhead" の中からいく
つかのセリフを抜き出しデータベース化したもので、Emacs の etc/yow.lines 
というファイルに収められています。そして Lookup は標準で、このファイルか
らキーワードを含んだセリフを検索出来るようになっているのです!

Zippy ファイルを用いるには、何も考えずに次節で最後の指示に従って下さい。
そして記述のままに、こころゆくまで Lookup の機能をお試し下さい。一通りの
動作を確認した後、あなたはふっ、と軽く笑みを浮かべ、もっとしっかり考えた
上で行動すべきだと自分を見つめ直すことでしょう。ブラボー!



File: lookup.info, Node: Quick Setup, Next: Quick Example, Prev: Quick Prepare, Up: Quick Tour

設定すべきこと
==============

さて、辞書の用意が出来たら Lookup の設定です。しかし待った。Lookup が対
応している辞書には数多くの種類があります。まず始めに、辞書との実際の連絡
係となる "検索エージェント" を選ばねばなりません。

このバージョンの Lookup には、以下の検索エージェントが含まれています。こ
れらは利用する辞書の種類や利用形態の違いによって、それぞれ異なる性格を持っ
ています。それぞれの説明を参照して、自分の目的に合ったものをピックアップ
して下さい。


用語検索に向いたエージェント
----------------------------

`ndic'
     フリー辞書からの直接検索 (*Note ndic::)
`ndeb'
     EPWING などに準拠した CD-ROM 書籍の個人利用 (*Note ndeb::)
`ndtp'
     NDTP サーバを用いた、ネットワーク辞書の利用 (*Note ndtp::)
`ndict'
     DICT サーバを用いた、ネットワーク辞書の利用 (*Note ndict::)


ランダムハウス英語辞典Windows版を検索するエージェント
-----------------------------------------------------

`ndsrd'
     ランダムハウス英語辞典Windows版を検索する (*Note ndsrd::)
`ndcookie'
     cookie ファイルから検索 (*Note ndcookie::)


補助的なエージェント
--------------------

`ndkks'
     日本語の読みを調べる (*Note ndkks::)
`ndspell'
     スペルチェックやスペル検索 (*Note ndspell::)


利用するエージェントが決まったら、説明に従って準備を整えて下さい。辞書の
設定やインストール、外部プログラムが必要になることもあります。Emacs の設
定についても例も挙げられているはずですから、自分の場合の設定内容を把握し
て下さい。

以上が終われば、`~/.emacs' ファイルに設定を書き込みます。基本的には変数 
`lookup-search-agents' をセットするだけです。利用したい検索エージェント
の数だけ、設定を並べることが出来ます。

例えば、NDTP サーバがホスト `dserver' で動いており、CD-ROM 辞書を
`/cdrom' にマウントしているのであれば、設定は次のようになります。

     (setq lookup-search-agents '((ndtp "dserver") (ndeb "/cdrom")))

あるいは、Zippy ファイルに心魅かれるそこのあなたは、次の一行で OK です!

     (setq lookup-search-agents '((ndcookie "yow.lines")))



File: lookup.info, Node: Quick Example, Next: Quick Startup, Prev: Quick Setup, Up: Quick Tour

簡単な設定例
============

さあ、辞書の設定は終わりました。しかし実際には、管理者の方が特別に設定を
行なってでもいない限り、他にもいくつかの設定が必要となります。実用上、
`~/.emacs' には次のように書いておくとよいでしょう。

     ;;;
     ;;; Lookup Setup Example
     ;;;

     ;; オートロードの設定
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-pattern "lookup" nil t)

     ;; キーバインドの設定
     (define-key ctl-x-map "l" 'lookup)              ; C-x l - lookup
     (define-key ctl-x-map "y" 'lookup-region)       ; C-x y - lookup-region
     (define-key ctl-x-map "\C-y" 'lookup-pattern)   ; C-x C-y - lookup-pattern

     ;; 検索エージェントの設定
     (setq lookup-search-agents '((ndtp "dserver") (ndeb "/cdrom")))

最初の段落では、Lookup の各コマンドを実行したとき、自動的にプログラムを
読み込むように設定しています。もし Emacs 起動時に初期化を済ませてしまう
ことがお好みなら、代わりに `(require 'lookup)' などと書いておけばよいで
しょう。

二番目の段落では、コマンドを実行するためのキーバインドを定義しています。
これは必須ではありませんが、上記のコマンドはよく用いるので、適当なキーに
割り当てておくと便利です。各自で好みのキーにバインドして下さい。

最後の段落では、利用する検索エージェントを設定しています。これは前節で説
明した通りです。各自のものに合わせて設定して下さい。

以上が終われば、式を評価するなり、Emacs を再起動するなりして、設定を有効
にして下さい。さあ、いよいよ Lookup の実行ですよ!



File: lookup.info, Node: Quick Startup, Next: Quick Search, Prev: Quick Example, Up: Quick Tour

起動するには
============

お待たせしました。それでは Lookup を動かしていきましょう。まず手始めに
`M-x lookup' として、プログラムが起動することを確認して下さい。


     M-x lookup RET =>

     ======== Lookup Windows ========================================
     ----------------------------------------------------------------
     Type `m' to select, `u' to unselect, `?' for help.

     % Identifier          Title                Method
     - ----------          -----                ------
     * ndtp+dserver:KOKUGO 国語辞典             =<>
     * ndeb+/cdrom:EIWA    英和辞典             =<>
     * ndeb+/cdrom:WAEI    和英辞典             =<>





     ----------------------------------------------------------------
     -J:%*  Lookup: *Dictionary List*      (Select Abbrev)--L5--C0--A
     ----------------------------------------------------------------
     ================================================================


上のような画面が表示されましたか? もしエラーが起こったり、あるいは一覧が
表示されないようなら、辞書やプログラムの設定に失敗しているかもしれません。
問題点を確認して、もう一度やり直してみて下さい。よくあるミスなら FAQ に
情報があるかもしれませんし、わからないことがあればメールで尋ねてもらって
も一向に構いません。

このとき表示されるバッファを "辞書一覧バッファ" と呼びます。上の例では、
「国語辞典」「英和辞典」「和英辞典」の三つの辞書が使えるようになっていま
す。以下、これらの辞書を例に説明していきます。

行頭に `*'(アスタリスク)のマークが付いているのは、その辞書を検索に用いる
ものとして、辞書が選択されているということを表わしています。上の場合、三
つ全ての辞書から一度に検索が行なわれるという意味になります。通常、最初は
利用出来る全ての辞書が選択状態になっています。

`Identifier' とあるコラムには、辞書を特定するための名称が表示されていま
す。これは利用している検索エージェント(AGENT)と、辞書の所在(LOCATION)、
及び辞書名(NAME)とを組み合わせて、`AGENT+LOCATION:NAME' という形で表わさ
れます。本書ではこれを"辞書ID" と呼び、`NAME' で表わされる "辞書名" とは
区別します。また同様に、`AGENT+LOCATION' の部分は "エージェントID" と呼
びます。

`Title' とあるコラムには、辞書のタイトルが表示されます。これは検索結果の
出力などに、普段用いられるものです。オプション設定により自由に変更するこ
とも可能ですから、後で見やすいものに変えておきましょう。

最後の `Methods' とあるコラムには、辞書が対応している検索方式が示されて
います。これは各種検索方式がそれぞれ一つの記号で表わされており、上の場合
はどの辞書も「前方一致検索」「後方一致検索」「完全一致検索」に対応してい
るという意味になります。詳しくは後ほど説明します。

このバッファでは辞書の一覧を確認する以外にも、辞書の選択状態を切り替える
などいくつかの操作が可能となっています。試しに `?' を押してみて下さい。
別のバッファにコマンドの一覧が表示されましたね? Lookup の各バッファでは、
`?' キーを押すことで簡単なコマンド一覧が出るようになっているので、ちょっ
と調べたいときにご利用下さい。

どこでも使えるキー操作をもう一つ。`q' を押せば、そのバッファを抜けて元の
作業に戻ることが出来ます。さあ、それでは辞書の確認はこの辺にして、次のス
テップに進みましょう。



File: lookup.info, Node: Quick Search, Next: Quick View, Prev: Quick Startup, Up: Quick Tour

検索してみよう
==============

いよいよ検索を行ないます。最も代表的な検索コマンドとして、`M-x
lookup-region' と `M-x lookup-pattern' の二つがあります。それぞれリージョ
ンの内容、及びミニバッファからの入力を検索語に、検索を開始します。


     M-x lookup-pattern RET test RET =>

     ======== Lookup Windows ========================================
     ----------------------------------------------------------------
     国語辞典            -!-テスト
     英和辞典            test


     ----------------------------------------------------------------
     -J:%*  Lookup: *Entry* {*:test} [2]      (Entry Abbrev)--L1--C20
     ----------------------------------------------------------------
     テスト
     [名] 1. 試験....




     ----------------------------------------------------------------
     -J:%*  Lookup: *Content* {テスト}      (Content Abbrev)--L1--C0-
     ----------------------------------------------------------------
     ================================================================


二つのバッファが表示されました。上側のバッファは "Entry バッファ" と言い、
検索の結果見付かったエントリを一覧します。ここでは二つのエントリが表示さ
れています。-!- とあるのは、そこにポイントがあるという印です。つまり、現
在一つ目の「テスト」というエントリが選択されています。

下側のバッファは "Content バッファ" と言い、選択されているエントリの本文
が表示されます。Entry バッファで SPC を押していけば、内容が次々と表示さ
れます。

上の例では `test' という検索語で検索を行ないましたが、ここで入力を次のよ
うにすることで、検索方式を様々に切り換えることが出来ます。

word
     単語検索。標準の検索方法。
word*
     前方一致検索。指定した文字列で始まる語を見付ける。
*word
     後方一致検索。指定した文字列で終わる語を見付ける。
*word*
     部分一致検索。指定した文字列を含んだ語を見付ける。
'word'
     完全一致検索。指定した文字列と一致する語を見付ける。
@word
     キーワード検索。指定した文字列をキーワードに持つエントリを見付ける。

ひとまずこれだけ覚えておけば十分でしょう。検索方式は他にもまだいくつかあ
りますが、詳しくは後ほど説明します。ここではもう少し、検索結果の見方につ
いて話を進めていきます。



File: lookup.info, Node: Quick View, Prev: Quick Search, Up: Quick Tour

結果を見ていく
==============

以下、Entry バッファでよく用いられるコマンドについて説明します。キー操作
を忘れてしまったときには、`?' を押せば確認出来ます。

   * 本文のスクロール
     `SPC'
          一画面分、先に進む。
     `DEL'
          一画面分、前に戻る。
     `<'
          バッファの先頭へ戻る。
     `>'
          バッファの最後へ進む。

   * エントリの選択
     `n'
          次のエントリに移動。
     `p'
          前のエントリに移動。
     `M-n'
          検索履歴を次に進む。
     `M-p'
          検索履歴を前に戻る。

   * 本文に対する操作
     `s'
          Content バッファで `isearch-forward' を実行。
     `w'
          Content バッファの内容をキルリングにセーブ。
     `L'
          リファレンスを一覧。

まだまだあります。見付かったエントリが多くて一覧が見辛いときには、`v' を
押すことで "Overview モード" に入ります。Overview モードでは Content バッ
ファがクローズされ、Entry バッファを広く見ることが出来ます。Overview モー
ドを抜けるには、もう一度 `v' とするか、あるいは SPC を押して下さい。

逆にエントリの本文を広く見たいときには、`o' が使えます。これは Lookup の
ウィンドウをフレーム一杯に広げ、一時的に表示領域を広く取ります。`q' でバッ
ファを閉じれば、次からまた元に戻ります。

一度バッファを閉じた後でも、もう一度 `M-x lookup' とすることで、最後に 
Lookup を抜けたときの状態が取り戻されます。`q' と `M-x lookup' を繰り返
すことで、何度でも検索結果を見直すことが出来ます。

検索結果を表示したまま最初のバッファに戻りたいときには、`r' を押せば OK 
です。`h' を連打すれば、Entry バッファと Content バッファの間を往復する
ことも出来ます。

これだけ覚えておけば、日常の作業は十分に行なえるでしょう。しかし Lookup 
には、場合によって役に立ついくつかのコマンドが他にも用意されています。次
章以降で、それらを含む Lookup の完全な機能について説明します。

さて、以上で Lookup を使うための短かいツアーも終了です。いかがでしょうか?
Lookup はあなたの要望を満たしてくれそうですか? もし使っていて「もっとこ
んな機能が欲しいぞ」とかいうことがありましたら、遠慮なくメールででも伝え
て下さい。

それでは、あなたのより快適な検索ライフを祈って。Happy Looking Up!



File: lookup.info, Node: Getting Started, Next: How To Lookup, Prev: Quick Tour, Up: Top

Lookup を利用するには
*********************

この章では、Lookup のインストール後に行なわなければならない設定項目につ
いて説明します。プログラムのインストールについては、Lookup 配布物に附属
のファイル INSTALL を参照して下さい。設定後の更なるカスタマイズについて
は、*Note Customization:: を参照して下さい。

* Menu:

* Setup Dictionary::            辞書の準備を整える
* Setup Agent::                 辞書に合わせて設定する
* Setup Command::               新しい検索コマンドを作る
* Setup Others::                その他の主な設定項目
* Setup Example::               初期化ファイルの設定例
* Setup Variables::             セットアップ変数一覧
* Setup Functions::             セットアップ関数一覧



File: lookup.info, Node: Setup Dictionary, Next: Setup Agent, Prev: Getting Started, Up: Getting Started

辞書の準備を整える
==================

Lookup では、以下の辞書の利用をサポートしています。自分の利用したい辞書
を確認し、それぞれの下準備を整えて下さい。



File: lookup.info, Node: Setup Agent, Next: Setup Command, Prev: Setup Dictionary, Up: Getting Started

辞書に合わせて設定する
======================

* Menu:

* Setup Basis::                 基本的な設定方法
* Setup Option::                各種オプションの設定
* Setup Restriction::           利用する辞書の制限
* Setup Package::               補助パッケージの利用



File: lookup.info, Node: Setup Basis, Next: Setup Option, Prev: Setup Agent, Up: Setup Agent

基本的な設定方法
----------------

Lookup を利用するには、まず始めに辞書との直接のインターフェースとなる"検
索エージェント" を選ぶ必要があります。利用出来る検索エージェントは *Note
Search Agents:: に一覧があるので、そちらを参照してどれを用いるか決めて下
さい。

用いるエージェントが決まれば、変数 `lookup-search-agents' を設定します。
これはエージェントの設定のリストで、リストの各要素は次の形式を取ります。

     (CLASS LOCATION [OPTION...])

CLASS には、エージェントの種類をシンボルで指定します。これは`ndic' とか 
`ndtp' とか言うエージェントの名前そのものです。

LOCATION には、辞書の所在を文字列により表します。何を指定すべきかは利用
するエージェントにより異なるので、それぞれのエージェントについての説明を
参照して下さい。これは省略可能な場合もあります。

OPTION は、エージェントに対する省略可能なオプションです。これはパラメー
タを名前付きで与えるためのもので、タグとなるシンボルと、値となる任意のオ
ブジェクトとの cons によって表わします。いくつでも指定できます。

具体的な例を挙げましょう。例えば、次の設定では、

     (ndtp "dserver" :port 2010 :account "user@domain") エージェントの種
類は `ndtp'、辞書の所在は `"dserver"' で、オプション `:port' に値 `2010' 
を、オプション `:account' に値 `"user@domain"' をそれぞれ指定しています。

各エージェントで具体的に何を設定すべきかは、それぞれのエージェントについ
ての説明を参照して下さい。オプションについては、すべてのエージェントで共
通に使えるものもあります。*Note Agent Options:: を参照して下さい。

上のような設定を、利用するエージェントの数だけ並べたものが、実際の
`lookup-search-agents' の値となります。例えば一つの典型的な例として、次
のような設定が考えられるでしょう。

     ;; ホスト dserver で NDTP サーバが動いており、
     ;; スペルチェックの機能を有効とする場合。
     (setq lookup-search-agents
           '((ndtp "dserver") (ndspell)))



File: lookup.info, Node: Setup Option, Next: Setup Restriction, Prev: Setup Basis, Up: Setup Agent

各種オプションの設定
--------------------

先の節では、エージェントにオプションを指定するやり方について説明しました
が、オプションは辞書にも設定することが可能です。実際、Lookup のエージェ
ントや辞書はほとんど、何らかのオプション指定によってカスタマイズされるよ
うになっています。オプションの設定は今後いろいろな場面で出てくるので、こ
こで一度詳しく説明しておきます。

Lookup で "オプション" とは、名前付きパラメータのことを意味します。つま
り特定のシンボルをタグとして、それに対応させる形で値を設定します。これは
典型的には、`(KEY . VALUE)' という cons の形で表現されます。

先程はエージェントのオプションとして、`lookup-search-agents' にオプショ
ンの cons のリストを設定しましたが、辞書の場合には変数 
`lookup-dictionary-options-alist' を用いることが出来ます。

例えば辞書にオプション `:title' を設定することを考えてみましょう。これは
辞書のタイトルを変更するための共通オプションです。次のようにします。

     (setq lookup-dictionary-options-alist
           '(("ndtp+dserver:KOKUGO" ':title "国語辞典")
             ("ndeb+/cdrom:EIWA" ':title "英和辞典")
             ("ndeb+/cdrom:WAEI" ':title "和英辞典")))

先のエージェント・オプションの設定法とよく似ているのがわかると思います。
辞書を特定するために、辞書ID(*Note Quick Startup::)を文字列で指定してい
ます。

しかしこの方法では、設定が増えてくると、ごちゃごちゃとして少々わかりづら
くなってしまいます。そこで実際のオプション設定のために便利な関数
`lookup-set-dictionary-option' を用意しています。この関数は間接的に
`lookup-dictionary-options-alist' を書き換えます。実用上はこの関数を利用
し、`lookup-dictionary-options-alist' は直接に変更しない方がいいでしょう。
上の例は、次の式と等価になります。

     (lookup-set-dictionary-option "ndtp+dserver:KOKUGO" ':title "国語辞典")
     (lookup-set-dictionary-option "ndeb+/cdrom:EIWA" ':title "英和時点")
     (lookup-set-dictionary-option "ndeb+/cdrom:WAEI" ':title "和英辞典")

ただし、これは関数なので、Lookup のプログラム・ファイルをロードしてから
でないと利用出来ません。そこでプログラムのロード直後に設定が完了するよう、
Lookup 専用の初期化ファイル `~/.lookup' を用いることが出来ます。これは後
でまた詳しく説明します。(*Note Setup Example::)

また、全ての辞書に対してデフォルトのオプションを設定するために、変数 
`lookup-default-dictionary-options' が利用出来ます。オプションのcons を
リストにして並べます。例えば次のように設定すれば、単語の語尾を取り除く処
理をデフォルトで行なうようになります。

     (setq lookup-default-dictionary-options
           '((:stemmer .  stem-english)))

全ての辞書に対してではなく、ある特定のエージェントにだけデフォルトを設定
したいこともあります。これは単純に、辞書オプションをエージェント・オプショ
ンと同じに並べるだけです。辞書オプションが指定されなかった場合、次にエー
ジェント・オプションから同じものが探し出されます。ただし `:title' の設定
など、共有が無意味なものについてはその限りではありません。

辞書オプションと同様に、エージェント・オプションのためにも設定用の変数・
関数が用意されています。それぞれ `lookup-agent-options-alist'、
`lookup-set-agent-option'、`lookup-default-agent-options' です。例えば辞
書を無効化するには、次のように書くことも出来ます。

     (setq lookup-search-agents '((agent "location")))
     (lookup-set-agent-option "agent+location" ':disable '("KOKUGO" "WAEI"))

なお、オプション設定の優先順位は次の通りです。

   * 辞書オプション
       1. lookup-dictionary-options-alist
       2. lookup-default-dictionary-options
       3. エージェント・オプションから継続して検索

   * エージェント・オプション
       4. lookup-search-agents 設定時のオプション
       5. lookup-agent-options-alist
       6. lookup-default-agent-options



File: lookup.info, Node: Setup Restriction, Next: Setup Package, Prev: Setup Option, Up: Setup Agent

利用する辞書の制限
------------------

変数 `lookup-search-agents' で設定されたエージェントは通常、Lookup の起
動と同時に全て初期化され、そこに含まれる全ての辞書が利用されるものとして
選択されます。しかし場合によっては、そのうち一部の辞書しか必要としないこ
ともあるかもしれません。エージェントに次の共通オプションを与えることで、
あらかじめ有効とする辞書を制限することが出来ます。

`:enable'
     有効とする辞書名のリスト。
`:disable'
     無効とする辞書名のリスト。

例えば、あるエージェントが三つの辞書 `KOKUGO', `EIWA', `WAEI' を持ってい
るとしましょう。この内 `EIWA' だけを有効にしたいのであれば、次のように設
定します。

     (agent "location" :enable ("EIWA"))

あるいは

     (agent "location" :disable ("KOKUGO" "WAEI"))

ここで指定すべき辞書名は、`M-x lookup' として表示される辞書一覧のバッファ
から知ることが出来ます(*Note Quick Startup::)。最初にオプションなしで起
動して含まれる辞書を確認し、後から設定を変更するとよいでしょう。

あるいは、無効にはしたくないが、滅多に用いないという辞書もあるかもしれま
せん。上と同様に、次の共通オプションを与えることで、辞書の初期選択状態を
変えることが出来ます。

`:select'
     選択する辞書名のリスト。
`:unselect'
     未選択にする辞書名のリスト。

未選択にされた辞書は、後から選択することで利用可能となります。(*Note
Specify Dictionary::)



File: lookup.info, Node: Setup Package, Prev: Setup Restriction, Up: Setup Agent

補助パッケージの利用
--------------------

Lookup では様々な種類の辞書を扱いますが、各エージェントでは対応しきれな
い辞書毎の細かな調整を行なうために、"補助パッケージ" というものが利用出
来ます。これは辞書に固有の設定をまとめた設定ファイル集です。

補助パッケージがなくとも検索に支障はありませんが、それを用いることで出力
がより見やすく整形されたり、不足する設定が補われたりと、使い勝手が良くな
ることは期待出来ます。

いくつかの辞書に対応した補助パッケージが Lookup のホームページに用意され
ているので、自分の辞書に対応したものがないか探してみて下さい(*Note How
To Get::)。もし期待のものが見付かれば、次のようにして準備して下さい。

まず、補助パッケージを適当なディレクトリに展開して下さい。展開するディレ
クトリを以下では "パッケージ・ディレクトリ" と呼びます。パッケージを展開
するとディレクトリが一つ生成されますが、中のファイルをパッケージ・ディレ
クトリに移動しても構いません。また、生成されたディレクトリの名前を "パッ
ケージ名" と呼びます。

次に、初期化ファイル(`~/.lookup'; *Note Setup Example::) で次のように設
定します。

     ;; パッケージ・ディレクトリの設定
     (setq lookup-package-directory "/your/package/directory")

     ;; 『辞・典・盤97』のパッケージ利用
     (lookup-use-package "ndeb+/cdrom" "jitenban97")

変数 `lookup-package-directory' によりパッケージ・ディレクトリを設定しま
す。`lookup-use-package' によりパッケージの読み込みを行ないます。第一引
数はエージェントID、第二引数はパッケージ名です。

`lookup-use-package' は内部的には、*Note Setup Option:: で説明した設定用
関数 `lookup-set-agent-option' と`lookup-set-dictionary-option' を用いて
オプション設定を行なっているだけです。従って一度パッケージを読み込んだ後
でも、これらの関数を用いて更に設定を上書きすることや、同じエージェントに
別のパッケージを重ねて適用することも可能です。

手持ちの辞書のパッケージが存在しない場合、それを自分で作ることも出来ます。
(*Note Supplement Package::)



File: lookup.info, Node: Setup Command, Next: Setup Others, Prev: Setup Agent, Up: Getting Started

新しい検索コマンドを作る
========================

既存のソースを参考にしてください。もし分からないことがあれば、メイリング
リスト ( lookup-ja@ring.gr.jp ) に質問してみるとよいかもしれません。




File: lookup.info, Node: Setup Others, Next: Setup Example, Prev: Setup Command, Up: Getting Started

その他の主な設定項目
====================

* Menu:

* Setup Coding::                文字コードの設定
* Setup Gaiji::                 外字表示の準備
* Setup Query Expansion::       拡張検索の準備



File: lookup.info, Node: Setup Coding, Next: Setup Gaiji, Prev: Setup Others, Up: Setup Others

文字コードの設定
----------------

UNIX では次のようにする。

     (setq default-coding-system 'euc-jp)



File: lookup.info, Node: Setup Gaiji, Next: Setup Query Expansion, Prev: Setup Coding, Up: Setup Others

外字表示の準備
--------------

Lookup は CD-ROM 書籍などに含まれる外字の表示をサポートしています。 (1) 
外字を表示するには、それぞれの検索エージェントで適切な設定を行なった上で、
Lookup を次のように設定して下さい。

  1. GNU Emacs 及び Mule の場合:

     `http://openlab.ring.gr.jp/lookup/info/gaiji.html' を参考に
     bitmap-mule をインストールして下さい。次のいずれかの方法で準備が完
     了です。

       1. Lookup の起動前に bitmap-mule をロードする。

          例えば `~/.emacs' に `(require 'bitmap)' と書いておいて下さい。

       2. 初期化ファイルで `lookup-use-bitmap' を `t' にセットする。

          この場合、実際に外字を表示する際に bitmap-mule が読み込まれま
          す。

  2. XEmacs の場合:

     特別な準備は必要ありません。Lookup は XEmacs の glyph の機能を利用
     して、外字を一種の画像として扱います。設定は自動で行なわれます。

逆に、外字を表示させたくない場合には、変数 `lookup-enable-gaiji' を 
`nil' に設定して下さい。これはデフォルトで `t' となっています。


--------- Footnotes ---------

(1)  ただし、端末(tty)では表示出来ません。


File: lookup.info, Node: Setup Query Expansion, Prev: Setup Gaiji, Up: Setup Others

拡張検索の準備
--------------

日頃から検索をしていると、入力のちょっとした誤りくらいは自動的に修正して
検索を行なってくれると有り難く思います。Lookup には、入力された検索語を
補正するためのいくつかの機能が備わっています。

* Menu:

* Stemming::                    単語の語尾を取り除く
* Spell Checking::              スペルチェックを行なう
* Kanji-Kana Expansion::        漢字ひらがな拡張検索
* Universal Query Expansion::   任意の拡張検索



File: lookup.info, Node: Stemming, Next: Spell Checking, Prev: Setup Query Expansion, Up: Setup Query Expansion

単語の語尾を取り除く
....................

英語などで、単語の複数形や過去形などに付く余分な文字列を取り除き、原型を
推測するための処理を "stemming" といいます。これが出来ると、文字列の修正
なしに検索を行なえるので便利です。Lookup では、辞書オプション `:stemmer' 
を指定することで、stemming を行なうよう設定出来ます。

オプション `:stemmer' には、stemming を行なう関数を指定します。標準では、
英単語用の stemming 関数 `stem-english' が備えられています。次のように設
定して下さい。

     (lookup-set-dictionary-option "agent:DICT" ':stemmer 'stem-english)

これで指定した辞書から検索を行なうときには、stemming が行なわれるように
なります。具体的には、次の手順で検索されます。

  1. 元の検索語で検索する。

     始めは入力をそのまま検索します。それで見付かれば何も問題ありません。

  2. 設定された stemming 関数で原型を推測する。

     stemming 関数は、文字列を受け取ってその原型の候補のリストを返します。
     Lookup は候補のそれぞれについて、辞書から単語が見付かるまで検索を繰
     り返します。検索語が単純な複数形や過去形をしていれば、一度のやり直
     しで結果にたどり付けるはずです。

  3. 共通の語頭を持った似た単語を探し出す。

     例えば、`lexicographer' という語は載っていないが、`lexicography' な
     ら載っているという辞書があるかもしれません。stemming ではそのような
     ケースに対応することは出来ませんが、参考程度にその情報を示してくれ
     ると親切です。そこで、ある程度の語長を持つ語を検索した場合に限って、
     Lookup は共通語頭を持つ語の検索に挑戦します。

これでも何も見付からなければ検索を諦めます。その場合、二回か三回の検索処
理が無駄になりますが、遠隔地の辞書サーバにアクセスしているのでもない限り、
これは大したコストではありません。よってあらかじめ厳格なスペルチェックを
行なうよりも、この方式を用いる方が、効率的に自動補正を行なえます。



File: lookup.info, Node: Spell Checking, Next: Kanji-Kana Expansion, Prev: Stemming, Up: Setup Query Expansion

スペルチェックを行なう
......................

語尾だけの問題ではなく、綴りそのものを間違えたのでは何も見付かりません。
そこで検索語のスペルチェックを行ない、その上で検索を行なう機能が欲しくな
ります。

Lookup のスペルチェック機能は、検索エージェント `ndspell' として実現され
ています(*Note ndspell::)。`lookup-search-agents' の設定において、リスト
に ndspell を加えることでスペルチェックが行なわれるようになります。

ここでリストのどの位置に ndspell を加えるかが問題となります。ndspell を
置く位置を変えることで、スペルチェックを行なうタイミングを変えることが可
能です。

リストの最初に ndspell を置くと、いきなりスペルチェックを始めます。スペ
ルミスがあまりにも多く、スペルチェックをしてから検索を始めたいという人に
は、この方法が向いているかもしれません。

しかし、検索の度に毎回スペルチェックを行なうというのは効率的ではありませ
ん。そこで ndspell をリストの最後に置くことで、まず他の辞書で一度検索を
行ない、それでも何も見付からなかったときのみ、ndspell でスペルチェックを
行なうようにすることが出来ます。ndspell は、そのような利用を想定して作ら
れています。

もしどうしてもスペルチェックを行ないたいということがあれば、Entry バッファ
で `g' を押して再検索を行なうことで、ndspell にスペルチェックを強制する
ことも可能です。より詳しくは、*Note ndspell:: を参照して下さい。



File: lookup.info, Node: Kanji-Kana Expansion, Next: Universal Query Expansion, Prev: Spell Checking, Up: Setup Query Expansion

漢字ひらがな拡張検索の準備
..........................

辞書によっては、漢字を含む検索語を用いて検索することができず、漢字をひら
がなに変換する必要がある場合があります。辞書オプション :hiragana を設定
すると、このような辞書を快適に検索することができます。

     (lookup-set-dictionary-option "agent:DICT" ':hiragana t)

漢字ひらがな拡張検索を行うように設定すると、次のような動作を行います。

  1. 元の検索語で検索する。

     始めは入力をそのまま検索します。それで見付かれば何も問題ありません。

  2. 漢字列をひらがな列に変換し、得られたひらがな列を検索語として再検索
     を行う。

  3. 得られたエントリを、漢字列を用いてフィルタリングする。

漢字ひらがな拡張検索機能を利用するためには、KAKASI がインストールされて
いる必要があります。*Note ndkks prepare::.



File: lookup.info, Node: Universal Query Expansion, Prev: Kanji-Kana Expansion, Up: Setup Query Expansion

任意の拡張検索
..............

辞書の性質によっては、ユーザーが任意の置き換えを定義したい場合があるかも
知れません。そのような場合には、:expander オプションと :expand-filter オ
プションが利用できます。

例えば、次のような設定ができます。

     (lookup-set-dictionary-option "agent:DICT" ':expander 'foo-expander)
     (lookup-set-dictionary-option "agent:DICT" ':expand-filter 'foo-filter)

ただし、`foo-expander' は、文字列を取り、文字列のリストを返す関数でなけ
ればなりません。また、`foo-filter' は、文字列とエントリのリストを取り、
エントリのリストを返す関数でなければなりません。

このように設定すると、Lookup は以下のような検索処理を行います。

  1. 元の検索語で検索する。

  2. 検索語を `foo-expander' によって置換して再検索を行う。

  3. 得られたエントリを、`foo-filter' を用いてフィルタリングする。

前節で説明した漢字ひらがな拡張検索機能は、次のような設定と同値です。

     (lookup-set-dictionary-option "agent:DICT" ':expander 'lookup-kanji-get-readings)
     (lookup-set-dictionary-option "agent:DICT" ':expand-filter 'lookup-kanji-filter)



File: lookup.info, Node: Setup Example, Next: Setup Variables, Prev: Setup Others, Up: Getting Started

初期化ファイルの設定例
======================

以下は、Lookup の具体的な設定例です。設定はすべて `~/.emacs' で行なうこ
とも可能ですが、専用の初期化ファイルとして `lookup-init-file'
(`~/.lookup') が Lookup 起動時に読み込まれるので、これを用いることにしま
す。

* Menu:

* Initialization::              初期化プロセスの概要
* ~/.emacs::                    `~/.emacs' の設定
* ~/.lookup::                   `~/.lookup' の設定
* site-start.el::               サイト毎の共通設定



File: lookup.info, Node: Initialization, Next: ~/.emacs, Prev: Setup Example, Up: Setup Example

初期化プロセスの概要
--------------------

まず Lookup の実行過程について大まかに説明します。

  1. Emacs の起動
  2. `~/.emacs' の読み込み
  3. Lookup の起動
  4. Lookup プログラム・ファイル(`*.elc')の読み込み
  5. Lookup 初期化ファイル(`~/.lookup')の読み込み (存在すれば)
  6. `lookup-load-hook' の実行
  7. Lookup 初期化開始

このように Lookup のプログラム・ファイルは `~/.emacs' よりも後から読み込
まれるため、これまで説明したオプションやパッケージの設定用関数を用いるに
は、通常、次のいずれかの方法を用います。

  1. `~/.lookup' を用いる。

     これが一番、普通のやり方です。`~/.lookup' を利用すれば、余計なこと
     を気にせずに全ての設定を行なえます。

  2. `lookup-load-hook' を用いる。

     サイトで共通の設定を行なうような場合、`~/.lookup' を用いるわけには
     いきません。あるいは、全てを `~/.emacs' で行うというポリシーの人も
     いるかもしれません。そのような目的のために、`~/.lookup' と同様のタ
     イミングで初期化を行なうための hook `lookup-load-hook' を用いること
     が出来ます。次のようにします。

          ;; load-hook の設定
          (add-hook 'lookup-load-hook 'init-lookup)

          ;; Lookup の設定内容
          (defun init-lookup ()
            (setq lookup-search-agents '((agent) ...))
            (lookup-set-agent-option "agent" ':key 'value)
            ...
            )



File: lookup.info, Node: ~/.emacs, Next: ~/.lookup, Prev: Initialization, Up: Setup Example

`~/.emacs' の設定
-----------------

`~/.lookup' を用いるにしても、キーバインドの設定等、いくつかのものは
`~/.emacs' で行なうことが必要です。以下にその例を示します。

     ;;;
     ;;; Lookup
     ;;;

     ;; キーバインドとオートロードの設定
     (define-key ctl-x-map "l" 'lookup)
     (define-key ctl-x-map "y" 'lookup-region)
     (define-key ctl-x-map "\C-y" 'lookup-pattern)
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-pattern "lookup" nil t)

     ;; 自作コマンドを利用する場合
     (define-key help-map "\C-e" 'english-search-pattern)
     (autoload 'english-search-pattern "lookup" nil t)

     ;; 初期化ファイルを変更する場合
     (setq lookup-init-file "~/.lookup")



File: lookup.info, Node: ~/.lookup, Next: site-start.el, Prev: ~/.emacs, Up: Setup Example

`~/.lookup' の設定
------------------

`~/.lookup' で辞書の設定を行ないます。これまで説明した通りです。

     ;;; .lookup -- setup for Lookup                -*- emacs-lisp -*-

     ;; 検索エージェントの設定
     (setq lookup-search-agents '((ndeb "/cdrom") (ndspell)))

     ;; 補助パッケージの読み込み
     (setq lookup-package-directory "~/emacs/lookup/packages")
     (lookup-use-package "ndeb+/cdrom" "mydict")

     ;; オプションの設定
     (lookup-set-dictionary-option "ndeb+/cdrom:EIWA" ':title "英和辞典")

     ;; 外字利用の設定
     (setq lookup-use-bitmap t)

     ;;; .lookup ends here



File: lookup.info, Node: site-start.el, Prev: ~/.lookup, Up: Setup Example

サイト毎の共通設定
------------------

Lookup の設定をサイトで共有するのであれば、`site-start.el' ファイルに設
定を加えます。次のような感じにすればいいでしょう。

     ;;;
     ;;; Lookup Site Start
     ;;;

     ;; オートロードの設定
     (autoload 'lookup "lookup" nil t)
     (autoload 'lookup-region "lookup" nil t)
     (autoload 'lookup-pattern "lookup" nil t)

     ;; load-hook の設定
     (add-hook 'lookup-load-hook 'site-start-lookup)

     (defun site-start-lookup ()
       ;; 検索エージェントの設定
       (setq lookup-search-agents '((ndtp "dserver")))

       ;; 補助パッケージの設定
       (setq lookup-package-directory "/net/share/emacs/lookup/packages")
       (lookup-use-package "ndtp+dserver" "ourdict")
       )



File: lookup.info, Node: Setup Variables, Next: Setup Functions, Prev: Setup Example, Up: Getting Started

セットアップ変数一覧
====================

`lookup-init-file'
     Lookup の初期化ファイル名。デフォルトは `~/.lookup'。このファイルは 
     `lookup.el' のロード直後に読み込まれる。

`lookup-load-hook'
     Lookup のロード完了直後に実行される hook。`lookup-init-file' の読み
     込み直後に実行される。

`lookup-search-agents'
     検索エージェントの設定のリスト。リストの各要素は次の形式を取る:

          (CLASS LOCATION [OPTION...])

     CLASS には、エージェントの種類をシンボルで指定する。LOCATION には、
     エージェントの所在を文字列で指定する。ARG は省略可能で、エージェン
     トに対する追加の引数を指定する。OPTIONS は省略可能で、同じく追加の
     オプションを指定する。

          例: (setq lookup-search-agents
                    '((ndtp "dserver" :port 2010)
                      (ndeb "/cdrom" :enable ("EIWA"))))

`lookup-default-agent-options'
     検索エージェントにデフォルトで与えるオプションのリスト。各オプショ
     ンは、タグとなるシンボルと、値となる任意のオブジェクトとのcons によっ
     て表わす。

`lookup-agent-options-alist'
     検索エージェントのオプションを設定する連想リスト。各要素の car には
     エージェントID(`"CLASS+LOCATION"')を指定し、cdr にはオプションのリ
     ストを指定する。

`lookup-default-dictionary-options'
     辞書にデフォルトで与えるオプションのリスト。各オプションは、タグと
     なるシンボルと、値となる任意のオブジェクトとのcons によって表わす。

`lookup-dictionary-options-alist'
     辞書のオプションを設定する連想リスト。各要素の car には辞書
     ID(`"CLASS+LOCATION:NAME"')を指定し、cdr にはオプションのリストを指
     定する。

`lookup-package-directory'
     補助パッケージが収められるディレクトリ。



File: lookup.info, Node: Setup Functions, Prev: Setup Variables, Up: Getting Started

セットアップ関数一覧
====================

`lookup-set-agent-option' ID TAG VALUE
     検索エージェントのオプションをセットする。ID はエージェントID。TAG 
     はオプションのタグ。VALUE はセットする値。

`lookup-set-dictionary-option' ID TAG VALUE
     辞書のオプションをセットする。ID は辞書ID。TAG はオプションのキー。
     `value' はセットする値。この関数は 
     `lookup-dictionary-options-alist' の値を書き換える。

`lookup-use-package' AGENT-ID PACKAGE-NAME
     補助パッケージをロードする。AGENT-ID は、パッケージを適用するエージェ
     ントID。PACKAGE-NAME は、パッケージ名、あるいはパッケージの絶対パス。
     絶対パスでない場合、パッケージは変数 `lookup-package-directory' が
     示すディレクトリに展開しておく必要がある。この関数は 
     `lookup-agent-options-alist' 及び`lookup-dictionary-options-alist' 
     の値を書き換える。



File: lookup.info, Node: How To Lookup, Next: Customization, Prev: Getting Started, Up: Top

検索を行なうには
****************

この章では、Lookup で検索を行なう方法について詳しく説明します。また、特
定の辞書から情報を得るための方法についても説明します。

* Menu:

* Startup Commands::            起動と終了
* Search String::               文字列検索
* See Result::                  検索結果の眺め方
* Specify Dictionary::          特定の辞書を利用する



File: lookup.info, Node: Startup Commands, Next: Search String, Prev: How To Lookup, Up: How To Lookup

起動と終了
==========

最初に Lookup を起動するためのコマンドは `M-x lookup' です。これは利用出
来る辞書の一覧をバッファに表示し、辞書選択モードに入ります。このバッファ
での操作については、*Note Specify Dictionary:: を参照して下さい。

`M-x lookup' を用いずとも、次節の検索コマンドをいきなり実行しても構いま
せん。一度検索が行なわれると、`M-x lookup' は最後の検索結果を再表示する
ようになります。一度 Lookup のウィンドウを閉じた後でも、もう一度結果を見
返すのに使えます。

Lookup を抜けるためのコマンドは `M-x lookup-suspend' です。これはLookup 
の各ウィンドウをいったん閉じて、検索を中断します。検索を完全にやめてしま
うときには、`M-x lookup-exit' が使えます。これはバッファやキャッシュの削
除、サブプロセスの終了などの作業を行ないます。Lookup の各バッファでは、
これらのコマンドはそれぞれ `q' と `Q' によって直接、または間接的に呼び出
されます。

Lookup を抜けたとき、変数 `lookup-save-configuration' の値が`non-nil' で
あれば、画面が検索を開始したときの状態に戻されます。これはデフォルトで 
`t' に設定されています。

Lookup の初期化ファイルを書き換えたときには、コマンド`M-x
lookup-restart' が利用出来ます。これは Lookup をいったん終了させた後、
`~/.lookup' を読み直して再初期化を行ないます。これは通常`R' に割り当てら
れています。



File: lookup.info, Node: Search String, Next: See Result, Prev: Startup Commands, Up: How To Lookup

文字列検索
==========

Lookup のもっとも一般的な検索方法は、検索語となる文字列を指定して検索を
行なうことです。以下、これについて詳しく説明します。

* Menu:

* Search Commands::             標準の検索コマンド
* Default Method::              標準の検索方式
* Search Methods::              検索方式のいろいろ



File: lookup.info, Node: Search Commands, Next: Default Method, Prev: Search String, Up: Search String

標準の検索コマンド
------------------

Lookup 標準の検索コマンドには、代表して次の五つのものがあります。

`M-x lookup-pattern'
     ミニバッファからの入力を検索語に検索を開始します。デフォルトの検索
     語として、ポイント位置の単語が取り出されます。

     この時、変数 `lookup-use-kakasi' の値が `non-nil' であれば、KAKASI 
     プログラムを利用して日本語の単語もそれなりに切り出します。これはデ
     フォルトでは `nil' になっています。

     最近の Emacs であれば、デフォルトの検索語はミニバッファで `M-n' と
     することで編集することが出来ます。

`M-x lookup-region'
     リージョンの文字列を検索語に検索を開始します。

`M-x lookup-word'
     ポイント位置の単語を検索語に検索を開始します。

``lookup-selection''
     マウスによる選択領域を検索語に検索を開始します。

     これをマウスの適当なボタンにバインドしておくと、それをクリックする
     ことで、そのときのマウスによる選択領域を検索語に検索を行なうことが
     出来ます。選択領域は Emacs のバッファである必要はなく、他のアプリケー
     ション上であっても構いません。

     これはイメージとしては、X Window System でのマウスによるコピー＆ペー
     ストとよく似ています。最初にコピーしたい領域をマウスで選択し、その
     後、コピー先のバッファで中ボタンをクリックすることでコピーは完了し
     ます。それと同様に、次のように設定しておくことで、Emacs のバッファ
     にペーストする代わりに、Lookup が検索を行なうようになります。

          (global-set-key [mouse-2] 'lookup-selection)

     ただし、こうしてしまうと、標準のペーストの動作が使えなくなったりす
     るので、実際には別のクリックにバインドしておくとよいでしょう。

``lookup-secondary''
     マウスによる第二選択領域を検索語に検索を開始します。

     Emacs の Secondary Selection の機能を用いて検索を行ないます。 (1)


     "Secondary Selection" とは、ポイントを移動させることなくマウスで特
     定領域を選択するための機能で、デフォルトでは `M-Mouse-1' にバインド
     されています。*Note (emacs)Secondary Selection::.

     これをうまく用いることで、マウスのダブルクリックやドラッグによって
     文字列を選択するだけで検索が行なえるようになっています。もし標準の
     バインドを置き換えてよいのであれば、次のように設定して下さい。

          (global-set-key [M-down-mouse-1] 'lookup-secondary)
          (autoload 'lookup-secondary "lookup" nil t)

     新たに定義するのであれば、例えば次のようにします。

          (global-set-key [S-mouse-1] 'mouse-start-secondary)
          (global-set-key [S-drag-mouse-1] 'mouse-set-secondary)
          (global-set-key [S-down-mouse-1] 'lookup-secondary)
          (autoload 'lookup-secondary "lookup" nil t)

     後者の例では、Shift キーを押しながら左のダブルクリックでカーソル位
     置の単語を、同じく領域をドラッグすることで選択部を検索するようにな
     ります。

これら四つのコマンドには更に、`-full-window' と `-other-frame' を付加し
たバリエーションがあります。つまり、全部で以下の十五の標準検索コマンドが
用意されています。

`M-x lookup-pattern'
     検索語を入力して検索する。
`M-x lookup-pattern-full-screen'
     `M-x lookup-pattern' と同じ。結果を画面全体で表示する。
`M-x lookup-pattern-other-frame'
     `M-x lookup-pattern' と同じ。結果を別のフレームで表示する。
`M-x lookup-region'
     リージョンの文字列を検索語に検索する。
`M-x lookup-region-full-screen'
     `M-x lookup-region' と同じ。結果を画面全体で表示する。
`M-x lookup-region-other-frame'
     `M-x lookup-region' と同じ。結果を別のフレームで表示する。
`M-x lookup-word'
     ポイント位置の単語を検索語に検索する。
`M-x lookup-word-full-screen'
     `M-x lookup-word' と同じ。結果を画面全体で表示する。
`M-x lookup-word-other-frame'
     `M-x lookup-word' と同じ。結果を別のフレームで表示する。
`lookup-selection'
     マウスでの選択領域を検索語に検索する。
`lookup-selection-full-screen'
     `lookup-selection' と同じ。結果を画面全体で表示する。
`lookup-selection-other-frame'
     `lookup-selection' と同じ。結果を別のフレームで表示する。
`lookup-secondary'
     Secondary Selection の文字列を検索語に検索する。
`lookup-secondary-full-screen'
     `lookup-secondary' と同じ。結果を画面全体で表示する。
`lookup-secondary-other-frame'
     `lookup-secondary' と同じ。結果を別のフレームで表示する。

`-other-frame' となっている各コマンドを用いたときのフレームのパラメータ
は、変数 `lookup-frame-alist' により与えられます。


--------- Footnotes ---------

(1)  現在、XEmacs では動作しません。たぶん。


File: lookup.info, Node: Default Method, Next: Search Methods, Prev: Search Commands, Up: Search String

標準の検索方式
--------------

`M-x lookup-pattern' で検索したい単語を入力したり、`M-x lookup-region' 
などで検索語を指定したときの標準の検索方式を"単語検索" と呼びます。これ
は実際には固有の検索方式ではなくて、後述する各種の検索方式を間接的に呼び
出すためのものです。

通常、検索語と完全にマッチしたエントリを探し出すことを「完全一致検索」と
言いますが、Lookup では多種類の辞書を扱う関係から、これをデフォルトとし
てしまうのでは少し問題があります。例えば `emacs' という単語を検索すると
き、辞書によっては見出し語として `GNU Emacs' としか持たないために、それ
が見付からないということがあります。これは辞書側の問題だと言えばそうかも
しれませんが、やはりそれでは不便なので、少し工夫が必要です。

もし辞書が `GNU Emacs' という見出し語しか持たなくとも、完全一致検索では
なく「キーワード検索」でということなら、それを見付け出すことも出来るかも
しれません。そのため標準の検索方式としては、辞書によって実際の検索方式を
切り換えながら検索してくれるのが便利です。そのため単語検索は、状況に応じ
て実際の振る舞いを適当に変化させるようになっています。

単語検索が実際に行なう検索方式は、変数 `lookup-default-method' により設
定することが出来ます。これはデフォルトでは `exact'、つまり完全一致検索と
なっています。これを前方一致検索にしたければ `prefix' とします。可能な検
索方式とそれに対応したシンボル名については、*Note Search Methods:: を参
照して下さい。

いくつかの検索エージェントでは、デフォルトの検索方式を上書きして、例えば
キーワード検索を行なうように設定されています。詳しくはエージェントの各節
を参照して下さい。また、特定のエージェントや辞書での検索方式を変えるには、
辞書オプション `:default-method' を用いることが出来ます。



File: lookup.info, Node: Search Methods, Prev: Default Method, Up: Search String

検索方式のいろいろ
------------------

文字列を指定する検索の中でも特に、`M-x lookup-pattern' のように特定のパ
ターンを入力して行なう検索のことを、Lookup では "パターン検索" と呼びま
す。パターン検索では、次のような特殊なパターンを指定することで、様々に検
索方式を切り換えることが可能です。それぞれの検索方式には固有のシンボル名
と記号が関連付けられており、いくつかの場所で利用されます。

word
単語検索 (`default', `~')
     標準の検索方式です。これは実際には、下記のいずれかの検索方式を間接
     的に呼び出すようになっています。*Note Default Method::.

'word'
完全一致検索 (`exact', `=')
     与えられた文字列と完全に一致する見出し語を持つエントリを検索します。
     この例では `word' や `Word' などが見付かります。

word*
前方一致検索 (`prefix', `<')
     与えられた文字列を見出し語の先頭に持つようなエントリを検索します。
     この例では `wordage' や `wording' などが見付かります。

*word
後方一致検索 (`suffix', `>')
     与えられた文字列を見出し語の末尾に持つようなエントリを検索します。
     この例では `keyword' や `headword' などが見付かります。

*word*
部分一致検索 (`substring', `-')
     与えられた文字列を見出し語の一部に含むようなエントリを検索します。
     この例では `unwordy' や `swordsman' などが見付かります。

w*o?d
グロブパターン
     上の三つを更に進めた表現として、任意のグロブパターンが指定出来ます。
     つまり文字 `*' が任意の文字列とマッチし、文字 `?' が任意の一文字と
     マッチします。この例では `word' や `womanhood' などが見付かります。

     この検索パターンは、実際にはパターンを正規表現に変換して検索を行な
     います。今の例では `^w.*o.d$' のように変換されます。従って、これを
     用いるには辞書が次の正規表現検索に対応していなければなりません。

/word/
正規表現検索 (`regexp', `r')
     与えられた正規表現とマッチする見出し語を持つエントリを検索します。
     入力はそのまま検索エージェントに渡されるため、正規表現のスタイルは
     利用するエージェントに依存します。

@word
キーワード検索 (`keyword', `@')
     辞書が見出し語だけでなくエントリ毎のキーワードを持つ場合、このパター
     ンによってそれを検索することが出来ます。何をキーワードとして持つか
     は利用する検索エージェントによって異なるため、それぞれのエージェン
     トについての説明を参照して下さい。

/word
全文検索 (`text', `/')
     これは他の検索方式とは少し異なります。他のものは辞書にあらかじめ用
     意されているインデックスから検索を行ないますが、これは辞書の全体か
     ら力ずくで検索語を探し出します。そのためしばしば非常に多くの検索時
     間を必要とするため、この検索パターンを指定すると確認のためのプロン
     プトが表示されます。

リファレンス (`:reference', `%')
     これは検索方式ではありませんが、同じく記号が割り当てられているので
     ここで説明しておきます。"リファレンス" とは、あるエントリと関連付け
     られている別のエントリのことを言います。通常、Web ページと同様に、
     エントリ本文から別のエントリへとリンクが張られています。

     他の検索方式を利用したのではなく、リンクを辿ってリファレンスを表示
     したときには、そのときの検索方式として上の記号が用いられます。

以上の全ての検索方式に辞書が対応しているわけではありません。辞書が対応し
ている検索方式を知るためには、最初に `M-x lookup' としたとき出力される辞
書一覧バッファを参照して下さい。(*Note Specify Dictionary::)

辞書が対応していない検索法が指定された場合には、現在は単純に無視されます。
これは将来的には未対応の通知を出すように変更するかもしれません。



File: lookup.info, Node: See Result, Next: Specify Dictionary, Prev: Search String, Up: How To Lookup

検索結果の眺め方
================

Lookup で検索が行なわれると、その結果は二つのウィンドウに分かれて表示さ
れます。一つは見つかったエントリの一覧を並べるためのもので、もう一つは各
エントリの本文を見るためのものです。以下、これらを見る方法について詳しく
説明します。

* Menu:

* See Entries::                 エントリを順に見る
* See Contents::                本文を詳しく見る
* Make Reference::              リファレンスを参照する
* Cite Contents::               本文を引用する



File: lookup.info, Node: See Entries, Next: See Contents, Prev: See Result, Up: See Result

エントリを順に見る
------------------

Entry バッファ(*Note Quick Search::)には、検索の結果、見付かったエントリ
の一覧が表示されます。`n'(ext) と `p'(revious) を押すことで、ポイントを
前後に移動して表示するエントリを切り換えることが出来ます。マウスの中ボタ
ンでクリックすることで、エントリを直接選択することも可能です。

`v'(iew) により Overview モードに入ります。これは Content バッファのウィ
ンドウをクローズし、エントリの一覧を一時的に見やすくします。Overview バッ
ファでは、`n' と `p' が単にポイントの移動だけを行なうようになります。も
う一度 `v' とするか SPC を押すことで、Overview モードを終了して元の動作
に戻ります。

Lookup は、過去に行なわれた検索の結果を履歴として記憶しています。過去の
検索結果を参照するには `M-p' を押していって下さい。逆に、元の検索結果に
戻るには `M-n' を押して下さい。



File: lookup.info, Node: See Contents, Next: Make Reference, Prev: See Entries, Up: See Result

本文を詳しく見る
----------------

Content バッファ(*Note Quick Search::)には、選択されているエントリの本文
が表示されます。これは SPC と DEL によって、Entry バッファ内から前後にス
クロールすることが出来ます。バッファの最後(最初)まで達すると、次(前)のエ
ントリに移動します。また、`<' や `>' によって、本文の最初と最後に移動す
ることも出来ます。

`o'(pen) を押すと、Lookup のウィンドウを画面全体に拡げて、Content バッファ
の内容を広く見ることが出来ます。Lookup のウィンドウを一度閉じれば、次か
らまた元に戻ります。

`s'(earch) によって、Content バッファで `isearch-forward' を実行します。
これを抜けるには `C-g' などとして下さい。

現在参照しているエントリの情報を `i'(nfo) によって知ることが出来ます。ま
た、`t'(oggle) によって、本文を整形する前のオリジナルの辞書内容を見るこ
とが出来ます。これらの情報は本文をカスタマイズする際に利用することが出来
ます。



File: lookup.info, Node: Make Reference, Next: Cite Contents, Prev: See Contents, Up: See Result

リファレンスを参照する
----------------------

エントリがリファレンスを持つ場合、`L'(inks) を押すことでそれを新たに 
Entry バッファに一覧します。単一のリファレンスのみ参照したい場合には、ま
ず `h' で Content バッファに移動し、TAB の連打で目的のリンクに移動した後、
RET とすればそれを辿ることが出来ます。あるいは目的のリンクを直接、マウス
の中ボタンでクリックしても構いません。

用いる辞書や検索エージェントによっては、リンクが見辛かったり、リンクを辿
ると一覧の見出しがおかしくなるなどの不満があるかもしれません。これは辞書
毎の差異に Lookup がデフォルトでは対応しきれないためです。リンクをより見
やすくするためには、*Note Reference Pattern:: を参照して各自で設定を行なっ
て下さい。



File: lookup.info, Node: Cite Contents, Prev: Make Reference, Up: See Result

本文を引用する
--------------

Entry バッファで `w'(rite) を押すと、エントリの本文をキルリングに保存し
ます。このとき次の変数によりその振る舞いを調節出来ます。

`lookup-cite-style'
     エントリ本文を引用するときのスタイル。

     `asis' にすると、Content バッファの内容がそのままコピーされる。
     `plain' にすると、プレーンテキストとして見やすいよう変換される。次
     のように alist を指定することで、更に細かく設定することも可能。

          ((KEY1 . VALUE1) (KEY2 . VALUE2) ...)

     KEY としては、次のものが指定可能。

     `gaiji'
          外字をコピーするときのスタイル。値として次のものが可能。
          `glyph'
               Content バッファに表示される内容。(`asis')
          `alternate'
               gaiji-table で指定された代替文字。(`plain')
          任意の文字列
               その文字列を利用。

`lookup-cite-header'
     エントリ本文を引用するときのヘッダ。

     コマンド `M-x lookup-entry-cite-content' 及び`M-x
     lookup-content-cite-region' により内容を取り込むとき、その先頭に指
     定した文字列が付け加えられる。文字列が `%T' を含む場合、辞書のタイ
     トルに置き換えられる。

`lookup-cite-prefix'
     エントリ本文を引用するときのプレフィクス。

     コマンド `M-x lookup-entry-cite-content' 及び`M-x
     lookup-content-cite-region' により内容を取り込むとき、各行の先頭に
     指定した文字列が付け加えられる。

例えば、設定を次のようにしておくと、

     (setq lookup-cite-style '((gaiji . "□")))
     (setq lookup-cite-header "「%T」より\n")
     (setq lookup-cite-prefix "| ")

次のような内容が保存されます。

     「国語辞典」より
     | テスト
     | □ 1. 試験....

これらの変数に対応して、それぞれ辞書オプション `:cite-style',
`:cite-header', `:cite-prefix' が指定することで、その設定が優先的に利用
されます。(*Note Dictionary Options::)

また、Content バッファに移動して `w' を押すことで、そのときのリージョン
の文字列だけコピーすることも可能です。 (1)


--------- Footnotes ---------

(1)  ただし現在、このとき cite-style の指定は無効です。手抜き・・・


File: lookup.info, Node: Specify Dictionary, Prev: See Result, Up: How To Lookup

特定の辞書を利用する
====================

Lookup の設定後、最初に `M-x lookup' とするか、あるいは検索開始後にEntry 
バッファ(*Note Entry Mode::)で `S' とすることで、Select モードに入ります。

このバッファには利用可能な辞書の一覧が表示されます。`%' とある列には辞書
の選択状態が示されており、`*' が選択、空白(` ')が未選択であることを表わ
しています。

`Identifier' とある列には辞書の ID が示されます。これは主に設定のために
用いられ、辞書の属する検索エージェントのクラス(CLASS)とその所在
(LOCATION)、そして辞書名(NAME)を用いてCLASS+LOCATION:NAME として表されま
す。

`title' とある列には、辞書のタイトルが示されます。これは主に表示のために
用いられ、辞書オプション `:title' によって変更可能です。(*Note
Dictionary Options::)

`Methods' とある列には、辞書が対応している検索方式が示されます。ここに並
べられる記号の列は、一文字がそれぞれ一つの検索方式を意味しています。その
対応については、*Note Search Methods:: にある一覧を参照して下さい。

バッファで `?'と入力すると、利用可能なコマンドについての簡易ヘルプが表示
されます。バッファを抜けるとヘルプも閉じられます。

コマンド `g'で現在のモジュールを初期化し直し、バッファを更新します。ただ
し、これはモジュール自体を再設定するわけではないので、設定ファイルでモ
ジュールの設定を変えた場合には、`R'により Lookup を再起動する必要があり
ます。

`q'でバッファを抜けます。`Q'で Lookup を終了します。

`n'と `p'によって、ポイントを上下に移動します。

`m'によりその行の辞書を選択し、`u'により非選択にします。また、`M-x
lookup-select-toggle-selected'により選択状態をトグルすることも可能です。

`a'により、全ての辞書を選択状態にします。RETにより、その行の辞書だけを選
択状態にすることも出来ます。

`d'を押すと、辞書に無効化のマークが付けられます。これは `x'を押すことで
実際に無効化されます。こうして無効化された辞書でも、Lookup を再起動する
か、`g' とすると元に戻ります。辞書を恒久的に無効化するためには、オプショ
ンにより設定して下さい。(*Note Setup Restriction::)

`f'によって、選択状態にある辞書から検索を行ないます。これは実際には、普
通に `M-x lookup-pattern' を行なうのと同じです。

`M'により、辞書専用のメニューに移ることが出来ます。これは実際にはただの 
Entry バッファで、リファレンスを辿っていくことにより辞書を「読む」ことが
出来ます。

`/'とすると、ポイント行の辞書から全文検索を行ないます。ただしもちろん、
辞書が全文検索に対応している必要があります。全文検索は完了までに非常に時
間が掛かる場合があるので注意して下さい。(*Note Search Methods::)



