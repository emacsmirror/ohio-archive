\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename tramp_ja.info
@settitle TRAMP User Manual
@setchapternewpage odd
@documentlanguage ja
@documentencoding euc-jp
@c %**end of header

@c XXX This is a euc-jp file. I know it is better to use iso-2022-jp 
@c XXX for htmlizing, but makeinfo doesn't work with it. 
@c XXX My configuration problem or need unofficial patch?

@c XXX Quick hack for Japanese translation. 
@c XXX Use @ifset ja for the contents only in Japanese version and
@c XXX the transrator's comment.
@c CCC test change by kai for permission check
@clear ja
@set ja

@c This is *so* much nicer :)
@footnotestyle end

@c Version values, for easy modification
@c NOTE: The 'UPDATED' value is updated by the 'time-stamp' function.
@c       If you change it by hand, the modifications will not stay.
@set VERSION $Revision: 1.8 $
@set UPDATED 2000 年 6 月 8 日 (Thu)
@c XXX VERSION and UPDATED are Japanese version's version and update date.
@c XXX If we need English version's one, we MUST use literal version and
@c XXX date strings.

@c Entries for @command{install-info} to use
@direntry
* TRAMP: (tramp).                Transparent Remote Access, Multiple Protocol
                                 Emacs remote file access via rsh and rcp.
@end direntry

@c Macro to make formatting of the tramp program name consistent.
@macro tramp
@sc{tramp}
@end macro

@c Copying permissions, et al
@ifinfo
This file documents @tramp{}, a remote file editing package for Emacs and
XEmacs.
     
Copyright @copyright{} 1999, 2000 Free Software Foundation, Inc.
     
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
     
@ignore 
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
   
@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
     
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end ifinfo

@tex

@titlepage
@title @tramp{} User Manual
@subtitle Last updated @value{UPDATED}

@author by Daniel Pittman
@author based on documentation by Kai Gro@ss{}johann
@page

@vskip 0pt plus 1filll
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
     
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
     
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.

@end titlepage
@page

@end tex

@ifnottex
@node Top, Copying, (dir), (dir)
@top @tramp{} ユーザーマニュアル

@tramp{} は `Transparent Remote (file) Access, Multiple Protocol'
を意味します。このパッケージは @cite{ange-ftp} や @cite{EFS} に似た
リモートファイルの編集機能を提供します。

違うのはファイルの転送方法です。ange-ftp は、ローカル、リモートホスト間の
ファイル転送に FTP を使用します。しかし、@tramp{} は @command{rsh} と 
@command{rcp}、あるいは他の同じようなプログラム、例えば @command{ssh} や 
@command{scp}を使用します。

これは @tramp{} のマニュアルバージョン 1.30 で、最後に更新されたのは
2000 年 6 月 6 日 (Tue)です。

@ifset ja
@c この部分は、オリジナル版から更新日時、バージョン文字列をコピーする必要あり。
@c XXX これは @tramp{} のマニュアルのバージョン @value{VERSION} で、最後に
@c XXX 更新されたのは @value{UPDATED} です。
[訳者注] 日本語訳のバージョンは @value{VERSION}で、最終更新日時は @value{UPDATED} です。
@end ifset

このドキュメントの最新バージョンは web サイト
@url{http://ls6-www.informatik.uni-dortmund.de/~grossjoh/emacs/tramp.html}
にあります。

@ifhtml
このマニュアルには @uref{tramp_ja.html, 日本語訳}が存在します。

@ifset ja
[訳者注] そう、あなたが見ている、これが日本語訳です。:-)
@end ifset

最新の @tramp{} は
@url{ftp://ls6-ftp.cs.uni-dortmund.de/pub/src/emacs/tramp.tar.gz} 
から入手できます。詳細は @ref{Obtaining @tramp{}} を参照してください。
CVS サーバーについての説明もあります。
@end ifhtml

@tramp{}のためのメーリングリスト @email{emacs-rcp@@ls6.cs.uni-dortmund.de}が
あります。アーカイブは 
@url{http://www.mail-archive.com/emacs-rcp@@ls6.cs.uni-dortmund.de/} 
にあります。

@end ifnottex


@menu
* Copying::                     @tramp{} の配布条件
* Overview::                    @tramp{} で可能な事、不可能な事

エンドユーザー向け:
* Obtaining @tramp{}::          @tramp{} の入手方法
* History::                     @tramp{} の歴史
* Installation::                @tramp{} のインストール
* Configuration::               @tramp{} の設定
* Usage::                       @tramp{} の使い方
* Bug Reports::                 バグや問題の報告
* Frequently Asked Questions::  よくある質問とその答

開発者向け:
* Version Control::             リモートバージョンコントロールの内部動作
* Files directories and paths:: ファイル名、ディレクトリ、パス名がどのように
                                変換され(mangled)、管理されるか
* Issues::			
@end menu


@node Copying, Overview, Top, Top
@chapter @tramp{} の配布条件

Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.

tramp.el is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

tramp.el is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with GNU Emacs; see the file COPYING. If not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.


@node Overview, Obtaining @tramp{}, Copying, Top
@chapter @tramp の概要

@tramp{} をインストールすると、リモートマシン上のファイルに、ローカル
ファイルと同じようにアクセスできます。編集のためのリモートファイル
システムへのアクセス、バージョンコントロール、@command{dired} が
透過的に可能です。

リモートマシンへのアクセスには、@command{rsh} や @command{rlogin}、
@command{telnet} コマンド、あるいはこれらに類似した接続方法が使用
されます。これらは ASCII を通過させる事が可能でなければなりませんが、
8-bit クリーンである必要はありません。

このパッケージは外部への @command{ssh} 接続をサポートします。これは、
このパッケージのもっとも一般的な使い方のひとつです。特に @command{ftp}
アクセスが許可されていない場合、他のマシンへの比較的セキュアなアクセス
が可能です。

@tramp{} によって実行されるアクティビティのほとんどは、リモートログイン
が可能で、端末上で実行できることだけを要求します。リモートファイルに
アクセスするために @tramp {} は、ファイルの内容を一時的にローカルマシン
上に転送します。

@tramp{} は、さまざまな方法でマシン間のファイル転送をおこないます。これら
の方法は簡単に選択でき、あなたのニーズとマシン環境に応じて使いわける事
ができます。

もっとも速い転送メソッドは、リモートファイルの転送パッケージ、たとえば
@command{rcp}、@command{scp}、@command{rsync} を使うものです。これらの
メソッドは、ファイルのコピーコマンドがリモートマシンのパスワードをたず
ねない場合にのみ有効です。

もし、リモートコピーメソッドが使えない場合のために、@tramp {} は、シェル
を直接使用した、符号化された転送方法をサポートしています。これを使う
ためには、@command{mimencode} か @command{uuencode} がリモートマシン
上に存在しなければなりません。

上記の制限内であれば、@tramp{} は非常にパワフルです。注意しておかなければ
ならないのは、今現在は、エンドユーザー向けの洗練された製品とはほど遠い
状態であるということです。もうしばらくの間は、時々、ちょっと困った事に
なったり、コードに問題があるかもしれないということを念頭においておいて
ください。

すでに開発者が日々の作業に使う事ができる程度には安定しています。しかし、
インストールと設定を覚えるのは、専門用語のせいでほんの少し難しいでしょう。

@tramp{} は、まだアクティブに開発をしている最中です。したがって、どんな些細
な問題であっても、ぜひ @tramp{} 開発者に報告してください。
@xref{Bug Reports}.


@subsubheading 舞台の裏側

このセクションでは、@tramp{} でリモートファイルにアクセスした時に、舞台の
裏側で何がおこっているかを説明します。

@kbd{C-x C-f} とタイプし、@tramp{} のファイル名の一部を入力したとしましょう。
それから、ファイル名の補完のために @kbd{@key{TAB}} を押します。そして該当
ホストにたいして初めて @tramp{} を起動したとしましょう。この場合、以下の事が
おこります。

@itemize
@item
@tramp{} は、これが他のホストへの接続を必要とすることを発見します。それから
@command{telnet HOST} か @command{rsh HOST -l USER} あるいは、その他の
リモートホストへ接続するためのツールを起動します。これらのプロセスとの
コミュニケーションは Emacs のバッファーを経由しておこなわれます。したがって、
リモートホストからの出力はこのバッファーに出力されます。

@item
リモートホストは、ログイン名のプロンプトを表示します(@command{telnet} の場合)。
ログイン名は、入力されたファイル名に含まれているので、@tramp{} はログイン名と
改行を送信します。

@item
リモートホストは、パスワードあるいはパスフレーズのプロンプトを表示します
(これは@command{rsh} の場合、@command{telnet} の場合はログイン名を送信した後)。
@tramp{} はミニバッファーにプロンプトを表示し、パスワードまたはパスフレーズを
たずねます。

あなたがパスワードかパスフレーズを入力すると、@tramp{} はそれをリモート
ホストに送信し、次に改行を送信します。

@item
@tramp{} は、シェルプロンプトか、ログインに失敗した旨のメッセージを待ちます。

もし、@tramp{} が、一定時間(たとえば一分)待っても、これらのメッセージを発見
することができなかったら、リモートシェルのプロンプトを発見できなかった旨の
メッセージを出力し、リモートホストが送信してきた内容を表示します。

もし、@tramp{} が「login failed」というメッセージを発見したら、それをあなた
に伝えます。それからログインを中止し、再びログインを試みることができます。

@item
ログインに成功し、@tramp{} がシェルプロンプトを発見したとします。ここで、
@tramp{} は @command{/bin/sh} を起動します。これは、Bourne シェルと C シェル
では文法体系が異なるためです。@footnote{ログインシェルが 
@command{exec /bin/sh} を正しいコマンドとして認識しないために、
@command{/bin/sh の起動}に失敗することがあるかもしれません。たぶん、あなた
は Scheme シェル @command{scsh} を使っているのでしょう@dots{}}

Bourne シェルが起動されたら、@tramp{} は、確実に動作する環境を準備するために
いくつかのコマンドを送信します。echo をオフにし、シェルプロンプトを設定した
り、その他いくつかの事をおこないます。

@item
今や、リモートシェルが起動し、きちんと動く状態になりました。
ところで、何がおこると期待されていたかを思いだしてください、
@tramp{} が、リモートホスト上にどのようなファイルが存在するかを調べ、
ファイル名の補完を可能にすることです。

そこで、@tramp{} は @command{cd} と @command{ls} コマンド、そして時々
globbing とともに @command{echo} を発行します。これ以外に、ファイルが書き
込み可能かどうか、ディレクトリかどうか等を調べるための @command{test} が、
しばしば使用されます。すべてのコマンドの出力は、必要なオペレーションのため
にパースされます。

@item
ファイル名の補完が完了し、@kbd{C-xC-f}と完全なファイル名を入力し、
@kbd{@key{RET}} を押したとしましょう。ファイルを編集するために、リモート
ホストからローカルホストにファイルの内容を転送する時が、ようやくやって
きました。

@tramp{} がどのようにファイルの内容を転送するのかという説明は、上を見て
ください。

インライン転送のために、@tramp{} は @command{mimencode -b /path/to/remote/file}
のようなコマンドを発行し、出力がコミュニケーションのためのバッファーに
蓄積されるまで待ちます。そして、ファイルの内容を作成するために、出力を
復号化します。

out-of-band 転送のために、@tramp{} は 
@command{rcp user@@host:/path/to/remote/file /tmp/tramp.4711} のような
コマンドを発行します。そして、ローカルな一時ファイル @file{/tmp/tramp.4711}
をバッファーに読み込み、一時ファイルを削除します。

@item
今、あなたはバッファーの内容を編集しています。しかし、幸運にも舞台裏で何が
おこっているのかに気がつきません(このセクションを読むまでは、そうでしょう)。
作業が終り、バッファーを保存するために @kbd{C-x C-s} を押します。

@item
再び、@tramp{} はファイルの内容をリモートホストにインラインか out-of-band
で転送します。これは、ファイルを読み時におこっている事と逆です。

@end itemize

@tramp{} を使いファイルをオープンした時に、舞台裏でおこっている事の
基本的な概要を、この説明でわかってもらえることを願っています。


@c For the end user
@node Obtaining @tramp{}, History, Overview, Top
@chapter @tramp{} の入手方法

@tramp{} は、インターネット上でフリーに配布されています。最新版は
@url{ftp://ls6-ftp.cs.uni-dortmund.de/pub/src/emacs/tramp.tar.gz}
からダウンロード可能です。この中には、インストールに必要な @tramp{}
のすべてのドキュメントとソースコードが含まれています。

冒険家のために @tramp{} は CVS から入手可能です。CVS から入手したバージョン
はソースコードの最新バージョンです。したがって、不完全な機能や新たな問題
をかかえているかもしれません。このバージョンは、自分の責任で使用してください。

@tramp {} の最新の開発バージョンを CVS (@command{cvs(1)}を参照してください)
から入手するためには、以下のコマンドを実行してください(ボールドの文字を
入力してください):

@example
] @strong{cd ~/lisp}
] @strong{cvs -d :pserver:cvs@@bonny.cs.uni-dortmund.de:/services/emacs-rcp/cvsroot login}
(Logging in to cvs@@bonny.cs.uni-dortmund.de)
CVS password: @strong{(just hit RET here)}
@dots{}

] @strong{cvs -d :pserver:cvs@@bonny.cs.uni-dortmund.de:/services/emacs-rcp/cvsroot get tramp}
@end example

これで、@tramp{} の最新バージョンが含まれるディレクトリ @file{~/lisp/tramp}
ができているはずです。以下のコマンドを実行することにより、最新のバージョン
に更新することができます:

@example
] @strong{cd ~/lisp/tramp}
] @strong{cvs update -d}
@end example


@node History, Installation, Obtaining @tramp{}, Top
@chapter @tramp{} の歴史

@tramp{} の開発は 1998 年の 11月の下旬に始まりました。その当時は、この
パッケージは `rssh.el' と呼ばれていました。ファイルにアクセスするための、
たったひとつのメソッドがあるだけで、@command{ssh} を使用し、リモートホスト
にログインし、@command{scp} でファイルの内容を転送していました。しばらく
して、名前が `rcp.el' に変わり、今は @tramp{} と呼ばれています。これに伴い、
リモートシェルを起動し、ファイルの内容を転送する多くのメソッドが追加され
ました。また、VC サポートも追加されました。

もっとも最近の大きな機能追加は、2000年4月のマルチホップメソッドです。


@node Installation, Configuration, History, Top
@chapter @tramp{} のインストール

@tramp {} をインストールするのは比較的簡単です。すくなくとも、あなたの
マシンを一から再構築するよりは。;)

真面目な話、インストール方法は非常にシンプルです。

@file{tramp.el} を Emacs の @var{load-path} に設定されているディレクトリ
へ置いた後、@tramp{} ライブラリーをロードするだけです。

@tramp {} と @command{efs} や @command{ange-ftp} パッケージの相互作用
のために、@tramp{} パッケージが Emacs にロードされる@emph{前}に、これらの
パッケージは @emph{ロードされていなければなりません}。

もし、これらのパッケージをロードしていなければ、@tramp{} は、ひどく、
腹立だしい状態におちいります。これは、好ましくありません。

GNU Emacs では、以下のコマンドを @file{.emacs} に追加してください:

@example
(require 'ange-ftp)     @i{; GNU Emacs ships with this}
(require 'tramp)
@end example

XEmacs では、以下のものです:

@example
(require 'efs)          @i{; XEmacs uses EFS rather than ange-ftp}
(require 'tramp)
@end example


XEmacs ユーザーは、@command{fsf-compat} パッケージをインストールして
おかなければなりません。パッケージのインストール方法については、
@ref{Packages, , ,xemacs} を参照してください。



@node Configuration, Usage, Installation, Top
@chapter @tramp{} の設定


@tramp{} はインストール時に完全に機能する状態になっています。初期状態では、
リモートホストへの接続に @command{rsh} と @command{rcp} プログラムを使用
するように設定されています。

もし、リモートホストとの接続にこれらのコマンドを使用したくないのであれば、
@tramp{} のデフォルトの接続と転送メソッドを変更してください。@tramp{} が
リモートマシンに接続し、ファイルを転送するのに使うことのできるメソッドが
いくつかあります (@pxref{Connection types})。


@menu
* Connection types::            リモートマシンへの接続の種類
* Inline methods::              インラインメソッド
* External transfer methods::   外部転送メソッド
* Multi-hop Methods::           マルチホップを使用したリモートホストへの接続
* Default Method::              デフォルトのメソッドの選択
* Customizing Methods::         非標準のメソッドを使う
* Remote Programs::             リモートマシン上で @tramp{} がプログラムを発見、使用する方法
@end menu


@node Connection types, Inline methods, Configuration, Configuration
@section リモートマシンへの接続の種類

転送メソッドには二つの基本的なタイプがあり、それぞれに長所、短所があります。
両者ともに、@command{rsh} や @command{ssh}、@command{telnet} のようなリモー
ト側のシェルにアクセスするプログラムを使用し、リモートマシンに接続します。

この接続は、@tramp{} がローカルマシンからリモートマシンへ透過的にアクセス
するためのさまざまなオペレーションをおこなうために使われます。ただし、
これは異なるファイルをオープンした時にだけ使われます。

リモートファイルを読み込んだり、保存する時には、二つのマシン間でファイル
の内容を転送する必要があります。ファイルの内容は、マシンにログインしたの
と同じ接続か、@command{rcp} や @command{scp}、@command{rsync}などのリモート
コピープログラムを使用した別の接続で転送されます。前者は 
@dfn{インラインメソッド}、後者は @dfn{外部転送メソッド}とよばれます。

外部転送メソッドの性能は、一般にインラインメソッドよりすぐれています。
インライン転送では、データの符号化、復号化をおこなう必要があるからです。

このルールの唯一の例外は、@command{scp} をもとにした転送メソッドです。
これらのメソッドは実際のファイル転送よりも高性能なので、転送開始時の
暗号化にかかわるネゴシエーションのオーバーヘッドは、ファイル転送時の
性能向上を帳消しにします。

外部転送メソッドを使うためには、リモートコピーコマンドが対話的でない、
つまりコマンドがパスワードのためにプロンプトを出力しないことが必要です。
もし、パスワード入力なしのリモートコピーコマンドを使う事ができないので
あれば、インラインメソッドを使う必要があります。

インラインメソッドの一種に、@dfn{マルチホップメソッド} があります。
このメソッドを使うと、いくつかのホップを使い、リモートホストへ接続
できます。これは、あなたがセキュアなネットワークの中にいて、要塞ホスト
を経由して外部に接続する場合に便利です。


@node Inline methods, External transfer methods, Connection types, Configuration
@section インラインメソッド

@tramp{} のインラインメソッドは大変強力で、外部転送メソッドを使う事ができ
ない状況でも動作します。インラインメソッドは、telnet 経由でリモートマシ
ンに接続している時に動作する唯一のメソッドです。(ホスト間でなく 
@emph{ユーザー} 間のファイル転送を可能にする、ちょっと変わったメソッドも
あります。以下を参照してください)

これらのメソッドを使うためには、符号化、復号化のためのコマンドが、リモート
マシン上に存在しなければなりません。ローカルマシン上では、@tramp{} はファイル
を復号化、符号化する Emacs の機能を使うか、外部コマンドを使用します。

@tramp{} は ファイル転送のために @command{uuencode} を使うことができます。
しかし、これはあまりお勧め @emph{できません}。@command{uuencode} と 
@command{uudecode} コマンドは標準化されていません。すくなくともいくつかの
マシン、AIX と IRIX では正しく動作しないでしょう。これらのシステム上では、
@command{uuencode} が動作しません。(@var{tramp-methods} のドキュメントにお
ける AIX に関する注意を見てください)

手短にいうと、もし、@command{mimencode} を使い base64 で符号化された
データを転送するのであれば、最近の Emacs の組み込みコマンドを使用する
ほうが性能面で有利です。

@itemize
@item @option{rm}  ---  @command{rsh} と @command{mimencode}

リモートホストに @command{rsh} で接続し、マシン間のファイル転送に
base64 エンコーディングを使用します。

このメソッドを使うためには、@command{metamail} パッケージに含まれる 
@command{mimencode} コマンドが必要です。このコマンドはリモートマシン
すべてにインストールされているわけではありません。


@item @option{sm}  ---  @command{ssh} と @command{mimencode}

リモートホストに @command{ssh} で接続し、マシン間のファイル転送に
base64 エンコーディングを使用します。

よりセキュアな接続をおこなうために @command{ssh} パッケージを使用する
こと以外は、前のオプションと同じです。

このメソッドにはふたつのバリエーション、@option{sm1} と @option{sm2} 
が存在します。これらは @command{ssh1} と @command{ssh2} を明示的に指定します。
もし、これらが何か知らない場合は、このオプションを使う必要はありません。


@item @option{tm}  ---  @command{telnet} と @command{mimencode}

リモートホストに @command{telnet} で接続し、マシン間のファイル転送に
base64 エンコーディングを使用します。

このメソッドを使うためには、@command{metamail} パッケージに含まれる
@command{mimencode} が必要です。


@item @option{ru}  ---  @command{rsh} と @command{uuencode}

リモートホストに @command{rsh} で接続し、マシン間のファイル転送に
@command{uuencode} と @command{uudecode} を使用します。


@item @option{su}  ---  @command{ssh} と @command{uuencode}

リモートホストに @command{ssh} で接続し、マシン間のファイル転送に
@command{uuencode} と @command{uudecode} を使用します。

上で説明した、@command{ssh} と base64 オプションと同様に、
明示的に ssh のバージョンを選択するための @option{su1} と @option{su2} 
メソッドがあります。

このメソッドは、@command{su} プログラムを起動しません。@command{su}
を使うメソッドについては下を参照してください。


@item @option{tu}  ---  @command{telnet} と @command{uuencode}

リモートホストに @command{telnet} で接続し、マシン間のファイル転送に
@command{uuencode} と @command{uudecode} を使用します。


@item @option{sum} --- @command{su} と @command{mimencode}

このメソッドは、まったくリモートホストに接続しません。かわりに、
@command{su} プログラムを使い他のユーザーになり、ファイルを編集すること
ができます。ファイルの内容を転送するために base64 エンコーディングを使用
します。


@item @option{suu} --- @command{su} と @command{uuencode}

@option{sum} と同様に、他のユーザーになり、ローカルホスト上のファイルを
編集するために、@command{su} を使用します。ファイルの内容を転送するために 
@command{uudecode} を使用します。


@item @option{sudm} --- @command{sudo} と @command{mimencode}

このメソッドは、@option{sum} メソッドに似ていますが、違うユーザー
になるために @command{su} でなく @command{sudo} を使用します。

そのユーザーでシェルを起動できるように、@command{sudo} が設定されていな
ければなりません。@command{ls} と @command{mimedecode} の起動を許可する
だけで十分ならよいのですが、そのように実装するのは簡単ではなく、いまだに
できていません。


@item @option{sudu} --- @command{sudo} と @command{uuencode}

このメソッドは、@option{suu} メソッドによく似ていますが、違うユーザー
になるために @command{su} でなく、@command{sudo} を使用します。


@end itemize



@node External transfer methods, Multi-hop Methods, Inline methods, Configuration
@section 外部転送メソッド

外部転送メソッドは、複数の経路を経由し動作します、
いくつものアクションのためにリモートシェル接続を使い、ファイル転送は
外部プログラムに委譲します。

これは、インライン転送時のひとつの接続を使った多重化転送のための符号化、
復号化のオーバーヘッドを削減します。

外部転送メソッドを使いたい場合は、ファイルをコピーするための転送ユーティ
リティが、パスワード入力なしで実行できなければなりません。

つまり、@command{scp} を使う場合には、@command{ssh-agent} を使う必要が
あるということです。もし、@command{ssh} 経由で @command{rsync} を使う
場合も、同じルールが適用されます。

もし、パスワード入力なしで @command{scp} を実行することができないが、
接続をセキュアにするための @command{ssh} を使いたい場合は、@command{ssh}
ベースのインラインメソッドを参照してください。


@itemize
@item @option{rcp}  ---  @command{rsh} と @command{rcp}

このメソッドは @command{rsh} と @command{rcp} を使い、リモートマシン
に接続し、ファイルを転送します。これは、たぶん最速のメソッドです。


@item @option{scp}  ---  @command{ssh} と @command{scp}

リモートホストへの接続のための @command{ssh} や、マシン間のファイル転送
のための @command{scp} は、リモートマシンへのセキュアな接続とファイル
アクセスのための最良のメソッドです。

このオプションの性能も優れています。しかし、小さいファイルのオープン、
クローズを頻繁に繰り返す場合は、インラインメソッドより遅くなります。
@command{scp}セッション開始時の暗号化のためのハンドシェークのコストは、
符号化、復号化をおこなわない利点を吸収します。


@item @option{rsync}  ---  @command{ssh} と @command{rsync}

リモートホストにセキュアに接続するために @command{ssh} コマンドを、
ファイル転送のために @command{rsync} を使うのが、@option{scp}
メソッドの特徴です。

両側のホスト上に存在するファイルを転送する場合、@command{rsync} は
@command{scp} より高性能です。この利点は、ファイルが片側のホストに
しかない場合には失なわれます。

リモートシステムへ書き込む場合、@command{rsync} ベースのメソッドは
@command{rcp} ベースのメソッドよりかなり速いしょう。しかし、ローカル
マシンのファイルを読み込む場合は、直接のコピーより速いとはいえません。


@item @option{scpx} --- @command{ssh} と @command{scp}

期待通り、このメソッドは、ほんの少し違うだけで、ほとんど @option{scp} 
そっくりです。@option{scp} が、リモートホスト上で通常の対話的シェルを
起動するのに対して、このオプションは、接続をオープンするために
 @command{ssh -t HOST -l user /bin/sh} を使います。
これは、通常のログインシェルがログイン時にいくつかの質問をおこなうように
設定されている場合に役に立ちます。このメソッドはこれらの質問を避け、
@tramp{} で動作する、より標準的、あるいは非標準的(more-or-less `standard')
なログインシェルを起動します。

@end itemize

@node Multi-hop Methods, Default Method, External transfer methods, Configuration
@section 複数のホップを使いリモートホストに接続する

これまでに説明したメソッドでは不十分な事があります。シンプルなメソッドを
使ってリモートホストに接続できないことがあります。たとえば、セキュアな
ネットワークの中にいる場合、外部に接続する前に、まず要塞ホストにログイン
しなければならないでしょう。もちろん、ターゲットホストは要塞ホストも要求
します。マルチホップのファイル名のフォーマットは、通常の @tramp{} のメソッド
とすこし異なります。

マルチホップのファイル名は、メソッド名、ホップ数、リモートホスト上の
パス名を指定します。メソッドは、インライン接続でどのようにファイルが
転送されるかを指定します。以下のふたつのマルチホップメソッドが存在します。

@itemize
@item @option{multi} --- @command{mimencode} を使用した base64 符号化

ファイルは base64 符号化された接続を使い転送されます。
符号化と復号化のために、@command{mimencode} プログラムを使用します。
しかし、ローカルホスト上では、可能なら Emacs の内部実装を使用します。

@item @option{multiu} --- コマンド @command{uuencode} と @command{uudecode} を使用する

ファイルは、`uu' 符号化(encoding)を使用した接続を使い転送されます。
符号化と復号化のために、@command{uuencode} と @command{uudecode} プログラム
を使用します。しかし、ローカルホスト上では、可能なら復号化のために lisp 
実装を使います。

@end itemize

それぞれのホップは @dfn{ホップメソッド}名、ユーザー名、ホスト名で構成
されます。以下のホップメソッドが(今、現在)存在します。

@itemize
@item @option{telnet}

ホストへの接続に、有名な(wll-known) @command{telnet} プログラムを使用します。
ユーザー名とホスト名はファイル名の中に含まれ、パスワードをたずねられます。

@item @option{rsh}

ホストへの接続に、@command{rsh} を使用します。@command{rsh} が明示的に
パスワードをたずねる場合以外は、パスワードを入力する必要はありません。

@item @option{ssh}

このメソッドは、ホストへの接続へ @command{ssh} を使用します。パスワード
かパスフレーズを入力する必要があります。

@item @option{su}

このメソッドは他のホストへまったくアクセスしません。そのかわり、今いる
ホスト上で他のユーザーになることができます。これは、ルートとしてファイル
を編集したいが、リモートホストはリモートからのroot のログインを許可してい
ない場合に役に立ちます。このような場合、一般ユーザーでのリモートホスト
への接続に、@option{telnet}、@option{rsh} あるいは @option{ssh} を使う
ことができます。それから、root になるために @option{su} ホップを使います。
@option{su} は、一連のシークエンス中の最後のホップである必要はありません。
必要になれば、ホップ中のどこででも使うことができます。

@option{su} ホップと一緒にユーザーとホスト両方を指定しなければなりません。
しかし、ホスト名は無視され、ユーザー名だけが使用されます。

@item @option{sudo}

これは @option{su} ホップに似ています。違うユーザーになるために
@command{su} でなく @command{sudo} を使用する点が異なります。

@end itemize


@node Default Method, Customizing Methods, Multi-hop Methods, Configuration
@section デフォルトのメソッドの選択

普段よく使う適切な転送メソッドを選択するには、変数 @var{tramp-default-method}
に、それを設定しなければなりません。この変数は、@tramp{} ファイルパスにメソッド
が指定されなかった時に、どのメソッドが使用されるかを制御します。

一般的にはインライン転送メソッドより外部転送メソッドを選ぶべきです。
外部転送メソッドはインラインより高性能です。パスワード入力なしでログ
インできるリモートマシンがたくさんある場合は役に立ちません。

@xref{Inline methods}.
@xref{External transfer methods}.
@xref{Multi-hop Methods}.

転送メソッドの選択をする時に他に考慮すべき事は、それらを使う環境と、
特にインターネット上で使う場合、あなたの選択したメソッドのセキュリティ
との関係です。

@command{rsh} と @command{telnet} メソッドは、リモートマシンにログインする
時に、パスワードをプレインテキストで送信します。ファイル転送も同じ方法で
おこなうので、他もマシンからファイルの内容を簡単に読むことができます。

インターネットからアクセス可能なリモートシステムに接続する必要がある場合、
接続に @command{ssh} ベースのメソッドを使用することを真剣に考えるべきです。
このメソッドは、高いレベルのセキュリティを提供し、誰かがパスワードを入手
したり、編集しているファイルの内容を読んだりすることを難しくします。

@node Customizing Methods, Remote Programs, Default Method, Configuration
@section 非標準のメソッドを使う

事前に定義されたメソッドでは正しく動作しない場合に、それを変更する
ための @code{tramp-methods} という変数があります。

変更が必要になった時のために、この変数の Lisp ドキュメントについて述べて
おきます。ドキュメントは @kbd{C-h v tramp-methods @key{RET}} で参照する
ことができます。

@node Remote Programs,  , Customizing Methods, Configuration
@section リモートマシン上で @tramp{} がプログラムを発見、使用する方法

@tramp{} はリモートホスト上のいくつかのプログラム、@command{ls}、
@command{test}、@command{find} そして @command{cat} に依存しています。
に依存しています。

これらのツールにくわえ、コネクションメソッドのためのいくつかのツールが
必要です。詳細は @ref{Inline methods} と @ref{External transfer methods} 
を参照してください。

いくつかの他のツール、@command{perl} (あるいは @command{perl5}) と
@command{grep} が存在すれば、それらも使用されます。これは、性能と
リモートファイルアクセスの精密性の向上のためです。

@tramp{} はリモートマシンに接続した時、使用可能なプログラムを検索します。
変数 @var{tramp-remote-path} は、リモートマシン上で検索されるディレクトリ
を制御します。

デフォルトでは、多くのマシンにとって適切なパスが設定されています。
しかしながら、ローカル(あるいはリモート)システムの管理者が、必要な
ツールをへんぴなディレクトリにインストールしているかもしれません。

このような場合でも、@tramp{} を使う事はできます。単に、必要なディレクトリ
をリモートパスに追加するコードを、@file{.emacs} に書くだけです。これで、
接続時に @tramp{} によって追加したディレクトリが検索され、プログラムが
発見されます。

リモートサーチパスにディレクトリを追加するためには、以下のような
コードを使ってください:

@example
(require 'tramp)                @i{; @tramp{} を最初にロードして}
                                @i{; おかなればならない}

@i{; @command{perl} は "/usr/local/perl" にあります}
(add-to-list 'tramp-remote-path "/usr/local/perl")
@end example


@node Usage, Bug Reports, Configuration, Top
@chapter @tramp{} の使い方

@tramp{} をインストールすると、完全に透過的に動作します。ログイン可能な
リモートマシン上のファイルに、あたかもローカルファイルのようにアクセス
することができます。

@tramp{} では、formalized シンタックスを使いファイルを指定します。これは、
@command{EFS} と @command{ange-ftp} パッケージのシンタックスに似ています。


@menu
* Filename Syntax::             @tramp{} ファイル名のきまり
* Multi-hop filename syntax::   マルチホップファイル名のきまり   
* Dired::                       Dired とファイル名の補完
@end menu


@node Filename Syntax, Multi-hop filename syntax, Usage, Usage
@section @tramp{} ファイル名のきまり

リモートマシン<マシン>上のファイル<パス>にアクセスするためには、
ファイル名 @file{/r:<マシン>:<パス>}を指定してください。これで、
<マシン>に接続し、デフォルトメソッドを使用しファイルを転送します。
@xref{Default Method}.

@tramp{} のファイル名の例をいくつかお見せしましょう:

@table @file
@item /r:melancholia:.emacs
マシン @code{melancholia} 上のホームディレクトリにある @file{.emacs}を
編集します。

@item /r:melancholia.danann.net:.emacs
完全なホスト名(FQDN)を使い、上と同じファイルを編集します。

@item /r:melancholia:~/.emacs
これもまた同じファイルを編集します。@file{~} は、ローカルの場合と
同様に、リモートマシン上のホームディレクトリに展開されます。

@item /r:melancholia:~daniel/.emacs
マシン @code{melancholia} 上のユーザー @code{daniel} のホームディレクトリ
にあるファイル @file{.emacs} を編集します。@file{~<ユーザー>} 構文は
リモートマシン上のユーザーのホームディレクトリに展開されます。

@item /r:melancholia:/etc/squid.conf
マシン @code{melancholia} 上のファイル @file{/etc/squid.conf} を編集
します。

@end table

違う名前を使うように指定しない限り、@tramp{} は現在のローカルなユーザ名を
ログインのためのリモートユーザー名として使います。もし、違うユーザーで
ログインする必要がある場合は、ファイル名の一部としてユーザー名を指定する
ことができます。

指定したユーザーでリモートマシンにログインする必要がある場合、
@file{/r:<ユーザー>@@<マシン>:/パス/ファイル} というシンタックスを
使ってください。つまり、@code{daniel} として @code{melancholia}に接続し、
ホームディレクトリの @file{.emacs} を編集する場合、
@file{/r:daniel@@melancholia:.emacs} を指定すればよいのです。

ファイル名の一部として、他のファイル転送メソッド(@pxref{Default Method})
を指定することもできます。これは、最初の @file{/r:} を、@file{r@@<メソッド>:>}
でおきかえることで可能になります。ユーザー、マシン、ファイルの指定は今までの
と同じです。 

マシン @code{melancholia} に @code{daniel} として接続し、ファイル転送に
@option{su} メソッドを使い、ホームディレクトリの @file{.emacs} を編集する
ためには、ファイル名 @file{/r@@su:daniel@@melancholia:.emacs} を指定して
ください。


@node Multi-hop filename syntax, Dired, Filename Syntax, Usage
@section マルチホップファイル名のきまり

マルチホップファイル名のシンタックスは、当然のことながら、他の @tramp{} 
のファイル名と若干異なります。以下に、マルチホップファイル名の例をあげます:

@file{/r@@multi:rsh#out@@gate:telnet#kai@@real.host:/path/to.file}

これは非常に重要なので、ひとつひとつ説明しましょう。ファイル名は、
コロンで区切られた 3 つのパーツで構成されています。最初のパート
@file{/r@@multi} はメソッドの指定です。二番目のパートは
@file{rsh#out@@gate:telnet#kai@@real.host} でホップを指定します。
(そうです、二番目のパートはこれ以上のコロンを含むこともあります。
そして、これがファイル名が二つ以上のコロンを含む理由です。)
最後のパートは @file{/path/to.file} で、リモートホスト上のファイル名を
指定します。

最初と最後のパートは明白でしょう。@ref{Multi-hop Methods}にメソッド指定
のためのリストがあります。

二番目のパートは、再度コンポーネントに分割されます。これはホップと
よばれます。上記のファイル名には、二つのホップ、
@file{rsh#out@@gate} と @file{telnet#kai@@real.host} が含まれています。

それぞれのホップは、@emph{再び}(3つの)コンポーネント、
@dfn{ホップメソッド}、@dfn{ユーザー名}、@dfn{ホスト名}に分割されます。
二番目、三番目のコンポーネントの意味は明白です。ホップメソッドは、
このホップで、どのようなプログラムを使うかを意味しています。

最初のホップ、@file{rsh#out@@gate} は、ホスト@code{gate}にユーザー
@code{out}としてログインするために @command{rsh} を使うという意味です。
二番目のホップ、@file{telnet#kai@@real.host} は、このホストからホスト 
@code{real.host}にユーザー @code{kai}でログインするために、
@command{telnet}を使うという意味です。

@xref{Multi-hop Methods} にホップメソッドのリストがあります。
変数 @var{tramp-multi-connection-function-alist} には、選択可能なホップ
メソッドのリストと、それらをどのように実行するかという情報が含まれています。
あなた作ったメソッドをそこに追加してください。


@node Dired,  , Multi-hop filename syntax, Usage
@section Dired とファイル名の補完

@tramp{} は dired とでも透過的に動作します。この強力なファイル管理
ツールを使い、インターネットを経由しアクセス可能なすべてのマシン上の
ファイルを管理できます。

リモートマシン上のファイル名の補完も @tramp{} では可能です。しかし、
現段階ではユーザー名とマシン名の補完はできません。

ファイル名の補完は、リモートマシンからファイルの一覧を取得するので、
時々、非常に時間がかかる事があります。@tramp{} には、ディレクトリ一覧
の結果をキャッシュする仕組がまだないので、二度目のファイル名補完の時も
性能は変わりません。

ディレクトリツリーをブラウズしたい場合は、今のところファイル名の補完より
dired を使うほうが良いでしょう。dired は自身でキャッシュの仕組をもっている
ので、ファイル一覧を一度しか取得しません。


@node Bug Reports, Frequently Asked Questions, Usage, Top
@chapter バグや問題の報告

@tramp{} のバグや問題は、開発チームによってアクティブに解決されています。
仕様に関するリクエストや、提案も歓迎します。

@tramp{} メーリングリストは、@tramp{} の情報を入手したり、問題の解決や、
一般的な議論、そしてこのパッケージに関係する話題へのアドバイスに最適
の場所です。

メーリングリストは @email{emacs-rcp@@ls6.cs.uni-dortmund.de} です。
このアドレスにメッセージをを送ると、すべての講読者に届きます。
これは、講読のリクエストを送信するためのアドレスでは @emph{ありません}。

メーリングリストを講読するためのヘルプを入手するには、サブジェクトに
@samp{help} と書いたメールを管理用のアドレス
@email{emacs-rcp-request@@ls6.cs.uni-dortmund.de} に送信してください。

@tramp{} のバグ報告をする場合には、@kbd{M-x tramp-bug} を実行してください。
これは、あなたのシステムの詳細や @tramp{} のバージョン情報を含むバッファー
を自動的に生成します。

バグ報告を提出する時には、問題を再現する手順、リモートマシンの設定、
もし存在するのであれば特殊な条件を、わずらわしいぐらい詳細に記述して
ください。もし可能なら、簡単な再現手順も記述してください。

もし、問題を再現するための簡単なテストケースがわかれば、それをバグ報告
に含めてください。これらは、開発チームがバグを突止め、修正するのを容易
にします。


@node Frequently Asked Questions, Version Control, Bug Reports, Top
@chapter よくある質問とその答

@itemize @bullet
@item 最新の @tramp{} はどこから入手できますか?

@tramp{} は
@url{ftp://ls6-ftp.cs.uni-dortmund.de/pub/src/emacs/tramp.tar.gz}
にあります。


@item どのようなシステム上で動作しますか?

このパッケージは、Emacs 20 と Emacs 21 上で動作します。
XEmacs 20 上では問題があります。@file{tramp.el} のコメントを参照してください。
Emacs 19 で試した人がいるのかどうかは知りません。

このパッケージは Unix 上で動作するように設計されています。そして、リモート
側も Unix 風のシステムであることを期待しています。しかし、NT Emacs 上で
動作させることに成功した人が何人かいるようです。

??? XEmacs の情報は正しいのでしょうか?

??? 誰か、NT Emacs 上で動かすための情報を教えてください。たぶん、@command{ssh}
関係の問題があるのではないかと思います。
 

@item XEmacs で EFS が起動されてしまいます

すべての古いバージョンの @tramp{} が XEmacs を正しくサポートしているわけで
はありません。まず最初に、最新の @tramp{} がインストールされているかどうか
を確認してください。

もし最新のバージョンなら、@code{EFS} ハンドラーが実行されるための条件を
正確に調べてください。もし可能なら、ブレークポイントを @code{efs-ftp-path} 
に設定して、バグ報告と一緒にスタックトレースを送ってください。これらの情報
があると、何が間違っているのかを開発者が発見することが容易になります。


@item @tramp{} を使うとファイル名の補完ができません

リモートマシンにログインした時に、@command{ls} の出力が色付きになって
いませんか? もし、そうなら、それが原因です。

@command{ls} は、端末エミュレーターが色を変更するための @acronym{ANSI} 
エスケープシークエンスを出力します。しかしながら、このエスケープ
シークエンスは @tramp{} を混乱させます。

リモートマシン上の @file{.bashrc}、@file{.profile} あるいは同じような
設定ファイルに、@option{--color=yes} または @option{--color=auto}
が追加された設定の alias があるはずです。

この alias を削除し、新しくログインした時の @command{ls} の出力が
色付きで表示され @emph{ない} ことを確認してください。もし、これでも
ファイル名の補完が正常に動作しない場合は、@tramp{} 開発者にバグ報告を
してください。


@item 巨大なディレクトリの中ではファイル名の補完が動作しません

@tramp{} は、いくつかのオペレーションで globbing を使用します。(globbing
とは、`*.c' のようなワイルドカード展開のためにシェルを使うことです)
これは、たくさんのファイルが存在するディレクトリでは長いコマンドライン
を作ります。いくつかのシェルでは長いコマンドラインをけずりとったり、
あるいは globbing 自身を処理できません。

リモートホスト側に巨大なディレクトリがある場合は、
@command{ls -d * ..?* > /dev/null} のようなコマンドを実行し、ハングするか
どうかを確認してください。注意する必要があるのは、最初に正しいシェル、
@command{/bin/sh}、@command{ksh} あるいは @command{bash}、つまり tilde の
展開をサポートするシェルから試すべきだという事です。


@item @tramp{} はどのような種類のシステムで動作しますか

@tramp{} は、リモートシステムが Unix 風のシステムである事を当てにして
います。また、ローカルシステムも Unix 風のシステムのほうが望ましい
です。しかし、すこし修正すれば、@tramp{} は NT 上でも動作するでしょう。

@end itemize


@c For the developer
@node Version Control, Files directories and paths, Frequently Asked Questions, Top
@chapter リモートバージョンコントロールの内部動作

Unlike EFS and ange-ftp, @tramp{} has full shell access to the remote
machine. This makes it possible to provide version control for files
accessed under @tramp{}.

The actual version control binaries must be installed on the remote
machine, accessible in the directories specified in
@var{tramp-remote-path}.

This transparent integration with the version control systems is one of
the most valuable features provided by @tramp{}, but it is far from perfect.
Work is ongoing to improve the transparency of the system.

@menu
* Version Controlled Files::    Determining if a file is under version control.
* Remote Commands::             Executing the version control commands on the remote machine.
* Changed workfiles::           Detecting if the working file has changed.
* Checking out files::          Bringing the workfile out of the repository.
* Miscellaneous Version Control::  Things related to Version Control that don't fit elsewhere
@end menu


@node Version Controlled Files, Remote Commands, Version Control, Version Control
@section Determining if a file is under version control

The VC package uses the existence of on-disk revision control master
files to determine if a given file is under revision control. These file
tests happen on the remote machine through the standard @tramp{} mechanisms.


@node Remote Commands, Changed workfiles, Version Controlled Files, Version Control
@section Executing the version control commands on the remote machine

There are no hooks provided by VC to allow intercepting of the version
control command execution. The calls occur through the
@code{call-process} mechanism, a function that is somewhat more
efficient than the @code{shell-command} function but that does not
provide hooks for remote execution of commands.

To work around this, the functions @code{vc-do-command} and
@code{vc-simple-command} have been advised to intercept requests for
operations on files accessed via @tramp{}.

In the case of a remote file, the @code{shell-command} interface is
used, with some wrapper code, to provide the same functionality on the
remote machine as would be seen on the local machine. 


@node Changed workfiles, Checking out files, Remote Commands, Version Control
@section Detecting if the working file has changed

As there is currently no way to get access to the mtime of a file on a
remote machine in a portable way, the @code{vc-workfile-unchanged-p}
function is advised to call an @tramp{} specific function for remote files.

The @code{tramp-vc-workfile-unchanged-p} function uses the functioning VC
diff functionality to determine if any changes have occurred between the
workfile and the version control master.

This requires that a shell command be executed remotely, a process that
is notably heavier-weight than the mtime comparison used for local
files. Unfortunately, unless a portable solution to the issue is found,
this will remain the cost of remote version control.


@node Checking out files, Miscellaneous Version Control, Changed workfiles, Version Control
@section Bringing the workfile out of the repository

VC will, by default, check for remote files and refuse to act on them
when checking out files from the repository. To work around this
problem, the function @code{vc-checkout} knows about @tramp{} files and
allows version control to occur.


@node Miscellaneous Version Control,  , Checking out files, Version Control
@section Things related to Version Control that don't fit elsewhere

Minor implementation details, &c.

@menu
* Remote File Ownership::       How VC determines who owns a workfile.
* Back-end Versions::           How VC determines what release your RCS is.
@end menu


@node Remote File Ownership, Back-end Versions, Miscellaneous Version Control, Miscellaneous Version Control
@subsection How VC determines who owns a workfile

Emacs provides the @code{user-full-name} function to return the login name
of the current user as well as mapping from arbitrary user id values
back to login names. The VC code uses this functionality to map from the
uid of the owner of a workfile to the login name in some circumstances.

This will not, for obvious reasons, work if the remote system has a
different set of logins. As such, it is necessary to delegate to the
remote machine the job of determining the login name associated with a
uid.

Unfortunately, with the profusion of distributed management systems such
as @code{NIS}, @code{NIS+} and @code{NetInfo}, there is no simple,
reliable and portable method for performing this mapping.

Thankfully, the only place in the VC code that depends on the mapping of
a uid to a login name is the @code{vc-file-owner} function. This returns
the login of the owner of the file as a string.

This function has been advised to use the output of @command{ls} on the
remote machine to determine the login name, delegating the problem of
mapping the uid to the login to the remote system which should know more
about it than I do.


@node Back-end Versions,  , Remote File Ownership, Miscellaneous Version Control
@subsection How VC determines what release your RCS is

VC needs to know what release your revision control binaries you are
running as not all features VC supports are available with older
versions of @command{rcs(1)}, @command{cvs(1)} or @command{sccs(1)}.

The default implementation of VC determines this value the first time it
is needed and then stores the value globally to avoid the overhead of
executing a process and parsing it's output each time the information is
needed.

Unfortunately, life is not quite so easy when remote version control
comes into the picture. Each remote machine may have a different version
of the version control tools and, while this is painful, we need to
ensure that unavailable features are not used remotely.

To resolve this issue, @tramp{} currently takes the sledgehammer
approach of making the release values of the revision control tools
local to each @tramp{} buffer, forcing VC to determine these values
again each time a new file is visited.

This has, quite obviously, some performance implications. Thankfully,
most of the common operations performed by VC do not actually require
that the remote version be known. This makes the problem far less
apparent.

Eventually these values will be captured by @tramp{} on a system by
system basis and the results cached to improve performance.


@node Files directories and paths, Issues, Version Control, Top
@chapter ファイル名、ディレクトリ、パス名がどのように変換され(mangled)、管理されるか

@menu
* Path deconstruction::         Breaking a path into it's components.
@end menu


@node Path deconstruction,  , Files directories and paths, Files directories and paths
@section Breaking a path into it's components.

@tramp{} filenames are somewhat different, obviously, to ordinary path
names. As such, the lisp functions @code{file-name-directory} and
@code{file-name-nondirectory} are overridden within the @tramp{} package.

Their replacements are reasonably simplistic in their approach. They
dissect the filename, call the original handler on the remote path and
then rebuild the @tramp{} path with the result.

This allows the platform specific hacks in the original handlers to take
effect while preserving the @tramp{} path information.


@node Issues,  , Files directories and paths, Top
@chapter 検討課題と決定事項

@itemize @bullet
@item The uuencode method does not always work.

Due to the design of @tramp{}, the encoding and decoding programs need to
read from stdin and write to stdout.  On some systems, @code{uudecode -o
-} will read stdin and write the decoded file to stdout, on other
systems @code{uudecode -p} does the same thing.  But some systems have
uudecode implementations which cannot do this at all---it is not
possible to call these uudecode implementations with suitable parameters
so that they write to stdout.

Of course, this could be circumvented: the @code{begin foo 644} line
could be rewritten to put in some temporary file name, then
@code{uudecode} could be called, then the temp file could be printed and
deleted.

But I have decided that this is too fragile to reliably work, so on some
systems you'll have to do without the uuencode methods.

@item @tramp{} does not work on XEmacs 20.

This is because it requires the macro @code{with-timeout} which does not
appear to exist in XEmacs 20.  I'm somewhat reluctant to add an
emulation macro to @tramp{}, but if somebody who uses XEmacs 20 steps
forward and wishes to implement and test it, please contact me or the
mailing list.

@end itemize


@c End of tramp_ja.texi - the TRAMP User Manual
@bye

@c TODO
@c
@c * Say something about the .login and .profile files of the remote
@c   shells.
@c * Explain how tramp.el works in principle: open a shell on a remote
@c   host and then send commands to it.

@c Local Variables:
@c eval: (add-hook 'write-file-hooks 'time-stamp)
@c time-stamp-start: "@set UPDATED "
@c time-stamp-format: "%:y 年 %:m 月 %:d 日 (%3a)"
@c time-stamp-end: "$"
@c time-stamp-line-limit: 50
@c End:
