;;; fast-lock.el ---  Automagic text properties saving for fast font-lock-mode.

;; Copyright (C) 1994 Simon Marshall.

;; Author: Simon Marshall <Simon.Marshall@mail.esrin.esa.it>
;; Keywords: faces files
;; Version: 1.00

;; LCD Archive Entry:
;; fast-lock|Simon Marshall|Simon.Marshall@mail.esrin.esa.it|
;; Automagic text properties caching (for fast font-lock-mode).|
;; 20-Jun-1994|1.00|~/modes/misc-lock.el.Z|

;; The archive is archive.cis.ohio-state.edu in /pub/gnu/emacs/elisp-archive.

;;; This file is not part of GNU Emacs.

;;; GNU Emacs is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2, or (at your option)
;;; any later version.

;;; GNU Emacs is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.

;;; You should have received a copy of the GNU General Public License
;;; along with GNU Emacs; see the file COPYING.  If not, write to
;;; the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; Purpose:
;;
;; To make visiting a file in `font-lock-mode' faster by restoring its text
;; properties from automatically saved associated text properties files.
;;
;; In general, provide a mechanism by which a buffer file's text properties may
;; be automatically saved, and interactively loaded.
;;
;; For example, my 1M RMAIL file just took 200 seconds to fontify using my
;; `font-lock-mode' regexps.  The text properties file took around 10 seconds
;; to load (with less than 30 seconds to generate and save them).  A 115k file
;; of Emacs C code took 90 seconds to fontify (using `c-font-lock-keywords-2').
;; The text properties file took around 5 seconds to load (with less than 10
;; seconds to generate and save).

;; Installation:
;; 
;; Put this file somewhere where Emacs can find it (i.e., in one of the paths
;; in your `load-path'), `byte-compile-file' it, and put in your ~/.emacs:
;;
;; (autoload 'turn-on-fast-lock "fast-lock"
;;   "Unconditionally turn on Fast Lock mode.")
;;
;; (add-hook 'font-lock-mode-hook 'turn-on-fast-lock)
;;
;; Start up a new Emacs and use font-lock as usual.
;;
;; When you visit a file (which has `font-lock-mode' enabled) that has a
;; corresponding text properties file associated with it, the text properties
;; will be loaded from that file instead of being generated by font-lock code.
;;
;; When you exit Emacs, a corresponding file containing the text properties may
;; also be saved.  See `fast-lock-mode' and `fast-lock-save-method'.  To
;; provide control over which such associated text properties files are written
;; automagically, the buffer's name must match `fast-lock-save-regexp' and be
;; at least `fast-lock-save-size' in size.
;;
;; Note that you can save text properties of any buffer file (irrespective of
;; whether font-lock is used) by enabling fast-lock with C-u M-x fast-lock-mode
;; when in the buffer.  The text properties will be saved when you exit Emacs.
;; When you subsequently visit the file in another Emacs session, you can read
;; the text properties file with M-x fast-lock-read-text-properties.  Put in
;; your ~/.emacs:
;;
;; (autoload 'fast-lock-mode "fast-lock"
;;   "Toggle Fast Lock mode." t)
;;
;; (autoload 'fast-lock-read-text-properties "fast-lock"
;;   "Read the text properties for the current buffer." t)

;; Feedback:
;;
;; Please send me bug reports, bug fixes, and extensions, so that I can
;; merge them into the master source.
;;     - Simon Marshall (Simon.Marshall@mail.esrin.esa.it)

;; History:
;;
;; 0.02--1.00:
;; - Changed name from turbo-prop to fast-lock.  Automagic for font-lock only.
;; - Made fast-lock a minor mode, like G. Dinesh Dutt's fss-mode.

;; Future:
;;
;; I should get around to divorcing `fast-lock' from `font-lock-mode', but even
;; making it work for hilit19 seems difficult if not impossible.
;;
;; I should include within-file, as well as associated-file, saving of text
;; properties, whatever the pros and cons.  Both seem like kludges to me.

;; Variables:

(defvar fast-lock-save-method "~/.fast-lock"
  "Mechanism by which text properties files are stored.
If a string, the directory name to keep each file's text properties file.
If `file', keep each file's text properties file in the same directory.

See also `fast-lock-file-name' and `fast-lock-mode'.")

(defvar fast-lock-save-regexp nil
  "If non-nil, a regexp to match buffer file names with.
Only buffer file names matching this regexp will have associated text property
files saved when they are saved.  If nil, means the name is irrelevant.
See also `fast-lock-save-size' and `fast-lock-mode'.")

(defvar fast-lock-save-size (* 25 1024)
  "If non-nil, the minimum size for buffer files.
Only buffer files at least this size will have associated text properties files
saved when they are saved.  If nil, means the size is irrelevant.
See also `fast-lock-save-regexp' and `fast-lock-mode'.")

(defvar fast-lock-mode nil) ; for modeline

;; Functions:

(defun fast-lock-read-text-properties ()
  "Read the text properties for the current buffer.
Will not read the text properties file if the buffer's file is newer.

See also `fast-lock-save-text-properties' and `fast-lock-file-name'."
  (interactive)
  (save-excursion
    (save-restriction
      (widen)
      (let ((bufile (buffer-file-name))
	    (tpfile (fast-lock-file-name)))
	(if (or (not bufile) (file-newer-than-file-p bufile tpfile))
	    (setq font-lock-fontified nil)
	  (condition-case nil
	      (let ((buf (buffer-name))
		    (modified (buffer-modified-p))
		    (buffer-read-only nil))
		(message "Loading %s text properties..." buf)
		(setq font-lock-fontified (load tpfile t t t))
		(message "Loading %s text properties... done" buf)
		(set-buffer-modified-p modified))
	    (error nil)))))))

(defun fast-lock-save-text-properties (&optional buffer)
  "Save the text properties of BUFFER.
If BUFFER is not given, means the current buffer.

The following criteria must be met for a text properties file to be saved:
 - The buffer must be associated with a file.

See also `fast-lock-save-all-text-properties', `fast-lock-file-name', and
`fast-lock-read-text-properties'."
  (interactive)
  (if (buffer-file-name buffer)
      (save-excursion
	(let ((bufname (buffer-name buffer)))
	  (message "Saving %s text properties... (generating...)" bufname)
	  (condition-case nil
	      (let ((properties (get-text-properties-in buffer))
		    (backup-inhibited t))
		(set-buffer (find-file-noselect (fast-lock-file-name buffer)))
		(message "Saving %s text properties... (inserting...)" bufname)
		(fundamental-mode)
		(erase-buffer)
		(insert "(set-text-properties-in (quote")
		(print properties (current-buffer))
		(insert ") nil)\n")
		(message "Saving %s text properties... (saving...)" bufname)
		(basic-save-buffer)
		(message "Saving %s text properties... done" bufname)
		(kill-buffer nil))
	    (error nil))))))

(defun fast-lock-save-all-text-properties ()
  "Save the text properties of all buffers.

The following criteria must be met for a text properties file to be saved:
 - Fast Lock mode must be turned on in the buffer.
 - The buffer must be associated with a file.
 - The buffer name must match `fast-lock-save-regexp'.
 - The buffer must be at least `fast-lock-save-size' bytes long.
 - The buffer must contain at least one text property.
 - The buffer's associated file must be newer than its text properties file.
 - Any criteria that `fast-lock-save-text-properties' imposes.

See also `fast-lock-read-text-properties' and `fast-lock-file-name'."
  (let ((buffers (buffer-list)))
    (while buffers
      (let* ((buffer (car buffers))
	     (bufile (buffer-file-name buffer))
	     (tpfile (fast-lock-file-name buffer)))
	(save-excursion
	  (set-buffer buffer)
	  (if (and fast-lock-mode bufile
		   (or (null fast-lock-save-regexp)
		       (string-match fast-lock-save-regexp bufile))
		   (or (null fast-lock-save-size)
		       (<= fast-lock-save-size (buffer-size)))
		   (file-newer-than-file-p bufile tpfile)
		   (next-property-change (point-min) buffer))
	      (fast-lock-save-text-properties buffer))
	  (setq buffers (cdr buffers)))))))

(defun fast-lock-mode (&optional arg)
  "Toggle Fast Lock mode.
With arg, turn Fast Lock mode on if and only if arg is positive.

When Fast Lock mode is enabled, the buffer file's text properties are saved
when you exit Emacs and restored when you subsequently visit the file.

If Fast Lock mode is enabled and the current buffer does not contain any text
properties, the text properties file is loaded.

Text properties files may be saved and loaded at any time.  See the commands
`fast-lock-save-text-properties' and `fast-lock-read-text-properties'.

To control the mechanism by which text properties may be saved, see the
variables `fast-lock-save-method' and `fast-lock-file-name'.  To control
whether text properties are saved, see also variables `fast-lock-save-regexp'
and `fast-lock-save-size'."
  (interactive "P")
  (set (make-local-variable 'fast-lock-mode)
       (if (null arg) (not fast-lock-mode) (> (prefix-numeric-value arg) 0)))
  (if (and fast-lock-mode (null (next-property-change (point-min))))
      (fast-lock-read-text-properties)))

(defun turn-on-fast-lock ()
  "Unconditionally turn on Fast Lock mode."
  (fast-lock-mode t))

(defun fast-lock-file-name (&optional buffer)
  "Return absolute file name for BUFFER's properties file.
The file name is constructed from BUFFER's `buffer-file-name', by replacing
all \"/\" characters with \"#\" characters, and the `fast-lock-save-method'."
  (concat
   (file-name-as-directory
    (expand-file-name (if (eq fast-lock-save-method 'file)
			  default-directory
			fast-lock-save-method)))
   (if (eq fast-lock-save-method 'file)
       (concat "." (buffer-name buffer))
     (mapconcat (function (lambda (c) (if (= c ?/) "#" (char-to-string c))))
		(buffer-file-name buffer) ""))
   ".tps"))

;; Functions to process text properties:

(defun get-text-properties-in (&optional buffer)
  "Return the list of all properties held in BUFFER.
Each element of the returned list is of the form (START END PLIST) where START
and END are positions, and PLIST is a property list."
  (save-excursion
    (and buffer (set-buffer buffer))
    (save-restriction
      (widen)
      ;; Maybe instead of having a (START END PLIST) list, we could group into
      ;; PLISTS: (PLIST START1 END1 START2 END2 ...).
      ;; It would reduce the file length, but would it be faster to process?
      ;; Similarly, properties returned do not span lines.  Maybe combine those
      ;; that span lines?
      (let ((end (point-min)) (limit (point-max)) (properties ()) (start nil)
	    (plist ()))
	(goto-char end)
	;; It would be nice to make this loop faster.  And the list shorter.
	(while (not (eobp))
	  (setq start end
		properties (text-properties-at start)
		end (next-property-change start buffer limit))
	  (if properties (setq plist (cons (list start end properties) plist)))
	  (goto-char end))
	plist))))

(defun set-text-properties-in (properties &optional buffer)
  "Completely replace all PROPERTIES held in BUFFER.
Each element of PROPERTIES is of the form (START END PLIST) where START and END
are positions, and PLIST is a property list."
  (save-excursion
    (and buffer (set-buffer buffer))
    (save-restriction
      (widen)
      ;; Is there a more efficient way of doing this?
      (let ((buffer (list buffer)))
	(while properties
	  ;; Too much consing?
	  (apply 'set-text-properties (append (car properties) buffer))
	  (setq properties (cdr properties)))))))

;; Install ourselves:

(or (symbolp fast-lock-save-method)
    (file-accessible-directory-p fast-lock-save-method)
    (make-directory fast-lock-save-method t))

(or (assq 'fast-lock-mode minor-mode-alist)
    (setq minor-mode-alist (cons '(fast-lock-mode " Fast") minor-mode-alist)))

(add-hook 'kill-emacs-hook 'fast-lock-save-all-text-properties)

;;; fast-lock.el ends here

