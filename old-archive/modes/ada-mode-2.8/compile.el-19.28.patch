111,113c111,112
<     ;;
<     ;; We refuse to match  file:number:number
<     ;; because we want to leave that for another case (see below, GNAT).
---
>     ;; or GNU utilities with column (GNAT 1.82):
>     ;;   foo.adb:2:1: Unit name does not match file name
118c117,119
<     ("\n\\([^:( \t\n]+\\)[:(][ \t]*\\([0-9]+\\)\\([) \t]\\|:[^0-9\n]\\)" 1 2)
---
>     ("\n\
> \\([^:( \t\n]+\\)[:(][ \t]*\\([0-9]+\\)\\([) \t]\\|\
> :\\([^0-9\n]\\|\\([0-9]+:\\)\\)\\)" 1 2 5)
120,124d120
<     ;; GNU error message with a program name in it.
<     ;;  compilername:file:linenum: error message
<     ("\n\\([^:( \t\n]+\\):\\([^:( \t\n]+\\):[ \t]*\\([0-9]+\\)\\(:[^0-9\n]\\)"
<      2 3)
< 
182,184c178,180
<     ;; GNAT compiler v1.82
<     ;; foo.adb:2:1: Unit name does not match file name
<     ("\n\\([^ \n\t:]+\\):\\([0-9]+\\):\\([0-9]+\\)[: \t]" 1 2 3)
---
>     ;; GNU messages with program name and optional column number.
>     ("\n[^0-9 \n\t:]+:[ \t]*\\([^ \n\t:]+\\):\
> \\([0-9]+\\):\\(\\([0-9]+\\)[: \t]\\)?" 1 2 4)
186,188c182,184
<     ;; GNU message with program name and column number.
<     ("\n\\([^ \n\t:]+\\):\\([^ \n\t:]+\\):\
< \\([0-9]+\\):\\([0-9]+\\)[: \t]" 2 3 4)
---
>     ;; SGI Irix 5.2 compiler warnings
>     ;; cfe: Warning 835: vpr_tiff.c, line 65: No prototype for the call to rint
>     ("ning [0-9]+: \\([^,\" \n\t]+\\)[,:] \\(line \\)?\\([0-9]+\\):" 1 3)
254a251,255
> (defvar compilation-mode-font-lock-keywords
>   '(("^\\([^\n:]*:\\([0-9]+:\\)+\\)\\(.*\\)$" 1 font-lock-function-name-face))
> ;;;  ("^\\([^\n:]*:\\([0-9]+:\\)+\\)\\(.*\\)$" 0 font-lock-keyword-face keep)
>   "Additional expressions to highlight in Compilation mode.")
> 
263a265,267
> Interactively, prompts for the command if `compilation-read-command' is
> non-nil; otherwise uses `compile-command'.  With prefix arg, always prompts.
> 
272c276
<    (if compilation-read-command
---
>    (if (or compilation-read-command current-prefix-arg)
386,388c390,393
< 	    (let ((proc (start-process-shell-command (downcase mode-name)
< 						     outbuf
< 						     command)))
---
> 	    (let* ((process-environment (cons "EMACS=t" process-environment))
> 		   (proc (start-process-shell-command (downcase mode-name)
> 						      outbuf
> 						      command)))
470c475
<   (fundamental-mode)
---
>   (kill-all-local-variables)
474a480,481
>   (set (make-local-variable 'font-lock-defaults)
>        '(compilation-mode-font-lock-keywords t))
542c549,550
< 				    (symbol-name (process-status proc))))
---
> 				    (symbol-name (process-status proc))
> 				    " [" (process-exit-status proc) "]"))
560,562c568
<   (save-excursion
<     (set-buffer (process-buffer proc))
<     (let ((buffer-read-only nil))
---
>   (if (buffer-name (process-buffer proc))
564,566c570,575
< 	(goto-char (process-mark proc))
< 	(insert-before-markers string)
< 	(set-marker (process-mark proc) (point))))))
---
> 	(set-buffer (process-buffer proc))
> 	(let ((buffer-read-only nil))
> 	  (save-excursion
> 	    (goto-char (process-mark proc))
> 	    (insert-before-markers string)
> 	    (set-marker (process-mark proc) (point)))))))
1089,1091c1098,1100
< 		 (read-file-name
< 		  (format "Find this error in: (default %s) "
< 			  filename) dir filename t)))
---
> 		 (read-file-name (format "Find this error in: (default %s) "
> 					 filename)
> 				 dir filename t)))
1294a1304
> 				(match-beginning (nth 3 alist))
1400a1411
> 
