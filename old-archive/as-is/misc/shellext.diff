*** /users/src/gnuemacs-18.49/lisp/shell.el	Fri Aug 14 17:55:08 1987
--- /users/wolfgang/emacs18/patches/shell.el	Fri Jan  1 12:31:31 1988
***************
*** 1,3 ****
--- 1,12 ----
+
+
+ 
+ ;;;;
+ ;; this is a patched version of shell.el from gnuemacs 18.49
+ ;; patches are marked with '; wsr patch'
+ ;; -wolfgang rupprecht 9/15/87
+ ;;;;
+ 
  ;; Run subshell under Emacs
  ;; Copyright (C) 1985, 1986, 1987 Free Software Foundation, Inc.
  
***************
*** 84,94 ****
--- 93,109 ----
    (setq last-input-start (make-marker))
    (make-local-variable 'last-input-end)
    (setq last-input-end (make-marker))
+   (make-local-variable 'shell-history-list) ; wsr patch
+   (make-local-variable 'shell-history-index) ; wsr patch
+   (make-local-variable 'shell-last-search) ; wsr patch
    (run-hooks 'shell-mode-hook))
  
  (if shell-mode-map
      nil
    (setq shell-mode-map (make-sparse-keymap))
+   ; sparse keymaps have unordered key documentation in "C-hm" help window
+   ; this should make the C-c map a regular 128 entry map
+   (define-key shell-mode-map "\C-c" (make-keymap))
    (define-key shell-mode-map "\C-m" 'shell-send-input)
    (define-key shell-mode-map "\C-c\C-d" 'shell-send-eof)
    (define-key shell-mode-map "\C-c\C-u" 'kill-shell-input)
***************
*** 99,104 ****
--- 114,120 ----
    (define-key shell-mode-map "\C-c\C-o" 'kill-output-from-shell)
    (define-key shell-mode-map "\C-c\C-r" 'show-output-from-shell)
    (define-key shell-mode-map "\C-c\C-y" 'copy-last-shell-input))
+ 
  
  (defvar explicit-csh-args
    (if (eq system-type 'hpux)
***************
*** 142,148 ****
  	    (let ((symbol (intern-soft (concat "explicit-" name "-args"))))
  	      (if (and symbol (boundp symbol))
  		  (symbol-value symbol)
! 		'("-i")))))))
  
  (defun make-shell (name program &optional startfile &rest switches)
    (let ((buffer (get-buffer-create (concat "*" name "*")))
--- 158,165 ----
  	    (let ((symbol (intern-soft (concat "explicit-" name "-args"))))
  	      (if (and symbol (boundp symbol))
  		  (symbol-value symbol)
! 		'("-i"))))))
!   (if shell-read-history (shell-input-history-file))) ; wsr patch
  
  (defun make-shell (name program &optional startfile &rest switches)
    (let ((buffer (get-buffer-create (concat "*" name "*")))
***************
*** 151,157 ****
      (if proc (setq status (process-status proc)))
      (save-excursion
        (set-buffer buffer)
!       ;;    (setq size (buffer-size))
        (if (memq status '(run stop))
  	  nil
  	(if proc (delete-process proc))
--- 168,174 ----
      (if proc (setq status (process-status proc)))
      (save-excursion
        (set-buffer buffer)
!       (setq size (buffer-size))
        (if (memq status '(run stop))
  	  nil
  	(if proc (delete-process proc))
***************
*** 163,178 ****
  			  "EMACS=t"
  			  "-" program switches))
  	(cond (startfile
! 	       ;;This is guaranteed to wait long enough
! 	       ;;but has bad results if the shell does not prompt at all
! 	       ;;	     (while (= size (buffer-size))
! 	       ;;	       (sleep-for 1))
! 	       ;;I hope 1 second is enough!
! 	       (sleep-for 1)
  	       (goto-char (point-max))
  	       (insert-file-contents startfile)
  	       (setq startfile (buffer-substring (point) (point-max)))
! 	       (delete-region (point) (point-max))
  	       (process-send-string proc startfile)))
  	(setq name (process-name proc)))
        (goto-char (point-max))
--- 180,196 ----
  			  "EMACS=t"
  			  "-" program switches))
  	(cond (startfile
! 		(let ((cnt 3))		; wait up to 3 seconds for prompt
! 		  ; assume that prompt is unset if 3 seconds pass.
! 		  (while (and (= size (buffer-size))
! 			      (< 0 cnt))
! 		    (sit-for 1)
! 		    (setq cnt (1- cnt))))
  	       (goto-char (point-max))
  	       (insert-file-contents startfile)
  	       (setq startfile (buffer-substring (point) (point-max)))
! ; truth in advertising, show input region.
! ;	       (delete-region (point) (point-max)) ; -wsr
  	       (process-send-string proc startfile)))
  	(setq name (process-name proc)))
        (goto-char (point-max))
***************
*** 218,223 ****
--- 236,242 ----
        (error (funcall shell-set-directory-error-hook)))
    (let ((process (get-buffer-process (current-buffer))))
      (process-send-region process last-input-start last-input-end)
+     (shell-save-history)		; wsr patch
      (set-marker (process-mark process) (point))))
  
  ;;;  If this code changes (shell-send-input and shell-set-directory),
***************
*** 325,330 ****
--- 344,350 ----
  (defun kill-shell-input ()
    "Kill all text since last stuff output by the shell or its subjobs."
    (interactive)
+   (goto-char (point-max))		; slight bug fix. -wsr
    (kill-region (process-mark (get-buffer-process (current-buffer)))
  	       (point)))
  
***************
*** 335,340 ****
--- 355,362 ----
    (lisp-mode-commands inferior-lisp-mode-map)
    (define-key inferior-lisp-mode-map "\e\C-x" 'lisp-send-defun))
  
+ (require 'shellext) ; needs shell-mode-map and lisp-mode-map ; wsr patch
+ 
  (defvar inferior-lisp-program "lisp"
    "*Program name for invoking an inferior Lisp with `run-lisp'.")
  
***************
*** 393,398 ****
--- 415,423 ----
    (setq last-input-start (make-marker))
    (make-local-variable 'last-input-end)
    (setq last-input-end (make-marker))
+   (make-local-variable 'shell-history-list) ; wsr patch
+   (make-local-variable 'shell-history-index) ; wsr patch
+   (make-local-variable 'shell-last-search) ; wsr patch
    (run-hooks 'shell-mode-hook 'lisp-mode-hook))
  
  (defun run-lisp ()
