\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename edb.info
@settitle EDB -- The Emacs Database
@c %**end of header

@c C-c C-c n to insert a new @node.
@c C-c C-u C-n to update one node, C-c C-u C-e to update all.
@c C-c C-u C-m to update one menu, C-u C-c C-u m to update all.
@c Don't leave any blank lines above the @chapter or @section command.
@c Always follow a @ref command with a comma or period.
@c M-x texinfo-format-buffer to create .info file(s).
@c To print, do tex edb.texi; texindex edb.??; tex edb.texi 

@c Unfortunately, the @need command doesn't work exactly as documented.

@c @setchapternewpage odd
@syncodeindex tp cp

@titlepage
@title EDB Manual
@subtitle The Emacs Database

@author by Michael Ernst
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1991-1995 by Michael Ernst <mernst@@theory.lcs.mit.edu>



@sp
This documentation describes version 1.21 of EDB,
dated Jul 18 1995.  The documentation was last
modified on July 18, 1995.

@sp
   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end titlepage

@node    Top, Introduction, (dir), (dir)

@menu
* Introduction::                Introduction
* Database mode::               Database mode
* Database View mode::          Database View mode
* Database Edit mode::          Database Edit mode
* Searching::                   Searching
* Sorting::                     Sorting
* Database Summary mode::       
* Marking and hiding::          Marking and hiding
* Reports::                     Reports
* Specifying the display format::  Specifying the display format
* Designing a database::        Designing a database
* Record field types::          Record field types
* Database file layout::        Database file layout
* How information is displayed::  How information is displayed
* Customization::               Customization
* Database representation::     Database representation
* Naming conventions::          Naming conventions
* EDB support::                 
* Function Index::              Function Index
* Variable Index::              Variable Index
* Concept Index::               Concept Index

 --- The Detailed Node Listing ---

Introduction

* Organization of this manual::  Organization of this manual
* Installing EDB::              
* Invoking EDB::                Invoking EDB
* Example EDB session::         Example EDB session
* Terminology::                 Terminology

Database View mode

* Moving around in the database::  Moving around in the database
* Changing to Database Edit mode::  Changing to Database Edit mode
* Undoing all changes to a record::  Undoing all changes to a record
* Making changes permanent::    Making changes permanent
* Adding and removing records::  Adding and removing records
* Exiting database mode::       Exiting database mode

Database Edit mode

* Exiting Database Edit mode::  Exiting Database Edit mode
* Undoing changes to a field::  Undoing changes to a field
* Moving from record to record::  Moving from record to record
* Moving from field to field::  Moving from field to field
* Movement within a field::     Movement within a field
* Editing a field::             Editing a field
* Getting help::                Getting help

Searching

* Search patterns::             Search patterns

Sorting

* Sorting functions::           Sorting and ordering functions

Marking and hiding

* Setting the mark and hide bits::  Setting the mark and hide bits
* Movement among marked and hidden records::  Movement among marked and hidden records
* Details of hiding::           Details of hiding

Reports

* Bugs in report generation::   Bugs in report generation

Specifying the display format

* Changing display formats::    Changing display formats
* Execution of format file eval expressions::  Execution of format file eval expressions
* Making additional data display buffers::  Making additional data display buffers

Designing a database

* Creating a new database::     Creating a new database
* Manipulating database fields::  Manipulating database fields

Record field types

* Specifying a record field type::  Specifying a record field type
* Predefined record field types::  Predefined record field types
* The recordfieldspec structure::  The recordfieldspec structure

Database file layout

* Internal file layout::        Internal file layout
* Delimited file layout::       Delimited file layout
* Tagged file layout::          Tagged file layout
* Nonregular file layout::      Nonregular file layout
* Reading from disk::           What happens when a database is read in from disk

Delimited file layout

* How to specify delimited file layouts::  How to specify delimited file layouts
* Resolving ambiguities::       Resolving ambiguities
* Problems with end-of-file newlines::  Problems with end-of-file newlines

How to specify delimited file layouts

* The sepinfo structure::       The sepinfo structure
* Sepinfo examples::            Record and field separator examples

Nonregular file layout

* Nonregular database example::  Example of database in nonregular file layout

How information is displayed

* Display specifications::      Display specifications
* Predefined displaytypes::     Predefined displaytypes
* Enumeration displaytypes::    Enumeration types
* Defining new displaytypes::   Defining new displaytypes
* Display specification optional parameters::  Display specification optional parameters
* Display specification abbreviations::  Display specification abbreviations

Predefined displaytypes

* Date displaytype::            Date displaytype
* Time displaytype::            Time displaytype

Enumeration types

* One-character enumeration displaytypes::  One-character enumeration displaytypes
* Multi-character enumeration displaytypes::  Multi-character enumeration displaytypes

Customization

* Auxiliary files::             Auxiliary and format files
* Hooks and customization functions::  Hooks and customization functions
* Local variables::             Local variables
* Global variables::            Global variables

Hooks and customization functions

* Load and read hooks::         Load and read hooks
* Database minor mode hooks::   Database minor mode hooks
* Record display hooks::        Record display hooks
* Edit mode hooks::             Edit mode hooks
* Display format change hooks::  Display format change hooks
* Recordfieldspec change hooks::  Recordfieldspec change hooks

Local variables

* Per-data-display-buffer variables::  Per-data-display-buffer variables
* Per-database variables::      Per-database variables

Database representation

* The database structure::      The database structure
* Mapping over the database::   Mapping over the database
* Manipulating records::        Manipulating records

The database structure

* The link structure::          The link structure

Creating and copying records

* Accessing record fields::     Accessing record fields
* Mapping over record fields::  Mapping over record fields

Naming conventions

* Function and variable naming conventions::  Function and variable naming conventions
* File naming conventions::     File naming conventions

EDB support

* Updates to EDB::              
* In case of trouble::          

In case of trouble

* Variables::                   Variables
* Exiting Emacs or saving files::  Exiting Emacs or saving files
* Compiling EDB::               Compiling EDB
* Debugging EDB::               Debugging EDB
* Reporting bugs::              Reporting bugs
@end menu

@node Introduction, Database mode, Top, Top
@chapter Introduction

EDB is a database program for GNU Emacs.  It permits you to manipulate
structured (or not-so-structured) data within Emacs and provides many of
the usual database features, including:

@itemize @bullet
@item
Flexible, customizable file layouts.  Data may contain any character,
including those used to delimit fields and records.  Files read and
written by the database may have arbitrary formats.

@item
Typed fields (e.g.@: integer, date, string); fields may also be subject
to additional constraints (prime number, date before today, string that
appears in some other record, etc.).

@item
Arbitrary data display formats for viewing records.  Multiple display
formats can be open on a database simultaneously, viewing the same or
different records.  The data display format can be automatically chosen
based on the record's field values.

@item
Selective display of only those records of interest; others become
temporarily user-invisible.

@item
Standard GNU Emacs editing commands, which work only within data fields
and not on the surrounding text.

@item
Database summaries, which show in a single buffer one or more lines of
information about each record.

@item
Sorting, with an easy-to-use a graphical interface for defining the
sorting criteria; most sorting orders you would care about are easy to
specify, but arbitrary ones are also permitted.

@item
Merging and reconciliation of databases.

@item
Reports generated from database information.

@item
Highly customizable via the underlying programming language, Emacs Lisp;
many hooks and useful variables are provided to make this even easier.

@item
Documented by a 100-page manual.
@end itemize

EDB is more ambitious---and therefore more complex---than its
forerunners (such as Forms Mode by Johan Vromans <jv@@mh.nl>).  While
other packages don't provide as much functionality as EDB, they may be
more appropriate for simple needs.

While EDB provides sophisticated functionality and is extensively
customizable, it is not as powerful as commercial database products, and
does not directly qualify as either ``relational'' or
``object-oriented.''  On the other hand, EDB may well meet your needs
without being buzzword-compliant.  (EDB extensions to provide a
subset of the features of a relational or object-oriented database can
and have been written.)

@ifinfo
This documentation describes version 1.21 of EDB,
dated Jul 18 1995.  The documentation was last
modified on Jul 18 1995.
@end ifinfo

@menu
* Organization of this manual::  Organization of this manual
* Installing EDB::              
* Invoking EDB::                Invoking EDB
* Example EDB session::         Example EDB session
* Terminology::                 Terminology
@end menu


@node Organization of this manual, Installing EDB, Introduction, Introduction
@section Organization of this manual

This manual contains two major parts.  The first part describes how to
use EDB to manipulate an existing database, and the second part
describes how to design a new database.

The first part---which could be called the EDB User Manual---first
presents basic commands such as starting up the database, adding,
deleting, and modifying records, and searching; then it describes
features for the more advanced user, such as sorting, displaying record
summaries, marking or ignoring certain records, and producing reports.

The second part---which could be called the EDB Database Designer
Manual---describes the three forms that database information can take:
when being manipulated by EDB, when stored on disk, and when displayed
on the screen.  Separate chapters discuss specifying each of these
representations.  The manual then goes on to discuss customization hooks
and explains some of the lower-level implementation details that an
advanced designer may need to know.


@node Installing EDB, Invoking EDB, Organization of this manual, Introduction
@section Installing EDB
@cindex installing EDB
@cindex loading EDB
@cindex autoloading EDB

EDB is available for anonymous ftp from
@file{theory.lcs.mit.edu:/pub/emacs/edb/}; the package is in a single
compressed tar file @file{edb-@var{version}.tar.gz}, and the individual
files can also be obtained from the @file{code/} subdirectory.  Place
the files in your Emacs load path (probably in a directory of their
own).  You can add a directory to your Emacs Lisp load path by putting
something similar to the following in your @file{.emacs} file:
@cindex @file{.emacs} file
@cindex Emacs initialization file
@example
(setq load-path (cons (expand-file-name "~/emacs/edb") load-path))
@end example

Typing @samp{make} in the EDB directory will byte-compile EDB and create
Info files; @samp{make install} does the above and also installs the
Info files.  You should check @file{Makefile} first to ensure that EDB
gets installed where you want.  It is strongly recommended that you run
EDB byte-compiled, as it is sluggish when run interpreted; for more
details, @xref{Compiling EDB}.

@cindex texinfo, EDB uses version 2
The texinfo documentation must be processed using release 2 of texinfo
(which is available via anonymous ftp from
@file{prep.ai.mit.edu:/pub/gnu/}), but the resulting Info files can be
read using any Info reader.  If you don't have texinfo version 2, you
can get the EDB documentation pre-processed in info format from
@file{theory.lcs.mit.edu:/pub/emacs/edb/}, files @file{edb.info}
and @file{edb.info-[123456]} (seven files in all).  Similarly, that
directory contains ready-to-print versions of the manual (file
@file{edb.dvi} or @file{edb.ps}).

@cindex example databases, getting via ftp
EDB will do you little good without a database to
manipulate; for information about creating a new database or using an
existing one (EDB can handle nearly any file layout imaginable and many
that aren't), @pxref{Designing a database}.  You
may also want to use existing databases as guides, or to help
familiarize yourself with EDB@.  A number of examples can be found in
the compressed tar file @file{examples.tar.Z} or in the @file{examples/}
subdirectory of @file{theory.lcs.mit.edu:/pub/emacs/edb/} (the two
locations contain the same examples).  You can test out function
@code{edb-after-find-file} by performing @code{find-file} on
@file{forms-demo2-int.dat}.


@node Invoking EDB, Example EDB session, Installing EDB, Introduction
@section Invoking EDB
@cindex invoking EDB
@cindex files used by EDB

@cindex @file{.dat} file suffix
@cindex @file{.fmt} file suffix
@cindex @file{.dba} file suffix
@cindex three file types used by EDB
You need three files to run EDB:  a data file, a format file, and an
auxiliary file.  The data file (usual suffix @file{.dat}) contains the
information that makes up the database.  The format file (usual suffix
@file{.fmt}) specifies how the fields of a particular record appear in
the data display buffer, where you may view or edit one record at a
time.  The auxiliary file (usual suffix @file{.dba}) contains additional
information about the database, such as the number of fields in each
record, the layout of the data file (including what characters or
strings serve as field and record separators), customizations, etc.  A
fourth type of file is the report format file, which is a format file
used in generating reports printed on the screen, to a file, or to a
printer; @pxref{Reports}.
Different databases may share format and auxiliary files.

For examples of data, format, and auxiliary files, a description of how
to create your own, and pointers to even more information,
@pxref{Creating a new database}, or see the examples provided with EDB
(@pxref{Installation,,,edb-inst.info,EDB Installation Manual}).

@cindex primary format file
@cindex format file, primary
You can combine the format and auxiliary files (by placing the
auxiliary file information at the end of the format file, in the ``Local
variables'' section), but for simplicity we will consider the two files
separately.  There may be many different ways to lay out a record on the
screen, so a database could have many different format files; for the
time being we will concentrate on the format file which is used first,
which is called the primary format file, even though it might not be the
one that is used most often.

@cindex reading a database from disk
@cindex starting up EDB
When invoking the database, you typically only need to name the data
file; the names of the others are inferred from its name
(@pxref{Auxiliary files}) or may be mentioned explicitly by it.  The
@code{db-find-file} command starts up the database:

@table @kbd
@item M-x db-find-file
@findex db-find-file
Read a database from @var{database-file}; prompts when called interactively.
If the database file doesn't specify a format and the format file can't be
inferred from @var{database-file}, the user is prompted for it too.
The user is always prompted for the format if prefix argument
@var{prompt-for-format} is non-@code{nil}.
If the database is already read in and @var{prompt-for-format} is @code{nil}, the existing
database buffer is merely selected.
When called non-interactively, argument @var{prompt-for-format} may be a string, the
name of a format file to use.
@end table

@cindex saving to disk
@cindex writing to disk
You can use @code{save-buffer} (@kbd{C-x C-s}) and @code{write-file}
(@kbd{C-x C-w}) as usual to save databases buffer to the file from
which they were read or to an arbitrary file.

To autoload EDB, place the following in your @file{.emacs} file:
@example
(autoload 'db-find-file "database" "EDB database package" t)
(autoload 'load-database "database" "EDB database package" t)
(autoload 'byte-compile-database "database" "EDB database package" t)
@end example
@noindent
Now, when you start up Emacs, you will already be able to execute
@code{db-find-file}; EDB will be loaded automatically.  (You may also
wish to autoload function @code{edb-update}; see @ref{EDB support}.)
See below if you wish to byte-compile the EDB sources.

Here is one way to arrange to automatically run EDB when you read a
database file via the usual @code{find-file} command (ordinarily bound
to @kbd{C-x C-f}), whether or not you choose to autoload EDB@.  This only
works on databases which have been stored in EDB internal file layout
(@pxref{Internal file layout}).  The reason
@code{edb-after-find-file} isn't built into EDB is that loading the
definition would require loading EDB, which is undesirable when only
ordinary editing will be done.

@findex db-this-buffer
@findex find-file
@vindex find-file-hooks
@cindex find-file-hooks
@findex edb-after-find-file
@cindex after-find-file hooks
@example
(setq find-file-hooks (cons 'edb-after-find-file find-file-hooks))
(defun edb-after-find-file ()
  "If this is a database file in EDB internal file layout, run EDB.
To be placed in `find-file-hooks'."
  ;; When this is called, we are at the beginning of the buffer.
  (if (looking-at ";; Database file written by EDB")
      (progn
        (require 'database)
        (db-this-buffer)
        ;; db-this-buffer kills the current buffer; and an error results
        ;; when Emacs tries to switch back to it.  find-file-noselect
        ;; uses the buf variable to hold the new buffer.
        (setq buf (buffer-name (current-buffer))))))
@end example


@node Example EDB session, Terminology, Invoking EDB, Introduction
@section Example EDB session

This section describes some of the most frequently used EDB commands.
All of the commands used here are more fully documented elsewhere in the
manual.  For a very brief introduction to database mode, its submodes
(Database View mode and Database Edit mode), the data display buffer, EDB concepts, and
more, @pxref{Database mode}.

@table @kbd
@item M-x db-find-file @key{RET} forms-demo2.dat @key{RET}
Load the database.  After calling @code{db-find-file}, you may be asked
for the name of the format file if EDB can't infer it from the name or
contents of the data file.  @xref{Invoking EDB}.  When the database
finishes loading, the data display buffer is visible and EDB is in
Database View mode (@pxref{Database View mode}).

@need 400
@item n
@itemx p
Go to the next or previous record (@pxref{Moving around in the
database}).  The data display buffer is in Database View mode, which is
read-only and does not permit editing (@pxref{Database View mode}).

@need 400
@item TAB
@itemx C-n
Go to the first field and switch to Database Edit mode.  @xref{Changing
to Database Edit mode}, and @ref{Database Edit mode}.  Once you are on a field,
printing characters insert themselves and the other usual editing
commands work as well.  @kbd{TAB} moves to the next field, and
@kbd{C-n} moves to a field on the next line (or to the next line of this
field, if it spans multiple lines).  @xref{Moving from field to field},
and @ref{Movement within a field}.

@need 400
@item M-TAB
@itemx C-p
Like @kbd{TAB} and @kbd{C-n}, but move backward by fields or lines.

@item M-s
Search for a value in the current field.  @xref{Searching}.

@item C-c C-c
Return to Database View mode.

@item h
See a summary of all the records of the database; @kbd{h} stands for
``headers''.  @xref{Database Summary mode}.  You can move around in the summary
buffer using ordinary movement commands, and the record under point will
be displayed in the data display buffer.  Use @kbd{v} or @kbd{e} to
return to the data display buffer; @kbd{v} puts you in Database View
mode and @kbd{e} puts you in Database Edit mode.

@item M-x db-sort @kbd{RET}
Invoke the database sort interface, which permits easy specification of
how records should be sorted, and then perform the sort.  Type @kbd{C-h
m} or @kbd{?} for help while in the database sort interface (or anywhere
in EDB).  @xref{Sorting}.

@item C-x C-s
Save to disk any changes you have made to the database.

@item C-h m
Display a list of commands.  This command works in all Emacs modes (and
in particular, in all EDB modes).

@item q
Quit EDB@.  You are offered the chance to save the changes you have
made, then the database buffer is buried.
@end table

EDB provides many more commands than these; see this manual's table of
contents
@c Does this work???
@ifinfo
(@pxref{Top})
@end ifinfo
or index (@pxref{Concept Index}) to find the topic that interests you.


@node Terminology,  , Example EDB session, Introduction
@section Terminology

A database is a collection of records, each of which is comprised of
fields.  A record's fields are usually all related to some central
object or concept; for instance, they might describe various information
about a particular person such as name, address, and phone number.  All
records of a database have the same structure (they contain the same
fields), though typically different records have different information
in the fields.

@c (Actually it is possible for records of the conceptual database to have
@c quite different structure, but when the database is read into EDB, a
@c single record type, which is probably a superset of those used in some
@c other representation, must be used.)

EDB permits database records to be viewed, edited, and manipulated in a
structured way.


@node Database mode, Database View mode, Introduction, Top
@chapter Database mode

A single database record (typically the ``current record'') is viewed in
a data display buffer.@footnote{The data display buffer was previously
called the format buffer; this is why all of the variables and functions
relating to it start with the @code{dbf-} prefix.} The layout and
formatting of the data display buffer---where and how the fields of the
current record are shown, and what fixed explanatory text surrounds
them---is specified by a data display format.  Only the database fields
can be edited; the explanatory text is fixed.  Creating a new data
display format is described in @ref{Specifying the display format}.
Creating a new data display buffer (with the same or a different data
display format) is described in @ref{Making additional data display
buffers}.  Viewing summary information about all database records at
once is described in @ref{Database Summary mode}.

@cindex editing database files
@cindex database files, editing
@cindex files, editing database
Database mode has two basic submodes, Database View mode
(@pxref{Database View mode}) and Database Edit mode (@pxref{Database
Edit mode}).  These modes are used, respectively, when examining or
manipulating records and when changing information in a particular
record.  Keystrokes have different meanings in these two modes.  In
Database View mode no editing may be done, and many printable characters
are redefined to make manipulation of the database easy (for instance,
@kbd{n} moves to the next record).  In Database Edit mode a field of the
current record is being edited; most printable keys insert themselves,
and other editing and movement commands work in the ordinary way.  In
the data display buffer, where database records are ordinarily viewed
and edited, one of these two modes is always in effect.  (You may be
tempted to directly edit a raw database file in its on-disk layout.  Do
so at your own risk, and never change a database buffer out of Database
mode.)

@c (While EDB has no built-in support for
@c editing database files, you can do so yourself, @emph{if} you are
@c familiar with the file layout in question.  Use a new buffer to do any
@c such editing; do not attempt to change the mode of any database buffer.)

@cindex mode line
The mode line indicates which mode you are in.  It looks something like:

@example
-***-Database: machine-dbase        (Edit Abbrev 42/431)---All------------
@end example

The mode line consists of three modification indicators, the word
@samp{Database:} (which reminds you that you are in database mode), the
name of the database file being manipulated (in this case,
@file{machine-dbase}), minor mode information within parentheses, and
the usual percentage-of-screen-visible indicator.  The minor mode
information consists of the database submode (such as View, Edit, or
Summary), any other minor modes which are turned on (such as Abbrev
mode), the number of the current record, and the total number of records
in the database.

Ordinarily the Emacs mode line contains only one modification indicator
consisting of two dashes (not modified), asterisks (modified), or
percent signs (read-only).  The EDB mode line contains three
modification indicators, one each for the database, the displayed
record, and the current field.  The field indicator is @samp{*} if the
field under point has been modified, @samp{-} if it has not, and
@samp{%} if it is read-only or if no field is under point (for instance,
if the data display buffer is in Database View mode rather than Database
Edit mode).

The database is modified only when a changed record is written into it;
changes to the displayed record (also called the current record) do not
immediately affect the database proper.  This permits such modifications
to be conveniently undone.  (@xref{Undoing all changes to a record}, and
@ref{Making changes permanent}.)  Thus, the displayed record may be
modified without the database being modified, since the database is
considered modified only when the current record has been processed and
the resulting value placed in the database.  A similar situation exists
for the current field and the displayed record.  (@xref{Undoing changes
to a field}.)

@c   A similar situation is the case with records, which may be
@c modified but which don't cause the database itself to be changed until
@c the new, changed record is placed in the database.  You can undo changes
@c to the current field or the current record with @kbd{C-x u} (which is
@c bound to @code{advertised-undo} in Database Edit mode and to
@c @code{db-revert-record} in Database View mode); you can replace the
@c database with the information stored on disk via
@c @code{db-revert-database} (@kbd{C-x r} in Database View mode).

@findex save-some-buffers
Do not attempt to directly change the major mode of a database buffer.
If a database buffer is placed in another mode, the database functions
will cease working (they refuse to operate on non-database buffers,
since the consequences of such action could be severe); for instance,
you may be unable to save any of your work due to errors raised in the
execution of @code{save-some-buffers}.  Furthermore, EDB makes
assumptions about where point is located in Database View and Database
Edit modes; violating these can cause changes to the current record to
be lost.


@node Database View mode, Database Edit mode, Database mode, Top
@chapter Database View mode
@cindex Database View mode
@cindex View mode, Database


The data display buffer is in Database View mode whenever field information is
not being edited.  Most commands to move from record to record and to
manipulate records (sorting, printing reports, showing summaries, etc.)
are performed in Database View mode.

Basic operations are described here; more complicated ones, such as
searching (@pxref{Searching}), are given sections of their own.

@menu
* Moving around in the database::  Moving around in the database
* Changing to Database Edit mode::  Changing to Database Edit mode
* Undoing all changes to a record::  Undoing all changes to a record
* Making changes permanent::    Making changes permanent
* Adding and removing records::  Adding and removing records
* Exiting database mode::       Exiting database mode
@end menu


@node Moving around in the database, Changing to Database Edit mode, Database View mode, Database View mode
@section Moving around in the database
@cindex moving from record to record

@table @kbd
@item n
@findex db-next-record
Go to the @var{arg}th next record
(@code{db-next-record}).
In that record, go to the current field, if any.

@item p
@findex db-previous-record
Go to the @var{arg}th previous record
(@code{db-previous-record}).
In that record, go to the current field, if any.

@item <
@itemx M-<
@findex db-first-record
Show the database's first record
(@code{db-first-record}).
With optional prefix argument, ignores hiding.

@item >
@itemx M->
@findex db-last-record
Show the database's last record
(@code{db-last-record}).
With optional prefix argument, ignores hiding.

@item j
@findex db-jump-to-record
Show the database's @var{arg}th record
(@code{db-jump-to-record}).
Hiding is ignored unless optional argument @var{respect-hiding} is specified.
@end table

There are two special hybrid commands that show more of the current record
if there's more to see and otherwise show the next (or previous) record.

@table @kbd
@item SPC
@findex db-next-screen-or-record
Go to the @var{arg}th next screenful of this display, or to the @var{arg}th
next record, if this is the last screenful of this display
(@code{db-next-screen-or-record}).
If point is in the summary buffer and the data display buffer is not visible,
then move to the next record.

@item DEL
@findex db-previous-screen-or-record
Go to the @var{arg}th previous screenful of this display, or to the @var{arg}th
previous record, if this is the first screenful of this display
(@code{db-previous-screen-or-record}).
If point is in the summary buffer and the data display buffer is not visible,
then move to the previous record.
@end table


@node Changing to Database Edit mode, Undoing all changes to a record, Moving around in the database, Database View mode
@section Changing to Database Edit mode

When in Database View mode, you cannot edit the fields of the record
being displayed.  In order to do so, change to Database Edit mode and
move to the field you wish to edit.  You can click the mouse on the
field you wish to edit, or move to the first or last field (and from
there to the desired field) via the following keystrokes:

@table @kbd
@item TAB
@itemx C-n
@itemx e
@findex db-first-field
Move to first field
(@code{db-first-field}).

@item C-p
@itemx M-TAB
@findex db-last-field
Move to last field
(@code{db-last-field}).
@end table


@node Undoing all changes to a record, Making changes permanent, Changing to Database Edit mode, Database View mode
@section Undoing all changes to a record
@cindex undoing changes to a record
@cindex reverting changes to a record

@table @kbd
@item C-x u
@findex db-revert-record
Set the record to be the same as the corresponding one in the database
(@code{db-revert-record}).
In other words, undo any changes made since entering this record.

@item C-x r
@findex db-revert-database
Replace the database with the data on disk
(@code{db-revert-database}).
This undoes all changes since the database was last saved.
@end table

You can also undo changes to the current field; see @ref{Undoing
changes to a field}.


@node Making changes permanent, Adding and removing records, Undoing all changes to a record, Database View mode
@section Making changes permanent
@cindex making changes permanent
@cindex changes, making them permanent
@cindex committing changes
@cindex changes, committing them
@cindex accepting changes
@cindex changes, accepting them

You edit a copy of a database record; the database itself is not
changed until you commit the changes.  This occurs automatically
whenever any command causes a different record to be displayed, when the
database is saved, when a report is generated, and so forth.  It does
@emph{not} occur when you switch from Database Edit mode to Database View mode,
though the field modification flag (in the mode line) will become a
percent sign and the record modification flag, an asterisk.  When the
record is committed, the record modification flag becomes a dash and
the database modification flag becomes an asterisk.

You can manually install the current record, as modified, into the
database.  The following two functions are identical:

@table @kbd
@item RET
@findex db-accept-record
Install the current record in the database; make any changes permanent
(@code{db-accept-record}).

@item M-x db-commit-record
@findex db-commit-record
Install the current record in the database; make any changes permanent.
@end table

Committing a record makes the changes permanent only insofar as they
become part of the in-memory representation of the database.  The
on-disk version is not affected unless you overwrite it by using
@code{save-buffer} or @code{write-file}, or otherwise indicate that the
database should be written to disk (say, by responding affirmatively to
a question about saving the database).


@node Adding and removing records, Exiting database mode, Making changes permanent, Database View mode
@section Adding and removing records
@cindex adding a record
@cindex inserting a record
@cindex deleting a record
@cindex removing a record
@cindex killing a record

@table @kbd
@item a
@itemx i
@findex db-add-record
Add a new record to the database immediately before the current record
(@code{db-add-record}).

@item c
@findex db-copy-record
Insert a copy of the current record in the database immediately after it
(@code{db-copy-record}).
The second of the two records is made the current record.
With a prefix argument, inserts that many copies.

@item o
@findex db-output-record-to-db
Copy (output) the current record to @var{database}
(@code{db-output-record-to-db}).
@var{database} must be read in and compatible with the current database.

@item d
@itemx k
@findex db-delete-record
Remove the current record from the database
(@code{db-delete-record}).
With a prefix argument, doesn't verify.
@end table

By default, deleting a record marks the database as modified.  Set the
following variable to change this behavior.

@table @code
@item db-delete-record-modifies-database-p
@vindex db-delete-record-modifies-database-p
Non-@code{nil} if deleting a record should mark the database as modified.
@end table


@node Exiting database mode,  , Adding and removing records, Database View mode
@section Exiting database mode
@cindex exiting database mode
@cindex quitting database mode
@cindex killing a database buffer

@table @kbd
@item q
@findex db-quit
Quit editing the database for now; bury its buffers
(@code{db-quit}).
@end table

@findex kill-buffer
@findex db-kill-buffers
You can also kill a database buffer in the usual way (for instance, by
using @code{kill-buffer}); this causes @code{db-kill-buffers} to be
called.  If the database's last buffer is killed this way, the database
itself is also killed.  No offer is made to save changes; call
@code{db-quit} in order to do that.

@table @kbd
@item db-kill-buffers
@findex db-kill-buffers
Kill this buffer, and the associated summary or data display buffer, if any.
If its last data display buffer is killed, the database is killed too.
@findex db-exit
Does not offer to save changes to the database or to this record; use @code{db-exit}
with optional argument to do so.
@end table


@node Database Edit mode, Searching, Database View mode, Top
@chapter Database Edit mode
@cindex Database Edit mode
@cindex edit mode


The data display buffer is in Database Edit mode whenever a field of the
current record is being edited.  All printing characters insert
themselves, and the usual editing commands can be performed on the field
contents.  It is also possible to move from field to field and from
record to record, and to perform other operations on the database,
though the commands available in Database View mode are richer.

In Database Edit mode, point is always in the field currently being
edited.  The database is not modified as soon as changes are made in
Database Edit mode.  Rather, a copy of the record in question is
displayed and edited, and only when you move to a new record, initiates
some other global action (not specific to the edited record), or
explicitly commits the changes (@pxref{Making changes permanent}).  This
permits easier undoing of incorrect modifications.

In order to perform most record-level operations, you switch to Database
View mode, and then perform them there.  Several commonly used commands,
however, such as searching and moving from record to record, are
accessible directly from Database Edit mode.

Commands that move from field to field check the validity of the current
field before moving off it; commands that move from record to record do
this as well, then make any changes in the current record permanent (though
the database file on disk is not changed).

Basic operations are described here; more complicated ones are given
sections of their own.


@menu
* Exiting Database Edit mode::  Exiting Database Edit mode
* Undoing changes to a field::  Undoing changes to a field
* Moving from record to record::  Moving from record to record
* Moving from field to field::  Moving from field to field
* Movement within a field::     Movement within a field
* Editing a field::             Editing a field
* Getting help::                Getting help
@end menu


@node Exiting Database Edit mode, Undoing changes to a field, Database Edit mode, Database Edit mode
@section Exiting Database Edit mode

@table @kbd
@item C-c C-c
@findex db-view-mode
Switch to Database View mode
(@code{db-view-mode}).
With an argument, toggle between Database View and Database Edit modes.
@end table


@node Undoing changes to a field, Moving from record to record, Exiting Database Edit mode, Database Edit mode
@section Undoing changes to a field
@cindex undoing changes to a field
@cindex reverting changes to a field

You can undo changes to the current field via Emacs' usual undo
facility; use @kbd{C-x u} or @kbd{C-_} to undo changes made since
entering the current field.

You can also revert the current field to its original value; this is
useful if you made a change, moved off the field, and then moved back
onto it.

@table @kbd
@item C-x U
@findex db-revert-field
Undo any changes made since entering this field
(@code{db-revert-field}).
Replace the onscreen text in this field with that of the underlying record.

A similar effect can be had by invoking @kbd{C-x u} multiple times.
@end table

From Database View mode, you can simultaneously revert every modified
field of a record to its original value; see @ref{Undoing all changes to a
record}.


@node Moving from record to record, Moving from field to field, Undoing changes to a field, Database Edit mode
@section Moving from record to record
@cindex moving from record to record

These commands make any changes to the current record permanent.

@table @kbd
@item M-n
@findex db-next-record
Go to the @var{arg}th next record
(@code{db-next-record}).
In that record, go to the current field, if any.

@item M-p
@findex db-previous-record
Go to the @var{arg}th previous record
(@code{db-previous-record}).
In that record, go to the current field, if any.
@end table


@node Moving from field to field, Movement within a field, Moving from record to record, Database Edit mode
@section Moving from field to field
@cindex moving from field to field

@table @kbd
@item TAB
@findex db-next-field
Move to @var{arg}th next reachable field, wrapping if necessary
(@code{db-next-field}).
When called interactively, @var{arg} defaults to 1.

@item M-TAB
@findex db-previous-field
Move to @var{arg}th previous reachable field, wrapping if necessary
(@code{db-previous-field}).
When called interactively, @var{arg} defaults to 1.

@item M-<
@findex db-first-field
Move to first field
(@code{db-first-field}).

@item M->
@findex db-last-field
Move to last field
(@code{db-last-field}).
@end table

Also see the keystrokes @kbd{C-n} and @kbd{C-p}, described below.


@node Movement within a field, Editing a field, Moving from field to field, Database Edit mode
@section Movement within a field

All Emacs cursor motion commands retain their standard meanings, except
that they do not move outside the field.

The line-movement commands have slightly changed meanings:  if the motion
would take the cursor out of the current field, then they move to the next
field.

@table @kbd
@item C-n
@findex db-next-line-or-field
Move to @var{arg}th next line
(@code{db-next-line-or-field}).  If that would move out of the current field,
move to the closest field to that, but not the current one, wrapping if necessary.

@item C-p
@findex db-previous-line-or-field
Move to @var{arg}th previous line
(@code{db-previous-line-or-field}).  If that would move out of the current field,
move to the closest field to that, but not the current one, wrapping if necessary.
@end table


@node Editing a field, Getting help, Movement within a field, Database Edit mode
@section Editing a field

@c This will change if EDB ever uses miniwindow.el.

Many Emacs editing commands retain their standard meanings; for
instance, printing characters insert themselves and deletion commands
work as usual, except that they do not make changes outside the field;
among these are @kbd{C-d} (@code{delete-char}), @kbd{@key{DEL}}
(@code{backward-delete-char}), @kbd{M-d} (@code{kill-word}),
@kbd{M-@key{DEL}} (@code{backward-kill-word}), and @kbd{C-k}
(@code{kill-line}).


@node Getting help,  , Editing a field, Database Edit mode
@section Getting help
@cindex help for record fields

You can get some information about the current field, such as what type of
value it expects or what its contents signify, by using the following
command.

@table @kbd
@item M-?
@findex db-field-help
Display help for current field using the recordfieldspec help-info field
(@code{db-field-help}).
If this is a string, display it.  If it is a form, eval it and display the
result.
@end table


@node Searching, Sorting, Database Edit mode, Top
@chapter Searching
@cindex searching

A useful and commonly used database operation is searching for records that
meet some criteria:  for instance, finding a particular record or indicating
that following operations should only apply to records that correspond to
an address in greater Boston.  EDB provides several functions to support
such operations.

To perform a search pertaining to the contents of only one field, move to
that field and use the following command:

@table @kbd
@item M-s
@findex db-search-field
Search for occurrences of @var{pattern} in the current field of any record
(@code{db-search-field}).
Finds the first match after the current record; wraps around automatically.
With prefix argument, marks all matches in addition to going to the first one.
If hiding is in effect, hidden records are ignored.
@end table

The same keystroke in Database View mode permits specification of patterns which
depend upon the contents of several fields:

@table @kbd
@item s
@itemx M-s
@itemx M-S
@findex db-search

@findex db-search
@findex db-search-field
@code{db-search} is not yet implemented; use @code{db-search-field} instead
(@code{db-search}).
@findex db-search
In a future version of EDB, @code{db-search} will permit searching on all fields
of a record simultaneously.
@end table

For a description of marking, see @ref{Marking and hiding}.


@menu
* Search patterns::             Search patterns
@end menu


@node Search patterns,  , Searching, Searching
@section Search patterns
@cindex search patterns

Search patterns can be as simple as a datum to match exactly or as
complicated as the conjunction, disjunction, and negation of tests to be
performed on field contents.

@subsection Basic patterns

A basic search pattern has the same form as the data that is kept in the
field; for instance, to search in a string field for a particular
string, use that string; to search for the date March 14, 1967, use
@samp{3/14/67} or @samp{14 March 1967} or any other accepted date
format.  A basic pattern is treated somewhat more richly than a literal,
however.  In a string field, typing a string results in a match for any
element which contains it as a substring; typing @samp{ail}, without the
quotes of course, matches both ``ailment'' and ``fail''.  In a date
field, @samp{3/67} matches any date in March of 67, not just those
March 67 dates which specifically exclude a day of the month.

@subsection Comparisons

@cindex <, in search pattern
@cindex >, in search pattern
@cindex =, in search pattern
A search pattern may also be a comparison prefix (<, >, or =) plus a
datum which is treated exactly like any other element of that field.  In
a string field, @samp{<ail} matches all elements lexicographically less
than ``ail''; @samp{=ail} matches only fields containing exactly
``ail'', but not ``ailment'' or ``fail''.  Warning:  @samp{= ail} looks
for an entry containing `` ail'', that is, four-character sequence
starting with a space.

In a date field, searches work slightly differently; for instance,
@samp{>3/14} matches dates after March 14 in any year, and
@samp{=3/67} matches only dates in March 67 whose day of month is not
specified.  For more information about the interpretation of patterns,
see the documentation for the particular types.

@subsection Logical connectives

More complicated patterns can be built up out of simpler ones via the
logical connectives AND, OR, and NOT.  These work in the obvious way.
One pattern which finds any date between the ides of March and
Christmas, inclusive, is @samp{> 3/14 AND < 12/26}; two patterns which
find dates except March 14 are @samp{NOT 3/14} and @samp{< 3/14 OR >
3/14}.  To find strings that either contain the substring ``ail'' or
start with a, b, or c, use @samp{ail OR < d}.

@c Does this use of "@ " work in info?
The precedence of these connectives is:  NOT, which is most tightly bound
to its test, then OR, then AND.  There are no provisions for grouping or
otherwise overriding this ordering.  Connectives (and REGEXP,
described below) consume all surrounding spaces and tabs.
@c ; therefore,
@c there is not a convenient way to specify all strings lexicographically
@c after `` d'', for instance, because @samp{> @ d} (with two spaces between
@c the @samp{>} and @samp{d}) is interpreted as all strings
@c lexicographically after ``d'', just as @samp{> d} (with one space between
@c the @samp{>} and @samp{d}) is.


@subsection Other pattern operations

One other pattern operation of interest is the regexp operator for
string fields.  This is invoked by either using REGEXP with surrounding
spaces, or / without a trailing space.  For instance, @samp{/^[ace]}
matches any string field starting with a, c, or e; @samp{/.} matches any
nonblank string field; and @samp{NOT REGEXP a.*b.*c} matches any string
which does not contain the letters a, b, and c in order.  This last
example shows that EDB's search commands are more powerful than general
regular expression searching.


@node Sorting, Database Summary mode, Searching, Top
@chapter Sorting
@cindex sorting

Sorting a database reorders its records without changing the contents of
any particular record.  For instance, it might be convenient to arrange
an address database sometimes alphabetically by last name, sometimes by
ZIP code, and sometimes by some other criteria.

@table @kbd
@item M-x db-sort
@findex db-sort
Sort the database.  With a prefix argument, don't confirm the sort order.
@end table

Ordinarily, calling this function invokes the sort interface, a
graphical tool for specifying which fields should be treated as sort
keys, and in what order.  In a database whose records have fields
@samp{firstname}, @samp{lastname}, @samp{address}, @samp{city}, and
@samp{zip}, and in which records should first be sorted on
@samp{lastname} in increasing order, then on @samp{firstname} in
@emph{decreasing} order, ignoring the other fields entirely for the
purposes of the sort, the sort interface display would look like

@example
    ==== Significant fields:
      lastname             increasing
      firstname            decreasing
    ==== Nonsignificant fields:
      address              increasing
      city                 increasing
      zip                  increasing
    ==== Hidden records to end:  No 
@end example

In addition to which fields should be sorted by, the sort interface 
permits specification of how hidden records should be treated.

@table @kbd
@item t
@findex dbsi-toggle-hidden-to-end

@vindex dbsi-hidden-to-end-p
Toggle the boolean value of @code{dbsi-hidden-to-end-p}
(@code{dbsi-toggle-hidden-to-end}).
This controls whether hidden records should all be placed at the end
of the sorted order or should be sorted according to the same criteria as
non-hidden records.
@end table

To change the relative order of fields, and whether they're significant or
not, use the following commands.

@table @kbd
@item C-k
@findex dbsi-kill-line
Kill field on current line, placing it in the sort interface kill stack
(@code{dbsi-kill-line}).

@item C-y
@findex dbsi-yank-line
Yank most recently killed (lifo ordering) field, inserting it before point
(@code{dbsi-yank-line}).
This removes the field from the sort interface kill stack.
@end table

To specify how a particular field should be ordered, use the following
commands.

@table @kbd
@item i
@findex dbsi-increasing
Specify that the field at point should use an increasing ordering
(@code{dbsi-increasing}).

@item d
@findex dbsi-decreasing
Specify that the field at point should use a decreasing ordering
(@code{dbsi-decreasing}).

@item o
@findex dbsi-ordering-function
Specify an ordering function for the field at point
(@code{dbsi-ordering-function}).
An ``ordering function'' returns -1, 0, or 1 depending on whether its first
argument is less than, equivalent to, or greater than its second argument.

@item s
@findex dbsi-sorting-function
Specify a sorting function for the field at point
(@code{dbsi-sorting-function}).
A ``sorting function'' returns @code{t} if its first argument is less
than its second argument and @code{nil} otherwise.
@end table

Each database has a default sort order in its @code{field-priorities}
slot (@pxref{The database structure}) which is used when setting up the
sort interface (and is used for sorting when no other ordering
information is specified).  When you exit the sort interface, that
slot can be set to the ordering depicted on the screen (see below).

Each data display buffer also has a default sort order:  the database's
@code{field-priorities} slot is ignored if the buffer-local variable
@code{dbf-field-priorities} is @code{nil}.  You may set or unset this
variable using the sort interface; when it is unset, the default sort
order is taken from the database's @code{field-priorities} slot.
Setting the database's sort order automatically clears the
@code{dbf-field-priorities} variable.

@table @code
@item dbf-field-priorities
@vindex dbf-field-priorities
The list of field priorities for this database in this data display buffer.
If non-@code{nil}, overrides the database's field-priorities slot.


@item dbf-hidden-to-end-p
@vindex dbf-hidden-to-end-p
The default, local to this data display buffer, for the hidden-to-end-p
database slot.  Only used if  dbf-field-priorities  is non-@code{nil}.
@end table

The following commands are used to exit the sort interface; most of them
also cause the database to be sorted.  Some of them set the default
ordering for the database or the data display buffer.

@table @kbd
@item RET
@itemx C-c C-c
@findex dbsi-use-ordering-make-database-default
Use the current ordering to sort, and make it the default for future sorts
of this database
(@code{dbsi-use-ordering-make-database-default}).
The user is warned if there are killed, non-yanked fields.

@item A
@itemx U
@findex dbsi-use-ordering-make-buffer-default
Use the current ordering to sort, and make it the default for future sorts
in this data display buffer only
(@code{dbsi-use-ordering-make-buffer-default}).
The user is warned if there are killed, non-yanked fields.

@item a
@itemx u
@findex dbsi-use-ordering
Use the current ordering for this sort only
(@code{dbsi-use-ordering}).

@item !
@findex dbsi-this-field-only
Sort according to only the field at point
(@code{dbsi-this-field-only}).
All editing of other fields is ignored.

@item q
@findex dbsi-quit
Abort the sort and exit the sort interface
(@code{dbsi-quit}).

@item c
@findex dbsi-quit-clear-buffer-default
Clear the default sort order for this buffer and exit the sort interface
without sorting
(@code{dbsi-quit-clear-buffer-default}).
In the future, the default sort order will come from the database.
@end table

The sort interface returns a field priorities list to be used when
sorting; when the sort interface is entered, either the value of the
@code{dbf-field-priorities} variable, or the database's
@code{field-priorities} slot, is being used.  For information about the
format of the field priorities list, see @ref{The database structure}.

Sorting does not ordinarily mark the database as modified, because not
the data itself, but only the way it is arranged, has been changed.  If
you set @code{db-sort-modifies-p} to non-@code{nil}, then whenever a
database is sorted (even if the resulting order is the same as the
original one), the database is marked as modified.

@table @code
@item db-sort-modifies-p
@vindex db-sort-modifies-p
If non-@code{nil}, then sorting a database marks it as modified too.
@end table


@menu
* Sorting functions::           Sorting and ordering functions
@end menu


@node Sorting functions,  , Sorting, Sorting
@section Sorting and ordering functions
@cindex sorting functions
@cindex ordering functions

In order to specify the relative order of two field values (for the same
field, but from different records), the database designer provides a
sorting function, an ordering function, or both.  If only one is
provided, the other is automatically generated from it.  In any event,
only one of them is used for a given field on any particular sort.

A sorting function takes two field values as arguments and returns
@code{t} if its first argument is less than its second argument (that
is, the first argument appears previous to the second in the sorted
order).  The sorting function returns @code{nil} if the arguments are
equal or if the first argument is greater than the second (appears later
in the sorted order).

An ordering function, on the other hand, returns complete information
about the relative order of its two arguments:  it returns -1, 0, or 1
depending on whether its first argument is less than, equivalent to, or
greater than its second argument.

Use of an ordering function can result in fewer comparisons in some
cases, because it returns more information.  This is worthwhile if a
significant amount of processing is required before the comparison is
done.  For example, suppose that two addresses are being carefully
checked for equality and some of the steps leading up to that are
expansion of abbreviations, standardization of spelling, capitalization,
and spacing, etc.; then it is better to return the exact relative
ordering than to possibly require another time-consuming operation to
determine it.

If it is possible to canonicalize the values beforehand, that may be
even more efficient, but that is not always possible; consider the case
of a small (but tedious to extract) part of the information in each
field being compared.


@node Database Summary mode, Marking and hiding, Sorting, Top
@chapter Database Summary mode
@cindex Database Summary mode
@cindex summary mode

A summary is a listing containing abbreviated information about every
record; it permits many records to be viewed at once.

This is available in Database View mode via the following command:

@table @kbd
@item D
@itemx H
@itemx h
@findex db-summary
Display a summary (or directory) of all database records according to
@vindex dbf-summary-function
@findex dbf-set-summary-format
the variable @code{dbf-summary-function}, which is set by @code{dbf-set-summary-format}
(@code{db-summary}).
The summary appears in a separate buffer.
When called from the summary buffer, this updates the summary.
@end table

When a summary is created, the summary display format appears in the
summary buffer once for each record, with appropriate values substituted
for its display specifications.  Hidden records are included in the
summary only if the data display buffer variable
@code{dbf-summary-show-hidden-records-p} is non-@code{nil}.

@table @code
@item dbf-summary-show-hidden-records-p
@vindex dbf-summary-show-hidden-records-p
Nil if hidden records should be hidden from the summary, @code{t} otherwise.
@end table

The entire format is indented by two characters; the first and second
columns contain @samp{+} and @samp{[}, respectively, if the record is
marked or hidden.  For information about marking and hiding records,
see @ref{Marking and hiding}.

The summary buffer is not updated whenever a record value changes; in
the interest of efficiency, it remains as is until the next
@code{db-summary} command is issued, at which time the summaries are
redisplayed after all, some, or none of them have been recomputed.  For
the same reason, when a single mark or hide bit changes, the summary is
updated; when many change, it is usually not.

@c  [[[Describe exceptions.  This may change soon in any event.]]]

When point is in the summary buffer, the associated data display buffer
(nearly) always displays the record under point.  (Some Emacs commands
can move point without EDB noticing.)  Movement in the summary buffer is
by any of the ordinary Emacs commands, including searching.  Most
Database View mode commands also work in the summary buffer.

The summary display format defaults to the first non-literal line in the
database display format---that is, the first line which contains a display
specification.

@cindex summary format, setting
Summary display formats can display information any way that an ordinary
display format can, including showing more than one field of the record
in question or spanning several lines.  The only restriction is that the
summary display format must cover a specific number of lines:  each
display specification must have its @code{min-height} and
@code{max-height} slots set to equal values.  For more information about
display formats, @xref{How information is displayed}.

The following command may appear in a format file or an auxiliary file,
or it can be invoked directly.  When it appears as an Emacs Lisp form,
remember the special meaning of the backslash character and double it
where necessary.

@table @kbd
@item M-x dbf-set-summary-format
@findex dbf-set-summary-format
Specify the format used in the Database Summary buffer.
Argument @var{summary-format} is a string containing display specifications.
Call this in the data display buffer, or in a format file or auxiliary file.
@end table


@c This stuff is obscure enough that it's not worth taking up manual
@c pages describing here.  The variables have documentation strings, and
@c there are comments in the code as well.
@c
@c @node Summary mode variables, , ,
@c @section Summary mode variables
@c 
@c The variables are used by the database summary code are all buffer-local
@c variables.  They fall into three categories:  those that are local to
@c the summary buffer and set only in it; those that are local to the
@c data display buffer and set only in it; and those that are set in
@c both buffers (though changing the value in one does not automatically
@c change it in the other).
@c 
@c These variables are, for the most part, of interest only to the
@c programmer who will be writing code that interacts closely with the summary.


@node Marking and hiding, Reports, Database Summary mode, Top
@chapter Marking and hiding
@cindex marking
@cindex hiding
@cindex selecting only some records

The marking facility permits operations to be performed on only certain
records of a database.  For instance, to create a report which describes
only some of the database records, you would first mark the records of
interest.  Then you would call @code{db-report} with a prefix argument (do
so by pressing @kbd{C-u} first), or would make optional second argument
@var{markedp} non-@code{nil}.  See the documentation of the individual
operations to see whether they support operation on only the marked
records.

The hiding facility also restricts attention to a subset of the current
database.  It is similar to Outline mode in that it makes some
records temporarily invisible.  Hiding is useful when you wish to
concentrate on a subset of the database without being distracted by
other records that may be present.  By default hidden records are
skipped by the record-motion commands, excluded from searches and
reports, and ignored by most other operations.

Mark and hide bits are associated only with the in-memory version of a
database; they are not saved when you save a database, and are always
unset (boolean false) when a database is read in.  (When a database is
written to disk, although the disk version of the data does not contain
the mark and hide information, that information is not lost from the
working copy of the database.)

This behavior is a feature, not a bug.  Marking and hiding are
intended to help you temporarily group database records for operations
upon them; if there is information that cannot be recreated from a
record's fields, then you should consider adding another field for that
information.  On the other hand, mark or hide criteria may be
complicated.  If such a pattern is used often, then you may wish to
write a function to set the bits appropriately, which function could be
bound to a keystroke or automatically executed when the database is read
in.


@menu
* Setting the mark and hide bits::  Setting the mark and hide bits
* Movement among marked and hidden records::  Movement among marked and hidden records
* Details of hiding::           Details of hiding
@end menu


@node Setting the mark and hide bits, Movement among marked and hidden records, Marking and hiding, Marking and hiding
@section Setting the mark and hide bits

Every record may be thought of as having a pair of bits or boolean values
indicating whether it is marked and whether it is hidden.  The most
straightforward way to set these bits is to use an operation to mark,
unmark, hide, or unhide a particular record; these are bound to
keystrokes in Database View mode.

@table @kbd
@item m
@findex db-mark-record
Toggle whether the current record is marked
(@code{db-mark-record}).
With a nonzero prefix argument, set it to be marked.
With a zero prefix argument, set it to be unmarked.

@item O
@findex db-hide-record
Change whether the current record is hidden
(@code{db-hide-record}).
With a nonzero prefix argument, set it to be hidden.
With a zero prefix argument, set it to be unhidden.
@end table

The searching commands, when called with a prefix argument, mark each
matching record; @ref{Searching}.

Once all records of interest have been marked, through one or more marking
and/or searching commands, unmarked records can be hidden from
consideration.  This is useful if you want to work on only a small number
of records, or if specifying the records of interest is easier than
specifying those not of interest:  instead of hiding all the
uninteresting records, simply mark the interesting ones, then use the
following command to cause the unmarked ones to become hidden.

@table @kbd
@item M-x db-hide-unmarked-records
@findex db-hide-unmarked-records

@vindex dbc-hide-p
Hide all unmarked records.  Also clears all mark bits and sets @code{dbc-hide-p}.
@end table

The converse operation transfers information from the hide bits to the mark
bits.

@table @kbd
@item M-x db-mark-unhidden-records
@findex db-mark-unhidden-records
Mark all unhidden records.  Also clears all hide bits.
@end table

It is also possible to clear all the mark or hide bits.

@table @kbd
@item M-x db-unmark-all
@findex db-unmark-all
Clear the mark bit of every record.

@item M-x db-unhide-all
@findex db-unhide-all
Clear the hide bit of every record.
@end table


@node Movement among marked and hidden records, Details of hiding, Setting the mark and hide bits, Marking and hiding
@section Movement among marked and hidden records

Ordinarily, record movement commands (those which move from one record to
another) ignore hidden records, so that you never land on an hidden
record.  Marked records, on the other hand, are not treated specially by
the record movement commands.  The following Database View mode keystrokes
permit you to move to hidden records or to move directly to marked
records.

@table @kbd
@item M-n
@findex db-next-record-ignore-hiding
Go to the @var{arg}th next record, ignoring omissions
(@code{db-next-record-ignore-hiding}).
That is, all records, even those which are hidden, are counted.

@item M-p
@findex db-previous-record-ignore-hiding
Go to the @var{arg}th previous record, ignoring omissions
(@code{db-previous-record-ignore-hiding}).
That is, all records, even those which are hidden, are counted.

@item M-C-n
@findex db-next-marked-record
Go to the @var{arg}th next marked record
(@code{db-next-marked-record}).
Hidden records are treated according to db-hide-p.

@item M-C-p
@findex db-previous-marked-record
Go to the @var{arg}th previous marked record
(@code{db-previous-marked-record}).
Hidden records are treated according to db-hide-p.
@end table



@node Details of hiding,  , Movement among marked and hidden records, Marking and hiding
@section Details of hiding

The ``hidden'' bit of each record has no effect unless the following
variable is set:

@table @code
@item dbc-hide-p
@vindex dbc-hide-p
Non-@code{nil} if hiding is in effect, @code{nil} otherwise.
@findex dbc-set-hide-p
Use function @code{dbc-set-hide-p}, which works in either a data display buffer or
a summary buffer and sets the variable's value in both, instead of setting
this directly.
Setting this to @code{nil} is cheaper than changing the hide function to the empty
one, since no hide bits are recomputed.
This variable is automatically set by the hiding functions.
@end table

When @code{dbc-hide-p} is @code{nil}, the values of records' hide bits
are remembered, and they may still be set and unset, but they have no
effect on any operations until @code{dbc-hide-p} is once again set to
non-@code{nil}.  When @code{dbc-hide-p} is non-@code{nil}, @samp{Hide}
appears in the mode line of the database buffer.

The following operations work in either Database View mode or Database
Summary mode.

@table @kbd
@item M-o
@findex db-hiding-toggle
Change whether hiding is in effect
(@code{db-hiding-toggle}).
With a nonzero prefix argument, turn hiding on.
With a zero prefix argument, turn hiding off.

This does not change the current hide-function, and a hide bit is always
computed for each record, but hide bits have no effect on any operations
if hiding is not in effect.

@item M-C-o
@findex db-toggle-show-hidden-records
Toggle whether hidden records are shown in the summary
(@code{db-toggle-show-hidden-records}).
With a nonzero prefix argument, show hidden records in the summary.
With a zero prefix argument, don't show hidden records in the summary.

@item M-O
@findex db-hiding-set
Set the criteria for automatically determining whether to hide a record
(@code{db-hiding-set}).
This isn't implemented yet.
@end table


@node Reports, Specifying the display format, Marking and hiding, Top
@chapter Reports
@cindex reports

Reports can be generated from a database by using the following command
in view mode:

@table @kbd
@item r
@findex db-report
Create a report according to @var{report-filename}
(@code{db-report}).
Prefix argument @var{markedp}, if non-@code{nil}, means report on only marked records.
If hiding is in effect, hidden records are not reported upon.
When called interactively, prompts for @var{report-filename}.
@end table

The way a report looks is specified in precisely the same as are display
formats and summary formats (@pxref{How information is displayed}).
This information must be placed in a file; you cannot type it
directly when creating a report.  This restriction makes errors in the
report format easier to correct.

The report is placed in the @samp{*Database Report*} buffer, which is in
Text mode.  The information may then be edited, saved to disk, or
otherwise manipulated.  The buffer is in Text mode and is not yet a
file; you must save it to make it a file.

To create a report which mentions only marked records
(@pxref{Marking and hiding}), supply a prefix argument to the report
command by typing @kbd{C-u} first.


@menu
* Bugs in report generation::   Bugs in report generation
@end menu

@node Bugs in report generation,  , Reports, Reports
@section Bugs in report generation

There are currently a few unfortunate bugs in EDB's handling of reports.
The most noticeable of these are errors in the handling of format
information:  primarily, indentation is not respected.  Bug fixes for
these problems are welcome.


@node Specifying the display format, Designing a database, Reports, Top
@chapter Specifying the display format
@cindex display format, selecting

Different layouts and on-screen arrangements of the values stored in
database records are appropriate when you are concentrating on different
aspects of the data.  Sometimes you prefer to see just a few of the
fields; at other times you may want to see the records in full detail.
It may also be appropriate for the display format of a record to depend
on the record's field values.  This section describes how to choose a
different display format for the record being displayed, either manually
or automatically.


@menu
* Changing display formats::    Changing display formats
* Execution of format file eval expressions::  Execution of format file eval expressions
* Making additional data display buffers::  Making additional data display buffers
@end menu


@node Changing display formats, Execution of format file eval expressions, Specifying the display format, Specifying the display format
@section Changing display formats
@cindex changing display formats
@cindex alternate display formats
@cindex variant display formats
@cindex display format, alternate
@cindex display format, variant

@findex db-change-format
EDB permits the creation and use of a variety of display formats with a
single database; you can also conveniently change the way that a
particular record is displayed by using @code{db-change-format} and
specifying the filename of the new display format, or a nickname for the
format that has been specified by the user or the database designer.
Choosing a different format does not create a new data display buffer;
it changes the way that records are displayed in the current one.

@table @kbd
@item M-x db-change-format
@findex db-change-format
Select and use an alternate display format to view the database.
If neither @var{format-name} nor @var{filename} is specified (as is the case when this
is called interactively), the user is prompted for them.  In Emacs Lisp
@vindex dbf-format-name-spec-alist
code, if @code{dbf-format-name-spec-alist} has been been set, usually only one of
the arguments is specified.  If both are specified, then @var{format-name}
becomes a name for the format @var{filename} specifies; if @var{format-name} is already
associated with a different format file, an error is signalled.

If the current format is unnamed, the user is prompted for a name
to give it, so that it can be conveniently restored if need be.  This
behavior is suppressed, and the record is not displayed, if the function is
not being called interactively.

The data display buffer is left in Database View mode.

Selecting the current format does not cause any work to be done.

Some databases automatically set the format of the record being displayed,
@vindex dbf-before-display-record-function
usually by setting @code{dbf-before-display-record-function} to a function that
overrides the format in effect when a record is about to be displayed.
This may cause this function to appear not to be doing any work.  In
actuality the format is being set, then reset.
@cindex format-spec structure
@cindex specifier, format
@item dbf-format-name-spec-alist
@vindex dbf-format-name-spec-alist
Association list of format names and format specifiers.
Each format name is an arbitrary string.
A format specifier is a filename or format file specifier, which is
a list of values for format variables.
The user sets the format specifier to a filename, and after that format file
has been read, EDB replaces the filename with a list of values for format
variables, so that the file need not be read again.

It is convenient for a database designer to set this, pre-assigning format
names to files so that the user only needs to remember the format names,
not the filenames.

@cindex format name
@item dbf-format-name
@vindex dbf-format-name
This buffer-local string names the format currently in use.
This should not be set by the user.

@item dbf-format-file
@vindex dbf-format-file
The format file from which the current format was built.
@end table

These values can be set in the auxiliary or format files so that you can
choose a format name (with completion) instead of having to remember a
filename.  If the selected format's specifier is a filename, then after
the file is read in, the format-spec is modified by replacing the
filename with information about the format such as the displayspecs, the
invariant text between them, and so forth.  Subsequent selections of
that format do not cause disk accesses.  For an example of the use of
@code{db-change-format}, see @ref{Record display hooks}.

@cindex hiding fields from a data display buffer
@cindex data display buffer, hiding fields
While it is not currently possible to selectively hide certain fields
from a data display buffer, judicious use of alternate formats can
result in nearly the same effect.


@node Execution of format file eval expressions, Making additional data display buffers, Changing display formats, Specifying the display format
@section Execution of format file eval expressions

@cindex local variables section of format file
@cindex format file, local variables section
@cindex format file, eval expressions in
@cindex eval expressions, in format file
@cindex primary format file
@cindex format file, primary
Often the ``Local Variables'' section of a format file contains code
that should only be executed once, or should only be executed before the
database is read in, because of either efficiency or correctness
constraints.  Because of this, the ``Local Variables'' section of a
format file is executed only when it is read in from disk (which is
usually only once).  In order to cause an expression to be evaluated
every time that a particular display format is selected, use the
@code{dbf-always} macro:

@table @kbd
@item dbf-always
@findex dbf-always

@vindex dbf-always-forms
Execute @var{body}, and place its forms in @code{dbf-always-forms}.
They will be executed each time that this format replaces another.
@item dbf-always-forms
@vindex dbf-always-forms
Forms executed every time that the format is selected.
These forms are only executed when a different format is replaced, not
every time that a record is displayed (or even every time that
@findex db-change-format
@code{db-change-format} is called).
@vindex dbf-before-display-record-function
See also @code{dbf-before-display-record-function}.
@end table

@findex dbf-set-summary-format
Of course, it is often valuable to overwrite a value when the display
format changes; this is the purpose of @code{dbf-always}.  It is always
safe to set variables whose name begins with @code{dbf} in such forms,
though changes to some such values---none of which the user should be
changing anyway---will not take effect when a display format is being returned
to (though they will work when it is first chosen).  This will affect
you only in that a call to @code{dbf-set-summary-format} will have an
effect only the first time that a format file is read in, not every time
that it replaces another, even if it is enclosed in a @code{dbf-always}
form.

@findex display-record
The forms in @code{dbf-always-forms} are not executed every time that a
record is displayed, or even every time that @code{db-change-format}
is called, but only when a format replaces another one (that is,
@code{db-change-format} is called and its first argument is not equal
to @code{dbf-format-name}).

Here is an example of a common problem with an expression which causes
an error if evaluated every time that the format is selected.  The
primary format file (the one that is used when the database is read in)
is permitted to set the @code{fieldnames} slot of the database structure
to a list; other parts of the database initialization code propagate
that information into other slots of the database structure and change
the list into a vector, which is its proper representation.  If you
switch to another display format and back to the primary one, and the
@code{database-set-fieldnames} expression was evaluated, then the next
attempt to access the @code{fieldnames} slot of the database as a vector
would cause an error.  In this case, the proper solution is to use
@code{database-set-fieldnames-to-list} (@pxref{The database structure})
instead, but such functions are not provided for every slot that it
would be dangerous to set.  If several format files all set a value
which is dangerous to change, then another possibility is to check the
value before setting it:  if it is already set, then don't do anything.
Another possibility is to move all assignments to database slot values
from the format file to the auxiliary file.


@node Making additional data display buffers,  , Execution of format file eval expressions, Specifying the display format
@section Making additional data display buffers
@cindex additional data display buffers, making
@cindex data display buffers, making additional
@cindex two records, manipulating simultaneously
@cindex simultaneously manipulating two records
@cindex two formats, using simultaneously
@cindex simultaneously using two formats

In addition to changing the display format of an existing data display
buffer, it is sometimes useful to have two different data display
buffers both examining the same database, either so that two different
records can be viewed or edited simultaneously or so that two different
formats can be used at the same time---or both.

Use the following function to create a second (or additional) data
display buffer for the current database.

@table @kbd
@item M-x db-additional-data-display-buffer
@findex db-additional-data-display-buffer
Create another data display buffer in which to view this database.
@end table

If you edit the same record in more than one data display buffer, only
the last one committed (by calling @code{db-commit-record}, moving to
another record, saving the database, etc.)@: has an effect.
(Simply switching from Database Edit mode to Database View mode does
@emph{not} commit the changes; failing to commit changes makes it
appear that changes in one data display buffer are not being
communicated to the other ones associated with the same database.  For
more on committing, see @ref{Making changes permanent}.)  It is
perfectly safe, however, to edit different records of the same database
in different data display buffers, or to perform any other database
manipulations.

To learn about formatting directives and specification of display format
files, see @ref{How information is displayed}.


@node Designing a database, Record field types, Specifying the display format, Top
@chapter Designing a database
@cindex designing a database

To set up a database for editing, the @dfn{database designer} must
specify pertinent information about the database, including
@itemize @bullet
@item
 the number of fields per record and the type of each one (@pxref{Record field
types});
@item
 the layout of the file containing the database (@pxref{Database file
layout});
@item
 how each record should be displayed on the screen when it is being
viewed or edited (@pxref{How information is displayed}); and
@item
 special actions to be performed, such as updating the @samp{last-edit-date}
field of a record whenever any other field is modified
(@pxref{Customization}).
@end itemize
Detailed information about the database's internal representation is
supplied in @ref{Database representation}.

@menu
* Creating a new database::     Creating a new database
* Manipulating database fields::  Manipulating database fields
@end menu

@node Creating a new database, Manipulating database fields, Designing a database, Designing a database
@section Creating a new database
@cindex creating a database
@cindex making a database

This section tells you how to quickly create a trivial database; please
don't be satisfied with this, but follow the references to learn how to
access EDB's more sophisticated features.  Another good way to learn
about EDB is to look at the example databases provided with EDB
(@pxref{Installation,,,edb-inst.info,EDB Installation Manual}).

First, you must decide how many fields the database shall contain, and
what their names are.  The names are Lisp symbols, and they are
primarily used internally---most users never know how EDB refers to the
fields.  Let us make a name database with three string fields called
@samp{first}, @samp{middle}, and @samp{last} and one integer field
called @samp{age}.

As mentioned in @ref{Invoking EDB}, you need three files to run EDB:  a
data file, a format file, and an auxiliary file.  The auxiliary file is
optional; its functionality can be placed in the format file.

@cindex Truman, Harry S
The data file may have any one of a number of layouts.  Perhaps the
simplest is tab-delimited text, which is also the default:  fields are
separated by tab characters and records are separated by newlines.  EDB
doesn't deal well with empty databases (because it always tries to
display a record in the data display buffer), so create a file with at
least one record.  For instance, we could create a file @file{names.dat}
containing
@example
Harry   S       Truman  88
@end example
@noindent
where a single tab character separates the words.  It doesn't matter
whether the file contains a final newline.  You don't have to type this
in, because files @file{names.dat} and @file{names.fmt} are provided in
the EDB examples distribution (@pxref{Installation,,,edb-inst.info,EDB
Installation Manual}).

The easiest way to create a database file laid out in EDB's internal
representation, which permits faster reading and writing of the data
file, is the following.  Create a database in some simpler format (such
as tab-delimited text), read it in the usual way, set database slot
@code{internal-file-layout-p} to @code{t} (for instance, via @kbd{C-u
M-x db-toggle-internal-file-layout @key{RET}}), and finally write the
database to disk via @kbd{C-x C-w}.  It will be saved in EDB's internal
file layout; for details, @pxref{Internal file layout}.  For more
information about different data file layouts, @pxref{Database file
layout}.

The format file specifies how a record is displayed on the screen; a
backslash followed by a field name indicates that the field's contents
should be inserted there.  For instance, here is a format for our names
database:
@example
Family: \last
Given:  \first
Middle: \middle

Age:    \age
@end example
@noindent
For more information about specifying display formats, @pxref{How
information is displayed}.

@findex database-set-fieldnames-to-list
The auxiliary file is used to customize EDB for a particular database;
the only information that it absolutely must contain is the names (and
possibly types) of the database fields.  They are set by function
@code{database-set-fieldnames-to-list} (@pxref{The database structure});
by providing additional information to this call, you can specify types
other than string (which is the default) for your record fields.  Any
auxiliary file customization may instead appear in the ``Local
variables'' section of the format file (@pxref{Reading from disk}).  So
our format file @file{names.fmt} would look like this:
@example
Family: \last
Given:  \first
Middle: \middle

Age:    \age

Local Variables:
eval: (database-set-fieldnames-to-list database 
                                       '(first middle last (age . integer)))
End:
@end example
@noindent
For more information about customizing EDB for your application,
@pxref{Customization}.

Now that we have the two files @file{names.dat} and @file{names.fmt}, we
are ready to invoke the database.  Simply type @kbd{M-x db-find-file
@key{RET} names.dat @key{RET}}; @file{names.fmt} will be automatically
used as the format file, and you can begin editing the database and
adding new records.


@node Manipulating database fields,  , Creating a new database, Designing a database
@section Manipulating database fields
@cindex adding fields 
@cindex fields, adding
@cindex deleting fields
@cindex fields, deleting
@cindex reordering fields
@cindex fields, reordering
@cindex rearranging fields
@cindex fields, rearranging

A future version of EDB may have a graphical method to manipulate
databases by adding, removing, and rearranging fields, among other other
manipulations; a rudimentary version of this functionality exists in the
@file{db-convert.el} file but lacks a good user interface or
documentation.  Here is a way to perform those actions by directly
manipulating the database file.

Make sure the database is stored in a delimited layout (the rest of this
section assumes that the standard tab-separated text layout is used;
@pxref{Delimited file layout}).  If the database file is in EDB's internal
file layout, convert it to a delimited layout by reading in the database,
setting database slot @code{internal-file-layout-p} to @code{nil} (for
instance, via @kbd{C-u 0 M-x db-toggle-internal-file-layout @key{RET}}),
and saving the database (@pxref{Internal file layout}).  (If the
database's @code{wrfr} slot is set, the result will not necessarily be
delimited layout, but whatever that function specifies.)

In the tab-separated database format, you can add new fields by adding
new tabs in the right places in each record; simply edit the database
file to add the next fields as desired.  Similarly, you can delete or
rearrange fields.  You may wish to use keyboard macros, or write an
Emacs Lisp function, to help you with this chore.

When you perform this edit, be sure that auto-fill-mode is turned off,
lest spurious newlines be added to the file.

You will also need to modify any parts of your database that depend on
the number or order of fields; for instance, a call to
@code{database-set-fieldnames-to-list} will need to be changed, and the
format file(s) should be edited if you wish to be able to
view or edit the contents of the new fields.


@node Record field types, Database file layout, Designing a database, Top
@chapter Record field types
@cindex record field type
@cindex field type, record
@cindex type, record field

All the records of a database contain fields of the same types:  the
fifth field might always contain an invoice number, for instance, but
the invoice number would vary from record to record.  This chapter
describes how to specify and use different record field types.

The most important information about a record field is
@itemize @bullet
@item
 display representation onscreen and in reports
@item
 EDB's internal representation
@item
 storage representation in data files
@item
 how to convert among these representations
@item
 how to sort items of that type
@end itemize

@cindex record field type, compared to displaytype
@cindex displaytype, compared to record field type

This information is separated into a display specification and a record
field specification.  The display specification determines how a field's
contents are displayed and parsed onscreen (say, in a data display
buffer).  The record field specification controls everything else about
the record field; its information does not depend on the onscreen (or
in-report) visual appearance of the field.  The database designer
specifies a displaytype for each display specification in the format
file (that is, for each location in the data display buffer that will
contain a representation of some record field).  The database designer
specifies a record field type for each field in a database record,
whether or not the field is ever displayed.  (A particular field's
contents may appear zero, one, or more times in a data display buffer;
one displayspec structure is created for each occurrence.)

Displaytypes and record field types are distinct; they supply
complementary information.  There is not even a one-to-one relation
between them.  A particular record field type may be displayed in any of
a number of ways by using different displaytypes---dates are such an
example.  On the other hand, record field types which are interpreted,
sorted, and stored on disk differently, but which have the same internal
representation---say, as a string---could all be displayed and edited
using the same displaytype.

This chapter discusses record field types, record field specifications,
and the recordfieldspec structure, the internal structure which holds
the information specified by the former two items.  For more information
about displaytypes, display specifications, and the displayspec
structure, @pxref{How information is displayed}.

@menu
* Specifying a record field type::  Specifying a record field type
* Predefined record field types::  Predefined record field types
* The recordfieldspec structure::  The recordfieldspec structure
@end menu


@node Specifying a record field type, Predefined record field types, Record field types, Record field types
@section Specifying a record field type
@cindex specifying a record field type
@cindex record field type, specifying
@cindex type, specifying record field

@findex database-set-fieldnames-to-list
The function @code{database-set-fieldnames-to-list} (@pxref{The database
structure}) specifies the types (and names) of record fields.

A record field type gives information about one field of the database's
records:  the type of the contents, what sorting function to use, how to
write it to disk and read it back, constraints on its value, etc.  The
database designer must provide one for each record field.  Usually
one of the predefined types (@pxref{Predefined record field types})
suffices.  The remainder of this section describes how to define a new
record field type, when that is necessary.

@findex define-recordfieldtype-from-recordfieldspec
@findex recordfieldtype->recordfieldspec
The first step in creating a new record field type is to make a
recordfieldspec structure (when a predefined record field type is used,
EDB looks up a built-in recordfieldspec).  A recordfieldspec can be
created from scratch by calling @code{make-recordfieldspec}, but it is
often easier to modify a copy of an existing one.
(For a list of built-in record field types, @pxref{Predefined record field
types}.)

@table @kbd
@item recordfieldtype->recordfieldspec
@findex recordfieldtype->recordfieldspec
Return the recordfieldspec associated with symbol @var{recordfieldtype}.

@item copy-recordfieldspec
@findex copy-recordfieldspec
Not documented.
@end table

Next, set the recordfieldspec's slots to appropriate values by using
@code{recordfieldspec-set-@var{slotname}}; for a list of the slots,
@pxref{The recordfieldspec structure}.  Finally, install the record
field type by calling 
@code{define-recordfieldtype-from-recordfieldspec}:

@table @kbd
@item define-recordfieldtype-from-recordfieldspec
@findex define-recordfieldtype-from-recordfieldspec
Define a recordfieldtype named @var{typename} (a symbol) with the default @var{recordfieldspec}.
DISPLAYSPEC may also be a typename symbol itself.
@findex recordfieldtype->recordfieldspec
After this call, @code{recordfieldtype->recordfieldspec} called with argument
@var{typename} returns the proper record field specification.
@end table

Examples of record field type creation can be found in the file
@file{db-types.el}, which contains a number of record field type (and
displaytype) definitions that can be studied or copied.

Record field types should not be confused with display types; a display
type is used to specify how a particular value is shown on the screen,
but a record field type constrains the information actually contained in
the record field.


@node Predefined record field types, The recordfieldspec structure, Specifying a record field type, Record field types
@section Predefined record field types
@cindex recordfieldspecs, predefined
@cindex predefined recordfieldspecs

The following record field types are predefined by EDB; their
definitions can be found in the file @file{db-types.el}.  The
recordfieldspec structure contains a record field type's information;
see @ref{The recordfieldspec structure}.  You can define record field
types in the same way as @file{db-types.el} does; these record field
types are not privileged in any way and are provided only for
convenience.  For more information about recordfieldspec creation, see
@ref{Specifying a record field type}.

@table @asis
@item integer
@cindex integer recordfieldspec
Ordinary integers.

@item integer-or-nil
@cindex integer-or-nil recordfieldspec
Integers or @code{nil}, the empty value; by default, @code{nil} is
treated as larger than any integer, so it comes last in an
increasing-order sort.

@item number
@cindex number recordfieldspec
@cindex floating-point number recordfieldspec
Ordinary numbers.  A number is either an integer or a floating-point number.

@item number-or-nil
@cindex number-or-nil recordfieldspec
Numbers or @code{nil}, the empty value; by default, @code{nil} is
treated as larger than any number, so it comes last in an
increasing-order sort.

@item boolean
@cindex boolean recordfieldspec
This displayspec corresponds to the yes-no displaytype.  For the
purposes of sorting, @code{t} is considered less than @code{nil}, so it
appears first in an increasing-order sort.

@item string
@cindex string recordfieldspec
Ordinary strings.

@item one-line-string
@cindex one-line-string recordfieldspec
Strings which may not contain newlines.

@item string-or-nil
@cindex string-or-nil recordfieldspec
Either a string or the value @code{nil}, which is converted to the empty
string.  Sorting treats @code{nil} identically to the empty string.

@item nil-or-string
@cindex nil-or-string recordfieldspec
Identical to the string-or-nil recordfieldspec (except for the name).
This exists so that display fields of type nil-or-string can 
conveniently default to this recordfieldspec.

@item one-line-string-or-nil
@cindex one-line-string-or-nil recordfieldspec
The obvious combination of the one-line-string and string-or-nil
recordfieldspecs.

@item date
@cindex date recordfieldspec
@findex storage-string->date
@findex date->storage-string
@findex format-date-full
@findex parse-date-string
@findex date->storage-string-mmddyyyy
@findex storage-string-mmddyyyy->date
@findex date->storage-string-lisp
@findex storage-string-lisp->date
A date which specifies zero or more of the year, month, and day.  By
default the date is sorted by year, then month, then day; an unspecified
component is larger than any specified component (``March 14, 1967'' would
appear before ``January 1'' if dates were sorted in increasing order).
Dates are read from database files using the function value of
@code{storage-string->date}, which is set by default to
@code{date-stored->actual}, which can parse nearly any string
representation of a date and returns a date if it is passed one.  Dates
are written using the function value of @code{storage-string->date},
which defaults to @code{format-date-full}, which produces a string of
the form ``March 14, 1967''.  If the speed of reading and writing database
files is very important to you, consider using @code{fset} to set
@code{date->storage-string} and @code{storage-string->date} to more
efficient functions, such as @code{date->storage-string-mmddyyyy} and
@code{storage-string-mmddyyyy->date}, or
@code{date->storage-string-lisp} and @code{storage-string-lisp->date}.

@item date-or-nil
@cindex date-or-nil recordfieldspec
A date, or nil.

@item date-efficient-storage
@cindex date-efficient-storage recordfieldspec
@findex storage-string->date
@findex simple-format-date
When the dates in a database file are known to have a particular format,
using @code{parse-date-string} is unnecessarily inefficient.  The
date-efficient-storage recordfieldspec specifies that
@code{storage-string->date}, which can efficiently read dates written by
@code{simple-format-date}, be used instead.  The time savings is
noticeable on large databases.

@item time
@cindex time recordfieldspec
A time.
@end table

If you find any of these typenames cumbersome, you can create your own
aliases for them using @code{define-displaytype-from-displayspec},
@code{define-recordfieldtype-from-recordfieldspec}, or
@code{define-type-alias}.

@table @kbd
@item define-type-alias
@findex define-type-alias
Make symbol @var{alias} refer to the same displaytype and recordfieldtype as @var{typename}.
@end table


@node The recordfieldspec structure,  , Predefined record field types, Record field types
@section The recordfieldspec structure
@cindex recordfieldspec structure
@cindex fieldspec, see recordfieldspec

The recordfieldspec structure contains information regarding the
content of a record field, but nothing concerning how it is displayed on
the screen or read from user input.

The slots of a recordfieldspec are listed below; a slot may be accessed by
using the macro @code{recordfieldspec-}@var{slotname} and set using
the macro @code{recordfieldspec-set-}@var{slotname}, whose second
argument is the value to be stored in the slot.

Most of the slots may be left @code{nil}, and reasonable default actions
will occur.

@table @code
@item type
@cindex @code{type} recordfieldspec slot
A symbol such as @code{string} or @code{integer}, the type of the data
described by this recordfieldspec.

@cindex displaytype, not set by display specification
When no displaytype is explicitly specified in a display specification,
then a displaytype with the same name as @code{type} slot is used by
default; this is the only use for this slot.

@item default-value
@cindex @code{default-value} recordfieldspec slot
The default value for fields described by this recordfieldspec; used
when creating new records.

@item common-form-function
@cindex @code{common-form-function} recordfieldspec slot
A function which, called on the contents of a record field, returns them
in canonical form.  This can be used for determining non-trivial
equality, when two nonidentical values should be considered equivalent.

@item merge-function
@cindex @code{merge-function} recordfieldspec slot
A function which, called on the contents of two record fields, returns a
combination of the two.  Often it queries the user for help.

@need 400
@item order-function
@itemx sort-function
@cindex @code{order-function} recordfieldspec slot
@cindex @code{sort-function} recordfieldspec slot
@vindex dbf-field-priorities
@findex database-sort
The record field's ordering and sorting functions (@pxref{Sorting
functions}).  Both ordering and sorting are possible if either slot is
filled.

If both slots are empty, then a dummy ordering or sorting function is
used, so sorting on this field has no effect.  Since the function is
called and its result examined, this is more expensive than not sorting
on the field in the first place.  If it does not make sense to sort on a
particular field, then it is best to keep that field out of the field
priorities used for sorting (which is the @code{field-priorities}
database slot, or is interactively specified through the database sort
interface (@pxref{Sorting}), or is specified as an argument to
@code{database-sort}).

Actually, the recordfieldspec structure has no order-function or
sort-function slots; they are fictions built upon the (real) order-fn
and sort-fn slots.  The user should not attempt to use those slots
directly, but should always use the order-function and sort-function
pseudo-slots.

@item match-function
@cindex @code{match-function} recordfieldspec slot
A function which takes a pattern and a field value and returns
non-@code{nil} if they match.  The function should also be able to take
as its first argument a field value rather than a pattern.

@item help-info
@cindex @code{help-info} recordfieldspec slot
@findex db-field-help
A string which is displayed by @code{db-field-help} when there is no
field-specific help available.  Field-specific help is usually
preferable to this help, which only describes the type of the field's
contents.

@item actual->stored
@cindex @code{actual->stored} recordfieldspec slot
A function which converts a field value into its on-disk representation
(a string).

@item stored->actual
@cindex @code{stored->actual} recordfieldspec slot
A function which recovers a field value from its on-disk representation
(a string).  If this function returns a string, it should return
something reasonable if supplied the empty string as its argument.
(That can happen when an empty database is read.)

@item change-hook
@cindex @code{change-hook} recordfieldspec slot
A function called when the value of this field is changed.
This is not currently implemented.  For more change hooks,
@pxref{Display format change hooks}, and @pxref{Recordfieldspec change
hooks}.

@item constraint-function
@cindex @code{constraint-function} recordfieldspec slot
@cindex enforcing constraints
A function which the value of this field must satisfy; that is, the
function must return non-@code{nil} on it.  The function may reject the
value either by returning @code{nil} or by signalling an error; the
latter permits the function to provide an informative message about
the problem.

Four arguments are supplied to @code{constraint-function}:  the field
value, the record, the record fieldnumber, and the database.  This
permits cross-field and cross-record constraints.  The record argument
may be @code{nil}, in which case the function should return @code{t} if
the value is acceptable for some conceivable record.  This occurs, for
instance, when values are read in a call to
@code{db-field-query-replace}.

The constraint function may interact with the user; for instance, it may
give you the opportunity to override the constraint.

@end table



@node Database file layout, How information is displayed, Record field types, Top
@chapter Database file layout
@cindex file layout for data file
@cindex file format for data file
@cindex database file layout
@cindex data file layout
@cindex file layout
@cindex layout, of data file
@cindex format, of data file
@c @cindex writing to disk
@c @cindex saving to disk

This chapter discusses specifying how a database is read from a file (or
saved back to it).

Broadly stated, there are three possible file representations for a
database:  EDB's internal file layout, a delimited layout, or a nonregular
layout.  EDB's internal file layout is designed for fast reading and
writing, but is not very human-readable.  A delimited layout is one in
which records (and fields within a record) are separated from one
another in a predictable (though not necessarily invariant) way.  A
nonregular layout is any other kind of layout; you may specify arbitrary
Emacs Lisp code to read and write such files.  EDB also supports tagged file
layout (a special case of nonregular file layout).

If the database is to be stored in EDB internal file layout, a lot of
this information is not needed except when the database is first
created.

The sections of this chapter each describe a file layout, except the
last, which describes in detail the process of reading a database from
disk.


@menu
* Internal file layout::        Internal file layout
* Delimited file layout::       Delimited file layout
* Tagged file layout::          Tagged file layout
* Nonregular file layout::      Nonregular file layout
* Reading from disk::           What happens when a database is read in from disk
@end menu


@node Internal file layout, Delimited file layout, Database file layout, Database file layout
@section Internal file layout
@cindex file layout, internal
@cindex data file layout, internal
@cindex internal data file layout

@cindex slow reading of large databases
@cindex reading large database is slow
The first line of a database file in EDB's internal file layout looks
something like
@example
;; Database file written by EDB; format 0.5
@end example
@noindent
followed by two Emacs Lisp forms:  a
record (the database structure) and a list of records (the records of
the database).  Databases stored in this layout can be loaded and saved
very quickly (sometimes orders of magnitude faster than databases which
EDB must parse when reading), and they never suffer from ambiguities
between data and delimiting text, but they are not easy for people to
read and understand.  A human- or program-readable version of the
database can be generated when it is needed, either by creating a report
or by saving in some other file layout.  This is a good option when all
manipulation of a database will be done via EDB.

@cindex EDB internal layout, converting to or from
@cindex converting a file to or from EDB internal layout
Since this file layout is rather complicated, databases are often
created in some other file layout and then converted to this one.  To
convert from another file layout to EDB's internal file layout, read in
the database, set database slot @code{internal-file-layout-p} to
@code{t} (for instance, via @kbd{C-u M-x db-toggle-internal-file-layout
@key{RET}}), and then write or save the database (via @kbd{C-x C-w} or
@kbd{C-x C-s}).  Converting a database from EDB file layout to some
other representation is similar, but slot @code{internal-file-layout-p}
is set to @code{nil} (say, via @kbd{C-u 0 M-x
db-toggle-internal-file-layout @key{RET}}), and certain variables and
database values may need to be set (see the documentation for the layout
you desire, elsewhere in this chapter).  Making a report
(@pxref{Reports}) can also produce a different file layout for a
database, with even more flexibility than the techniques described here.

A database file in EDB internal file layout is basically the printed
representation of the Lisp database structure used by EDB when the
database is read in.  As such, it contains all the information in the
database slots described in @ref{The database structure}, except that
the @code{data-display-buffers} and @code{first-link} slots are set to
@code{nil}; in the file, the records follow the database structure.
After a database has been saved in internal file layout, then any forms
in the auxiliary or format files that set database slots can be removed
if desired; this is not necessary, however.


@node Delimited file layout, Tagged file layout, Internal file layout, Database file layout
@section Delimited file layout
@cindex file layout, delimited
@cindex data file layout, delimited
@cindex delimited file layout

@cindex tab-separated text file layout
EDB can conveniently read and write database files in which records are
separated from one another by a record delimiter and, within each
record, fields are separated by a field delimiter.  When the delimiters
are the newline and tab characters, respectively, the result is the
standard ``tab-separated text'' layout, which is often used for
transferring information from one program to another.

@cindex delimiters, record and field
@cindex record delimiters
@cindex field delimiters
The record and field delimiters need not be single characters; they can
be arbitrary strings or even regular expressions.  The latter is useful if the exact
delimiter is not known ahead of time (for example, if records may be
separated by one or more carriage returns).  This regular expression
mechanism can only be used when reading the database:  when writing a
database, all the record delimiters are identical, and so are all field
delimiters.  (Exception:  you may specify an arbitrary record-writing
function (@pxref{Nonregular file layout}) and arbitrary functions for
either reading records or for separating records or fields in delimited
layout, but should use the simpler reading mechanisms whenever possible,
for your own sake.)

Delimited file layout has two disadvantages.  First, it is somewhat slower
to read and write than EDB's internal representation.  Second, the
strings used as delimiters may not appear in the database fields, lest
those occurrences be misinterpreted as delimiters rather than as data.
For solutions to the latter problem, @xref{Resolving ambiguities}.

@menu
* How to specify delimited file layouts::  How to specify delimited file layouts
* Resolving ambiguities::       Resolving ambiguities
* Problems with end-of-file newlines::  Problems with end-of-file newlines
@end menu


@node How to specify delimited file layouts, Resolving ambiguities, Delimited file layout, Delimited file layout
@subsection How to specify delimited file layouts
@cindex separator, setting record
@cindex separator, setting field
@cindex record separator, setting
@cindex field separator, setting

In a database stored in delimited file layout, records and fields can be
separated by particular strings, by regular expressions, by
context-sensitive regular expressions, or by arbitrary functions.  The
sepinfo structure holds this information for use when reading the
database from disk (and writing it back).  The sepinfos used when
reading a database are stored in its @code{record-sepinfo} and
@code{field-sepinfo} slots (for more details about the database
structure, @pxref{The database structure}).

When reading, if a separation function is specified, it is used;
otherwise, if a regular expression is specified, it is used; otherwise,
a string must be specified.  It is converted into a regular expression,
the regular expression slots of the sepinfo are filled in, and reading
proceeds as if you had specified a regular expression.  (To have a
regular expression recomputed when it is next needed, set it to
@code{nil} when setting the corresponding string value.)

When a sepinfo is used for writing, it must specify literal string
separators.  (The sepinfo may have its separation function or regular
expressions set as well, for reading, but those slots are ignored when
writing.)

@menu
* The sepinfo structure::       The sepinfo structure
* Sepinfo examples::            Record and field separator examples
@end menu


@node The sepinfo structure, Sepinfo examples, How to specify delimited file layouts, How to specify delimited file layouts
@subsubsection The sepinfo structure
@cindex sepinfo structure

The sepinfo structure contains the information required to decide where
records or fields start and end (actually, to determine where the record
or field separators start and end; ``sepinfo'' is short for ``separator
information'').  The slots of this structure may be accessed by using
the macro @code{sepinfo-}@var{slotname}.  The slots may be set using the
macro @code{sepinfo-set-}@var{slotname}, whose second argument is the
value to be stored in the slot.

@cindex beginning of file, text at
The @code{pre-first-} slots describe text that precedes the first item
of interest.  In a record sepinfo they describe the file header, which
precedes the first record.  In a field sepinfo they describe any
information that preceded the first field of every record, after the
record separator.

@cindex end of file, text at
The @code{post-last-} slots are similar, but are used to inform EDB of
text following the last information-carrying text.  In a record sepinfo,
they describe the file trailer, which follows the last record in the
file.  A field sepinfo's @code{post-last-} slots tell about information
following the last field of a record but preceding the record separator.

The @code{-submatch} integers describe which submatch of a regexp match
is the actual separator, as opposed to surrounding text used to help
make the match unambiguous.  This specification of the submatch permits
context-sensitive matching that you might otherwise expect could not be
done with regular expressions alone.  For instance, suppose a database
has records with a variable number of fields separated by newlines, that
records are also separated by newlines, and that the first field of each
record has some special form different from all other fields (say, it is
a number with a decimal part).  The following code would permit
separation of the records without writing a special function to do so
and without including the decimal number in the separating text:

@example
(sepinfo-set-sep-regexp (database-record-sepinfo database)
                        "\\(\n\\)[0-9]+\\.[0-9]+")
(sepinfo-set-sep-regexp-submatch (database-record-sepinfo database) 1)
@end example

When you set the slots of the sepinfo, be careful to use a correct
value.  For instance, if your record separator is a form feed on a line
by itself, you probably want to set the @code{sep-string} slot of the
database's @code{record-sepinfo} to @samp{"\f\n"}, or possibly
@samp{"\n\f\n"}, rather than just @samp{"\f"}, lest the newlines be
considered to be part of the records rather than part of the separator.

The slots of the sepinfo are listed below but are not described in
detail; see the preceding description for details of their use.

@table @code
@item pre-first-string
@cindex @code{pre-first-string} sepinfo slot
Setting the slot to @code{nil} (or not setting it) is equivalent to
setting it to the empty string.

@item pre-first-regexp
@cindex @code{pre-first-regexp} sepinfo slot

@item pre-first-regexp-submatch
@cindex @code{pre-first-regexp-submatch} sepinfo slot

@item sep-string
@cindex @code{sep-string} sepinfo slot

@item sep-regexp
@cindex @code{sep-regexp} sepinfo slot

@item sep-regexp-submatch
@cindex @code{sep-regexp-submatch} sepinfo slot

@item sep-function
@cindex @code{sep-function} sepinfo slot
A function that takes a buffer position, the end of the previous
separator (that is, the start of the current record or field), as its
argument and returns a pair of two buffer positions bracketing the next
separator.  That is, the returned values are the end of the current
record or field and the beginning of the next one (or nil if there are
no more).  When the function is called, point is at the beginning of an
item and the buffer is narrowed to the list being currently processed.

The use of a separation function is useful when the separation criteria
cannot be expressed as a combination of context-sensitive regular
expressions.  The @code{pre-first-} and @code{post-last-} slots are
still used even if a function is specified.

@item post-last-string
@cindex @code{post-last-string} sepinfo slot
Setting the slot to @code{nil} (or not setting it) is equivalent to
setting it to the empty string.

@item post-last-regexp
@cindex @code{post-last-regexp} sepinfo slot

@item post-last-regexp-submatch
@cindex @code{post-last-regexp-submatch} sepinfo slot

@end table


@node Sepinfo examples,  , The sepinfo structure, How to specify delimited file layouts
@subsubsection Record and field separator examples
@cindex sepinfo examples

[[[Put examples here.]]]

[[[
For instance, to parse "[Mary, John,Jack, and Jill]" and to write it
back out as "[Mary, John, Jack, Jill]", the following specification
would suffice:
  pre-first-string "["
  sep-string ", "
  sep-regexp ", +\\(and +\\)?"
  sep-regexp-submatch 0
  post-last-string "]"
]]]

[[[
The -string slots are used for writing; but what if you only have a regexp
for the leading or trailing junk, but you want that restored exactly?
You can set pre-first-string *after* the database file has been found.
For instance, in db-before-read-hooks, use a function such as

@c Note that the @ must be doubled for inclusion in @example!
@c I can't get the @ to work at all, even doubled.
@example
(defun btxdb:read-comments ()
  (save-excursion
    (set-buffer db-buffer)
    (goto-char (point-min))
    (if (search-forward "@@" nil t)
        (sepinfo-set-pre-first-string
         (database-record-sepinfo database)
         (buffer-substring (point-min) (point))))))
@end example
@noindent
or even put
@example
(sepinfo-set-post-last-string
 (database-record-sepinfo database)
 (save-excursion
   (set-buffer db-buffer)
   (goto-char (point-min))
   (re-search-forward "\n\C-l\n")
   (buffer-substring (match-beginning 0) (point-max))))
@end example
@noindent
as is in your auxiliary file.
]]]

[[[ If all records have the same number of lines on disk, use the
following function to return an appropriate sep-function.  This is
useful when, for instance, both the field separator and the record
separator are the newline character.

@table @kbd
@item make-n-line-sep-function
@findex make-n-line-sep-function
Return a sep-function useful when all records have exactly @var{n} lines on disk.
@end table
]]]


@node Resolving ambiguities, Problems with end-of-file newlines, How to specify delimited file layouts, Delimited file layout
@subsection Resolving ambiguities
@cindex resolving ambiguities in database files
@cindex ambiguities in database files, resolving

Substitution is a mechanism for dealing with the problem of
distinguishing field and record separators from the contents of database
records.  For instance, if the newline character (actually, a string
consisting of only the newline character) is used as a record separator,
and records may contain multiline text fields (or other fields whose
storage representation contains a newline), then how would EDB know,
when reading the database back in, which newlines are record separators
and which are part of fields?

There are several ways to avoid this ambiguity.
@itemize @bullet
@item
 Disallow the use in record fields of the character or string causing
the ambiguity.  For instance, in the example above, you might change the
record field type of all of the string fields to one-line-string.

@item
 Change the separator(s) to strings that do not appear in the storage
representation of any field.  For instance, Unix password files are
stored in delimited file layout with a colon as the field delimiter (and
colons are prohibited from appearing in the field text).
@example
(sepinfo-set-sep-string (database-field-sepinfo database) ":")
@end example
@noindent
Strings containing non-printing characters are another good bet, but
this method relies on luck and the hope that the chosen separators
will never appear in data.

@item
 Change the representation of the ambiguous string, when it appears in
data; this guarantees that whenever the string does appear in a database
file, it stands for a separator.  This scheme is called substitution,
because another string is substituted for the ambiguous one when it
appears in data.  This is similar to the previous workaround, which
changed the separators rather than the data-bearing instances of the
string.  Ambiguities are still possible, if the substituted text happens
to appear elsewhere in data.  Specifying a substitution is described
below.

@item
 The simplest solution is to use EDB's internal file layout
(@pxref{Internal file layout}).  Ambiguities can only occur when the
field data and the separators are both text to be interpreted by EDB@.
EDB's internal file layout uses Emacs Lisp's mechanisms (a built-in form
of quoting) to ensure that what is read in is identical to what was
written out.  The database designer need not worry further about the
problem.

@end itemize

@cindex substitution, in reading a database file
Substitution is the replacement of potentially ambiguous strings by
other ones.  For instance, when writing tab-separated text, each
occurrence of the newline character in a field could be replaced by
control-k when the database is written.  Then, when the file is read in,
every newline can be safely assumed to be a record separator.  The final
step is converting the control-k characters back into newlines.  This
approach is taken by some marketed databases; for instance, I believe
that FileMaker does just this.  The problem with this approach is that
if there were any control-k characters in the text, then when the
database is read back in, they will be (incorrectly) converted to
newlines.  EDB warns when the database is being written out if this
problem could occur; you may choose a different substitution or abort
the database write operation.  It is usually possible to find a
substitution---a character or sequence of characters that doesn't appear
in the data.

@c [[[Should give more detail here.]]]

The database's substitutions slot is an association list of data strings
and their file representations.  To make control-k in
the database file stand for newline in the data, put
@example
  eval: (database-set-substitutions database '(("\n" . "\C-k")))
@end example
in the "Local Variables" section of your format file, or put the form
without @samp{eval:} in the auxiliary file.


@node Problems with end-of-file newlines,  , Resolving ambiguities, Delimited file layout
@subsection Problems with end-of-file newlines
@cindex newline, at end of database file

@c I don't need the following, because I have special-cased that common
@c situation.  [[[Perhaps I should mention it explicitly.]]]

@c Here is a subtle problem which can come up if you use @samp{"\n\n"} as a
@c record separator and exactly one newline appears at end of your database
@c file.  For convenience, EDB adds a record separator at the end of its
@c working copy of the file, if there's not one already there.  In this
@c example, two newlines are added, but then the file  still does not
@c end in a record separator, since after finding the first pair of
@c newlines after the last record, EDB is not yet at the end of the file
@c because there is still another character (namely, \n) there.
@c 
@c The moral is that if there are any extra characters after the last
@c record, even a newline, they should be specified.  Either of the
@c following forms does the trick:
@c @lisp
@c (sepinfo-set-post-last-string (database-record-sepinfo database) "\n")
@c 
@c (sepinfo-set-post-last-regexp (database-record-sepinfo database) "\n\\'")
@c (sepinfo-set-post-last-regexp-submatch (database-record-sepinfo database) 0)
@c @end lisp
@c @noindent
@c The @samp{\\'} is not strictly necessary in this example.

Suppose you want to get rid of every newline at the end of the database
file, but you don't know how many there are.
@lisp
(sepinfo-set-post-last-regexp (database-record-sepinfo database) "\n*\\'")
(sepinfo-set-post-last-regexp-submatch (database-record-sepinfo database) 0)
@end lisp
does not work, because the post-last-record regexp is searched for
backward from the end of the buffer, and (because of the way that
@code{regexp-search-backward} is implemented) the backwards regexp match
for @samp{\n*} is always the empty string!  The proper way to write this
is
@lisp
(sepinfo-set-post-last-regexp (database-record-sepinfo database)
			      "[^\n]\\(\n*\\'\\)")
(sepinfo-set-post-last-regexp-submatch (database-record-sepinfo database) 1)
@end lisp


@node Tagged file layout, Nonregular file layout, Delimited file layout, Database file layout
@section Tagged file layout
@cindex file layout, tagged
@cindex data file layout, tagged
@cindex tagged file layout

Another popular file layout supported by EDB is that of field values
preceded by the fieldname.  For instance, a record might be represented
in the file by
@example
Where:Here
When:  Now
What: This!
@end example
@noindent
which indicates a record in which the `where', `when', and `here' fields
have the specified values.

Tagged files are a special case of files in nonregular layout; support
for them is implemented through the mechanisms described in
@ref{Nonregular file layout}.

To read a database file in tagged format, call the function
@code{db-tagged-setup} in the database's format or auxiliary file.  Its
argument specifies the names of the fields and the tags that precede
them in the database file.

@table @kbd
@item db-tagged-setup
@findex db-tagged-setup
Ready the database to read files in tagged format.
Creates database local variables and sets database slots.
Argument @var{tagged-field-specs} is a list of tagged-field specifications, one
for each field in a database record.  Each tagged-field specification is a
three-element list of the field name (a symbol), the tag used to identify
it in the file (a string), and a brief help string.
Instead of a symbol, the tagged-field name may be a cons of the
field name and its type.
To indicate that a field is never found in the input file (typically
because it is computed on the fly), use @code{nil} for its tag.

This function should be called first in an auxiliary or format file, so
that the defaults it chooses can be overridden.
@findex database-set-fieldnames-to-list
@code{database-set-fieldnames-to-list} should not be called if this function is.
@end table

Calling @code{db-tagged-setup} sets the database's field names and
installs appropriate functions for reading and writing the database.  It
also creates some database-local variables (@pxref{Local variables})
which can be modified (by use of the @code{database-set-local} function)
in order to customize the behavior of the parsing and output functions
with respect to what characters can appear in a tag, what the separator
between tag and value looks like, and how continuation lines are
handled.  By default, records are separated by blank lines, tags are
separated from field values by @samp{:}, white space around the
separator is not significant on input, the separator is followed by one
tab on output, and continuation lines start with whitespace.

@table @kbd
@item db-tagged-tag-chars
@vindex db-tagged-tag-chars
The characters that are allowed in field tags, in a form suitable for
placing inside [] in a regular expression.

@item db-tagged-separator
@vindex db-tagged-separator
The string that separates field names from values.
@vindex db-tagged-separator-regexp
@vindex db-tagged-separator-output
Used only if @code{db-tagged-separator-regexp} or @code{db-tagged-separator-output} is
@code{nil} (depending on whether the record is being read or written).

@item db-tagged-separator-regexp
@vindex db-tagged-separator-regexp
A regexp for the separator between field names and values when parsing.

@item db-tagged-separator-output
@vindex db-tagged-separator-output
The separator between field names and values on output.

@item db-tagged-continuation
@vindex db-tagged-continuation
The string that marks (the beginning of) a continuation line.
@vindex db-tagged-continuation-regexp
@vindex db-tagged-continuation-output
Used only if @code{db-tagged-continuation-regexp} or @code{db-tagged-continuation-output}
is @code{nil} (depending on whether the record is being read or written).

@item db-tagged-continuation-regexp
@vindex db-tagged-continuation-regexp
A regexp for a continuation line in a value when parsing.

@item db-tagged-continuation-output
@vindex db-tagged-continuation-output
The fixed string to use (before) continuing values on output.
@end table

Other hooks permit arbitrary manipulations of records;
for instance, if a database nearly conforms to the tagged file model,
these can be used to customize the behavior of the existing tagged code.
One way to do this is to have a function in
@code{db-tagged-rrfr-hooks} remove the field from the file
representation before the record is parsed, then have
@code{db-tagged-wrfr-after-hooks} modify the automatically generated
tagged file representation for that field.  These functions can also be
used for simpler tasks, of course.

@table @kbd
@item db-tagged-rrfr-hooks
@vindex db-tagged-rrfr-hooks
Hooks run on each database record before tagged parse.

@item db-tagged-wrfr-before-hooks
@vindex db-tagged-wrfr-before-hooks
Hooks run before each tagged write of a database record.
The record is bound to the dynamic variable  record, and point is where the
record will be inserted in the buffer.

@item db-tagged-wrfr-after-hooks
@vindex db-tagged-wrfr-after-hooks
Hooks run after each tagged write of a database record.
The record is bound to the dynamic variable  record, and point is immediately
after the file representation of the record.
@end table


@node Nonregular file layout, Reading from disk, Tagged file layout, Database file layout
@section Nonregular file layout
@cindex file layout, nonregular
@cindex data file layout, nonregular
@cindex nonregular file layout

Unlike most databases, EDB can work with data stored in any file layout
whatever---so long as you specify how the information is to be
extracted.  If the file layout is too complicated to be described by
regular expressions describing the record and field separators and their
context (@pxref{Delimited file layout}), then you may write Emacs Lisp
code which extracts the information from the database file.

The great advantage of this mechanism is that it permits you to maintain
your current files, in exactly their current file layouts, and to keep
the same tools and habits you've accumulated, but also to manipulate
them in a structured way with EDB@.  For instance, you might wish to
maintain the database file in a file format easy for people to read all
the time, rather than having to create a report for that purpose.

Three pieces of information must be provided:  how to find the extent of
a file record, how to read a file record, and how to write a file
record.  The third may be omitted if the database is only being read in
the custom file layout (and will be saved in some more tractable file
format).  If the second is provided (that is, the
@code{read-record-from-region} database slot is set), then the file will
be assumed to be in a nonregular file layout and the value of that slot
is used to read the database, no matter what other information is
provided.

Information about how to separate one record from another within the
file is found in the @code{record-sepinfo} slot of the database, as
usual.  In many cases, even if the file layout of the data is
nonregular, it is easiest to describe the record separator with a
string or a regexp.  For more details, see @ref{Delimited file layout}.
You may also set the sepinfo's @code{sep-function} slot to a function.
The function should take one argument, the end of the previous record
(@code{nil} the first time it's called), and return a pair whose car is
the end of the current record and whose cdr is the start of the next
record (@code{nil} if there is no next record in the file).

The @code{read-record-from-region} slot of the database contains a
function of no arguments which, when called with the current buffer
narrowed to a single file record (that is, narrowed to the
representation of a single database record), returns a record in the
database's internal file layout.  The variable @code{database} is
dynamically bound to the current database, and so the right way to
create the record to be returned is via @code{(make-record database)}.
Its fields can then be set with @code{record-set-field}.
@findex make-record
@findex record-set-field
@cindex @code{read-record-from-region} database slot

The @code{write-region-from-record} slot of the database optionally
contains a function which takes a database record as its argument and
inserts the file representation of that record in the current buffer;
the variable @code{database} is dynamically bound to the current
database.  If this slot is not specified (and slot
@code{internal-file-layout-p} is @code{nil}), then the fieldsep and
recordsep information, if present, is used to write the record
(@pxref{Delimited file layout}).  This permits the use of a simple,
delimited output file layout with a more flexible input file layout.
@cindex @code{internal-file-layout-p} database slot
@cindex @code{write-region-from-record} database slot

Tagged format is a special case of nonregular file layout for which EDB
provides support; see the implementation of support for tagged database
files in @file{db-tagged.el} and @ref{Tagged file layout}.  Another
example is given below.


@menu
* Nonregular database example::  Example of database in nonregular file layout
@end menu


@node Nonregular database example,  , Nonregular file layout, Nonregular file layout
@subsection Example of database in nonregular file layout

Here is a simple example of a database in a nonregular file layout; this
does not mean that the file representation of each record is vastly
different from the others (it may be, but is not in this instance), but
that there is no regular rule for extracting field values from the
record.

Suppose we had a database with fields @samp{place}, @samp{time}, and
@samp{purpose}, whose database file was:
@example
Dentist's Office at Never! for Root canal
Home at Midnight for Sleep
Other places at Other times for Other things
@end example

In order to read and write this database, place the following code in
the auxiliary file (@pxref{Reading from disk}):

@lisp
(database-set-read-record-from-region database 'arb-demo-rrfr)
(database-set-write-region-from-record database 'arb-demo-wrfr)

(defun arb-demo-rrfr ()
  (goto-char (point-min))
  (if (re-search-forward
       "\\(.*\\)\s-+at\\s-+\\(.*\\)\s-+for\\s-+\\(.*\\)")
      (let ((result-record (make-record database)))
        (record-set-field result-record 'place (db-match-string 1) database)
        (record-set-field result-record 'time (db-match-string 2) database)
        (record-set-field result-record 'purpose (db-match-string 3) database)
        result-record)
    (error "This didn't look right to me.")))

(defun arb-demo-wrfr (record)
  (insert (record-field record 'place database)
          " at " (record-field record 'time database)
          " for " (record-field record 'purpose database)))
@end lisp

The auxiliary file would also specify the database's fieldnames:
@lisp
(database-set-fieldnames-to-list database '(place time purpose))
@end lisp
@noindent
as well as possibly other information such as the summary format or the
name of the default format file.  See the example database auxiliary
file @file{arb-demo.dba} for a concrete example of this.

All this Emacs Lisp code may be placed in ``Local Variables'' section of
the format file instead of in the auxiliary file, if desired.  For more
information about the ``Local Variables'' section of a file, @xref{File
Variables, , Variables, emacs, The GNU Emacs Manual}.
@cindex local variables section of format file

This particular example is simple enough that a special function for
reading isn't strictly necessary.  Reading can be done under the control
of regular expressions; for instance, each field separator would be
@code{"\\s-+\\(at\\|for\\)\\s-+"}.  See the example database auxiliary
file @file{arb-demo-regexp.dba} for a concrete example of this.  You
would still need to specify a special record-writing function.

Here is another example, which has no field separators; in the data file,
the fields abut one another.  While it, too, could be read and written
under the control of regular expressions, the use of functions is a bit
clearer.

@cindex Einstein, Albert
@cindex Botswana
The data file is:
@example
Einsteinbirthday03141879
Botswanaindepend09301966
@end example

The auxiliary file contains the following:

@lisp
(database-set-print-name database "Historic Dates")
(database-set-fieldnames-to-list database '(name occasion month day year))

(sepinfo-set-sep-string (database-record-sepinfo database) "\n")
(database-set-read-record-from-region database 'sized-field-rrfr)
(database-set-write-region-from-record database 'sized-field-wrfr)

(defvar sized-field-alist
  '((name . 8)
    (occasion . 8)
    (month . 2)
    (day . 2)
    (year . 4)))

(defun sized-field-rrfr ()
  (goto-char (point-min))
  (let ((result-record (make-record database))
        (field-begin (point)))
    (mapcar (function
             (lambda (this-size-cons)
               (forward-char (cdr this-size-cons))
               (record-set-field result-record (car this-size-cons)
                                 (buffer-substring field-begin (point))
                                 database)
               (setq field-begin (point))))
            sized-field-alist)
    (if (not (eobp))
        (error "Found extra characters in this record."))
    result-record))

(defun sized-field-wrfr (record)
  (mapcar (function
           (lambda (this-size-cons)
             (let ((this-field-value (record-field record
                                                   (car this-size-cons)
                                                   database)))
               (if (not (= (length this-field-value) (cdr this-size-cons)))
                   (error "Field %s value \"%s\" should have length %d, not %d."
                          this-field-value (car this-size-cons)
                          (cdr this-size-cons) (length this-field-value)))
               (insert this-field-value))))
          sized-field-alist))
@end lisp

This example is actually a bit too simple.  Some of the fields could be
made non-strings, field constraints should keep the fields the right
length, and @code{sized-field-alist} should be a database-local
variable.


@node Reading from disk,  , Nonregular file layout, Database file layout
@section What happens when a database is read in from disk
@cindex reading from disk, details

In brief, the following happens after you execute @code{db-find-file}:

@enumerate
@item
If the database is already read in and its buffer has not been killed,
the buffer is simply selected.  No other work is done.

@item 
Otherwise, the database file is inserted in a special buffer of its own.
If the database is in EDB internal file layout (that is, if an
identifying header is found), it is read in immediately.  Otherwise, a
new, empty database is created.  In either case the dynamic variable
@code{database} is bound; this makes it possible to refer to the
database in the auxiliary and format files (even before it has been read
in, if it is not in EDB internal file layout).

@item
The format file is found (@pxref{Auxiliary files}), and the data display
buffer is created.

@item
@findex db-setup-data-display-buffer
The function @code{db-setup-data-display-buffer} is called; it performs
the rest of the work necessary for setting up the data display buffer
(everything up to the running of @code{db-before-read-hooks}).  Its
first action is to insert the format file's contents into the data
display buffer.

@item
The auxiliary file, if any, is loaded.  This happens in the data display
buffer, and the dynamic variable @code{database} and the buffer-local
variable @code{dbc-database} are bound to the current database.  For
more information about how the auxiliary file is found and what it can
do, see @ref{Auxiliary files}.

The auxiliary file is not read every time @code{db-setup-data-display-buffer}
is called, only when a database's primary display format is read.  (The
primary display format is the one initially selected when a database is
first read in.)

@item
The ``Local Variables'' section, if any, of the format file is executed;
this may set variables and execute Emacs Lisp code, exactly analogously
to the auxiliary file.  EDB ignores the value of
@code{inhibit-local-variables} when evaluating this code.  This section
is then deleted from the working copy of the file, so that it does not
appear in the data display buffer when you view database records.  For
more information about the ``Local Variables'' section of a file, see
@ref{File Variables, , Variables, emacs, The GNU Emacs Manual}.
@cindex local variables section of format file
@vindex inhibit-local-variables

@item
Database information is propagated; for instance, the names of the
database fields are known by now, and various other database slots are
filled in depending on this information, if they haven't been set yet.

@item
@findex db-setup-format-parse-displayspecs
The format file is parsed, and literal text and formatting directives
are distinguished from one another.  This work is done by the
@code{db-setup-format-parse-displayspecs} function.  When that function
is done, @code{db-setup-data-display-buffer} returns the database data
display buffer as its result.

@item
The hooks in @code{db-before-read-hooks} are run in the data display
buffer.
@vindex db-before-read-hooks

@item
If the database had already been read because it was stored in internal
file layout, it is massaged a bit to get it into its final form; for
instance, the backward links are added between adjacent records.

Otherwise, the database is finally read; the values of the
@code{recordsep} and @code{fieldsep} slots of the database determine
whether the layout is delimited or nonregular and direct the parsing.  The
@code{substitutions} slot directs replacement of characters that could not
be written into the file, and the @code{stored->actual} slot of each
recordfieldspec completes the translation to the data's internal format from
its file layout.

@item
The hooks in @code{db-after-read-hooks} are run in the data display buffer.
@vindex db-after-read-hooks

@item
The database has now been read and is in its final form.  The first
record of the database is displayed in the data display buffer, which is
then placed in view mode and selected (made visible).
@end enumerate


@node How information is displayed, Customization, Database file layout, Top
@chapter How information is displayed
@cindex display format, specifying

The display of information, both on the screen (whether in the data
display buffer, the summary buffer, or elsewhere) and in other output
(such as reports), is controlled by formatting commands.  We will
discuss a data display buffer by way of example; the formatting
specifications are the same for summary buffers and reports as well.

Display types should not be confused with record field types; a display
type is used to specify how a particular value is shown on the screen,
but a record field type constrains the information actually contained in
the record field.  This chapter does not discuss record field
specifications, which specify everything about a record field type
except how it is displayed and parsed in output intended for humans to
read.  For more information about that, and about the distinction
between record field types and displaytypes (the latter of which is
described in this chapter), @pxref{Record field types}.

A @dfn{display format} gives all of the information necessary to create
a data display buffer; it consists of literal text that is displayed as
is (and may not be edited by a user of the database) and of @dfn{display
specification}s that instruct EDB how to display a particular field's
contents.  The display specifications do not appear in the data display
buffer; they are replaced by fields' values, which may or may not be
editable.  An example of a display specification is
@samp{\name,width=16}, which indicates that the @samp{name} field of the
database should be displayed (after being padded or truncated to exactly
16 characters).

When a format is first specified, it is parsed and the formatting
information specified in the display specification strings is used to
create a displayspec structure.  Users should never have to manipulate
displayspecs directly.

@menu
* Display specifications::      Display specifications
* Predefined displaytypes::     Predefined displaytypes
* Enumeration displaytypes::    Enumeration types
* Defining new displaytypes::   Defining new displaytypes
* Display specification optional parameters::  Display specification optional parameters
* Display specification abbreviations::  Display specification abbreviations
@end menu


@node Display specifications, Predefined displaytypes, How information is displayed, How information is displayed
@section Display specifications
@cindex display specification

A @dfn{display specification} describes how a particular database record
field appears in the data display buffer.
An display specification consists of a backslash followed by a field
name, plus perhaps some optional type and formatting information, plus
optionally a backslash followed by a space.  The items of extra
formatting information must be separated from the field name and from
each other by commas.  No spaces or tabs may occur in a display
specification.  To specify a backslash which does not begin a display
specification, but should appear in the data display buffer verbatim,
precede it by another backslash.

@c A display specification consists of a backslash; a fieldname
@c indicating which field of the database record is to be inserted;
@c optional comma-separated type and formatting information; and optionally
@c a backslash followed by a space.

Here is a (quite complicated) example display format:
@example
\name,one-line-string,actual->display=upcase\ , \occupation'
Pay:     \\\salary,min-width=4:  too much!
Address: \address,indent is home sweet home
@end example

@c A display specification consists of a field name, plus perhaps some
@c optional type and formatting information, all surrounded by curly
@c braces.  To specify a curly brace which does not begin or end a display
@c specification, but should appear in the data display buffer (or is part
@c of a display specification), precede it by a backslash; do the same to
@c specify a literal backslash.
@c 
@c @example
@c @{name,one-line-string,actual->display=upcase@}, @{occupation,'@}
@c Pay:     \\@{salary,min-width=4@}:  too much!
@c Address: @{address,indent@} is home sweet home
@c @end example

This display format is valid if the database contains fields called
@samp{name}, @samp{occupation}, @samp{salary}, and @samp{address}; any
other fields are not displayed.  Some typical records would be displayed
like this:

@example
JOHN DOE, butcher
Pay:     \  22:  too much!
Address: 123 Main St.
         Anyplace, USA is home sweet home
@end example

@example
JANE ROE, baker
Pay:     \4444444:  too much!
Address: 675 Massachusetts Avenue is home sweet home
@end example

@c @cindex display format, swallowed characters
@c A display specification starts with a backslash to distinguish it from
@c the surrounding text.  To specify the backslash character in literal
@c text, type it twice; when backslashes occur in pairs they do not
@c indicate the start of a display specification.  Display specifications
@c continue as long as the text can be parsed as one.  Almost any
@c non-whitespace character may be used as part of a display specification.
@c Whitespace is a good way of indicating the end of a field specification
@c since it never appears in a display specification.  A display
@c specification can be terminated without indicating any literal text by
@c placing a backslash and a space at its end; both of these characters
@c is ignored.  This is useful when the literal text that follows the
@c display specification happens to conform to the display specification
@c syntax (is a letter, number, or almost any type of punctuation).

The optional information includes the type of this display field and
formatting directives for it; if the type is present, then it must come
first among the displayspec's optional specifications.  Each optional
parameter is preceded by a comma to separate it from the preceding one
(or from the fieldname, for the first optional parameter).  The optional
information is typically of the form @samp{@var{slotname}=@var{value}},
which sets the specified slot to the given value, or
@samp{@var{slotsetter}}, which sets some slot to a particular value.
Explicitly specified formatting information overrides any defaults.  For
a list of slotnames and slotsetters, @pxref{Display specification
optional parameters}.

The display type can be specified by writing a typename (such as
@samp{string} or @samp{integer}) as the first optional parameter.  A
type abbreviation may be used instead of a typename; the defined type
abbreviations are @samp{#} for integer, @samp{$} for number, @samp{"}
for string, and @samp{'} for one-line-string.

@cindex displaytype, not set by display specification
The display type specifies default values for the display specification
(actually for the displayspec structure, which is derived from the
display specification).  It is rarely necessary even to specify the
displaytype---most display specifications consist of simply a backslash
and a fieldname---since if the displaytype is omitted then a displaytype
with the same name as the record field type (actually the @code{type}
slot of the recordfieldspec) is used.  This works because typically
displaytypes and recordfieldtypes with the same names and complementary
definitions are declared at the same time.  The displaytype must be
compatible with the record field type; it is an error to specify a
displaytype of @samp{integer} when the data is actually a string.
@code{database-set-fieldnames-to-list} to specify recordfieldtypes;
@pxref{The database structure}.

A display specification abbreviation, which consists of an abbreviation
name preceded by a backslash (and so looks like a simple display
specification in which no optional information is specified), can be
used instead of a standard display specification; @ref{Display
specification abbreviations}.


@node Predefined displaytypes, Enumeration displaytypes, Display specifications, How information is displayed
@section Predefined displaytypes
@cindex displaytypes, predefined
@cindex type, display, predefined
@cindex predefined displaytypes

The file @file{db-types.el} defines the following displaytypes,
corresponding recordfieldtypes, and some useful associated functions.
You can also define displaytypes of your own; see @ref{Defining new
displaytypes}.

@table @asis
@item integer
@cindex integer displaytype
Ordinary integers.

@item integer-or-nil
@cindex integer-or-nil displaytype
Integers or @code{nil}, the empty value; @code{nil} is formatted as the
empty string.

@item number
@cindex number displaytype
@cindex floating-point number displaytype
Ordinary numbers.  A number is an integer or a floating-point number.

@item number-or-nil
@cindex number-or-nil displaytype
Numbers or @code{nil}, the empty value; @code{nil} is formatted as the
empty string.

@item yes-no
@cindex yes-no displaytype
This displayspec corresponds to the boolean recordfieldtype.  The field is
three characters long and contains ``Yes'' or @w{``No ''}.

@item string
@cindex string displaytype
Ordinary strings.  By default there is no maximum or minimum width or
height, and subsequent lines are indented relative to the first
character of the first line.

@item one-line-string
@cindex one-line-string displaytype
Strings which may not contain newlines.

@item string-or-nil
@cindex string-or-nil displaytype
Either a string or the value @code{nil}, which is displayed as the empty
string.

@item nil-or-string
@cindex nil-or-string displaytype
Either a string or the value @code{nil}.  When you enter the empty
string as the field value, or when a new record is created, the value
@code{nil} is used in preference to the empty string.

@item one-line-string-or-nil
@cindex one-line-string-or-nil displaytype
Either the value @code{nil} or a string which may not contain newlines.

@item date
@cindex date displaytype
A date which specifies zero or more of the year, month, and day.  The
date is formatted by @code{format-date} and parsed by
@code{parse-date-string}; for details, @pxref{Date displaytype}.
@findex format-date
@findex parse-date-string

@item time
@cindex time displaytype
A time which specifies zero or more of the hour, minute, and second.
The time is formatted by @code{format-time} and parsed by
@code{parse-time-string}; for details, @pxref{Time displaytype}.
@end table

@menu
* Date displaytype::            Date displaytype
* Time displaytype::            Time displaytype
@end menu


@node Date displaytype, Time displaytype, Predefined displaytypes, Predefined displaytypes
@subsection Date displaytype
@cindex date displaytype

EDB defines a date abstraction and a variety of useful operations upon
it; the best way to learn about these features is to read @file{db-time.el}

This section provides more detail about the date displaytype.  A date
specifies a year, month, and day (all integers); any or all of these
components may be hidden.  Dates are created by the constructor
@code{make-date} and a date's components are retrieved using the
selectors @code{date-year}, @code{date-month}, and @code{date-day}.
@findex date-year
@findex date-month
@findex date-day

@table @kbd
@item make-date
@findex make-date
Make an EDB date object with arguments @var{year} @var{month} @var{day}.
@end table




[[[Document parse-date-string, format-date, simple-format-date,
def-xxx-type.]]]

[[[
    I added several useful (to me, anyway) displayspecs for various date
    types.  These are meant to be used in a display spec, like:
       \datefield,date-mmddyy
    The displayspecs are implemented with similarly named formatting
    functions, which I also implemented.  All of the new formatting
    functions are named format-date-XXX, where XXX are the various styles.
]]]


@node Time displaytype,  , Date displaytype, Predefined displaytypes
@subsection Time displaytype
@cindex time displaytype

[[[Similarly to the above, for times.]]]


@node Enumeration displaytypes, Defining new displaytypes, Predefined displaytypes, How information is displayed
@section Enumeration types
@cindex enumeration types
@cindex alternatives, in enumeration types

An enumeration displaytype is used for fields whose values are one of a
fixed set of alternatives.  Each alternative may be a single character
(say, @samp{M} or @samp{F} for gender) or specifiable by a single
character (for example, if the first letters of the alternatives are
unique); you need only type a single character in order to select one of
the alternatives.  Another possibility is that each alternative consists
of an entire string entered with completion.  (The string may consist of
only a single character if desired, but you must still type @key{RET}
after entering the string.)  The internal representation of the
data---its recordtype---need have nothing to do with the way that the
alternatives are specified.  The next two sections describe the two
types of enumeration displaytypes, which are nicknamed ``one-char-enum'' and
(for the multicharacter alternative type) ``enum''.


@menu
* One-character enumeration displaytypes::  One-character enumeration displaytypes
* Multi-character enumeration displaytypes::  Multi-character enumeration displaytypes
@end menu

@node One-character enumeration displaytypes, Multi-character enumeration displaytypes, Enumeration displaytypes, Enumeration displaytypes
@subsection One-character enumeration displaytypes
@cindex one-character enumeration displaytypes

One-character enumeration displaytypes are not yet implemented.

@c <<<commandtable: define-one-char-enum-displaytype>>>


@node Multi-character enumeration displaytypes,  , One-character enumeration displaytypes, Enumeration displaytypes
@subsection Multi-character enumeration displaytypes
@cindex multi-character enumeration displaytypes

Multi-character enumeration displaytypes require you to enter an entire
string in order to specify one of the alternatives.  This typing may be
done with completion in the minibuffer, which means that keys such as
@key{TAB} and @key{?} complete a partly-entered choice or list the
remaining possibilities.  (For more about completion, see
@ref{Completion, , , emacs, The GNU Emacs Manual}.)  The internal,
input, display, and file storage representations of the value may all be
different.  Multi-character enumeration displaytypes (also known as enum
displaytypes) are created by calling the following function, which also
creates a corresponding recordfieldtype.

@table @kbd
@item define-enum-type
@findex define-enum-type
Make @var{typename} (a symbol or string) an enumerated type.
Both a displaytype and a recordfieldtype are created.

@var{alternatives} is a list.  Each alternative is a list of up to four components:
 the internal representation, any constant Lisp object, often a string;
 the input representation typed by the user to specify this alternative,
   a string or list of strings (for multiple input representations);
 the display representation, a string; and
 the file storage representation, a string.

If the input representation is omitted and the internal representation is a
string, that string is used.  If the display representation is omitted, it
defaults to the first input representation.  The display representation is
automatically also a valid input representation.  If the file storage
representation is omitted, it defaults to the display representation.
If all the other components are omitted, the internal representation string
may be used in place of a one-element list containing just it.

Optional argument @var{optstring} is a displayspec option string.
@end table

When a record field's type is an enum type, both EDB and code written by
the database designer may assume that the value in the record field is
one of the valid representations.  (Similarly, when a field's type is
string, EDB can assume that the field content is actually a string.)
This means that the empty string, @code{nil}, and other special values
must be specifically mentioned when the enumeration type is defined.
Here is a way to define an enumeration type which is either a day of the
week or the empty string:
@example
(define-enum-type 'workday
  '("Monday" "Tuesday" "Wednesday" "Thursday" "Friday" ""))
@end example
@noindent
If it is possible for the field value to be @code{nil} (but not the
empty string) after reading the database, and @code{nil} should be
displayed as @samp{Unknown} (and that string parsed into a value of
@code{nil}), the following definition suffices:
@example
(define-enum-type 'workday
  '("Monday" "Tuesday" "Wednesday" "Thursday" "Friday" (nil "Unknown")))
@end example


@node Defining new displaytypes, Display specification optional parameters, Enumeration displaytypes, How information is displayed
@section Defining new displaytypes
@cindex displaytype, defining
@cindex type, display, defining
@cindex defining displaytypes

When you are about to type a complicated display specification---or a
simple one more than once---consider defining and using a displaytype
instead.  Displaytypes are more concise (and so less cumbersome and less
error-prone), easier to change (since a change to the displaytype can
affect every display specification that uses it), and clearer (since a
descriptive typename makes immediately clear what the intention is).
Furthermore, displaytypes can be built up incrementally, with each one
making a few changes to those from which it inherits defaults.

There are two ways to define a new displaytype; each requires specifying
the name of the displaytype and some formatting information to be
associated with that displaytype.

The first method permits a displaytype to be specified by the optional
part of a display specification, which is a string consisting of
comma-delimited optional parameters.  The first optional parameter may
be a type, in which case the defaults for values not explicitly set in
the other parameters are taken from that type.

@table @kbd
@item define-displaytype-from-optstring
@findex define-displaytype-from-optstring
Define a displaytype named @var{typename} according to @var{optstring}.
@var{typename} is a symbol or string and @var{optstring} is the optional parameters
part of a display specification string.
@end table

The second method is more useful for complicated displaytypes; it is
also somewhat more efficient, which is why the file @file{db-types.el}
uses it to define the standard predefined types.  This method is to
create a displayspec or copy an existing one, then
@c (via @code{make-displayspec} or @code{displaytype->displayspec})
modify it as desired using the structure slot modifiers (i.e.,
@code{displayspec-set-}@var{slotname}; see @ref{Display specification
optional parameters}, for a list of slotnames), and then
@c call @code{define-displaytype-from-displayspec} to
associate a typename with the displayspec.  In fact, this is
precisely what @code{define-displaytype-from-optstring} does.

@table @kbd
@item make-displayspec
@findex make-displayspec
Not documented.

@item displaytype->displayspec
@findex displaytype->displayspec
Return a copy of the displayspec corresponding to string or symbol @var{displaytype}.
Return @code{nil} if there's no corresponding displayspec.

@item define-displaytype-from-displayspec
@findex define-displaytype-from-displayspec
Define a displaytype named @var{typename} (a symbol) with the default @var{displayspec}.
@var{displayspec} may also be a typename symbol itself.
@end table


@node Display specification optional parameters, Display specification abbreviations, Defining new displaytypes, How information is displayed
@section Display specification optional parameters
@cindex display specification optional parameters
@cindex displayspec fields

This section describes the display specification optional parameters,
which correspond exactly to slots of the displayspec, EDB's
internal representation of the display specification.

@cindex slotsetters, for display specifications
@cindex slot assigners, for display specifications
Optional display specification parameters are separated only by commas;
display specifications never contain whitespace.  These parameters are
of two forms:  slotsetters, which are a single word and set a slot to a
particular value; and slot assigners, which are of the form
@samp{@var{slotname}=@var{value}} and set the slot to the value.  Unless
otherwise specified, each slot can be set by a slot assigner whose name
is the same as that of the slot.  An example of a display specification
containing two optional parameters, one a slot assigner and one a
slotsetter, is @samp{\name,width=16,unreachable}.

Display specification fields are processed in order, so only the last
instance of a particular parameter has any effect.  Any explicitly
specified parameter overrides defaults, values inferred from the type,
or previously specified parameters.

If you find yourself repeatedly writing similar display specifications,
or large, bulky display specifications, consider defining a new type to
do some or all of the work for you; see @ref{Defining new displaytypes}.


@cindex displayspec structure

@table @code
@item record-index
@cindex @code{record-index} displayspec slot
@cindex record field index
This integer is the field index in a database record of the value
formatted by this displayspec.  This is set by looking up the fieldname
part of the displayspec.

@item indent
@cindex @code{indent} displayspec slot
@cindex @code{noindent} display specification parameter
This boolean value determines whether the second and subsequent lines
should align with the beginning of the first one or should be flush
left, in column 0.  It is set and unset with the @code{indent} and
@code{noindent} slotsetters.  The first of the following displays has
indent set, and the second does not:

@example
Name:    John Doe
Address: 123 Main St.
         Anyplace, USA
@end example

@example
Name:    John Doe
Address: 123 Main St.
Anyplace, USA
@end example

This causes alignment of the first character of subsequent lines with
the first character of the first line; it does not do anything clever
with whitespace in the field value, nor does it align different lines
differently.

@need 400
@item min-width
@itemx max-width
@cindex @code{min-width} displayspec slot
@cindex @code{max-width} displayspec slot
@cindex @code{width} display specification parameter
These integers are the minimum and maximum widths which the display may
occupy.  If the formatted value is too short, the function in the
@code{padding-action} slot is called to lengthen and/or justify it.  If
the formatted value is too long, the function in the
@code{truncation-display-action} slot is called to shorten it; if that
slot is empty, the field is simply truncated.  The @code{width} slot
assigner sets both the @code{min-width} and @code{max-width} displayspec
slots.  The @code{min-length}, @code{max-length}, and @code{length} slot
specifiers are synonyms for the @code{min-width}, @code{max-width}, and
@code{width} slot specifiers.

@need 400
@item min-height
@itemx max-height
@cindex @code{min-height} displayspec slot
@cindex @code{max-height} displayspec slot
@cindex @code{height} display specification parameter
These are analogous to @code{min-width} and @code{max-width}, but for
the number of lines occupied by the formatted value (actually, the
number of newlines in the string, plus one).  There is a @code{height}
slot assigner which sets them both.

@item truncation-display-action
@cindex @code{truncation-display-action} displayspec slot
@cindex @code{trunc-display} display specification parameter
This function helps reduce the size of the formatted value when it is
too large to fit in the specified displayspec size.  It defaults to
simply truncating the formatted field to the maximum permissible size.
It may also be set with the @code{trunc-display} slot assigner.
At present, this function is only called if the formatted value is too
wide; there is no analogous function called when it is too tall.

@item padding-action
@cindex @code{padding-action} displayspec slot
@cindex justification of display fields
@cindex left justification of display fields
@cindex right justification of display fields
@findex @code{right-justify} display specification parameter
@findex right-justify
This function determines how a field that is too small for the
displayspec (that is, the printed representation contains fewer
characters than specified in the @code{min-width} slot) should be
expanded to fit.  The padding function takes three arguments:  the
minimum length, the unpadded display representation, and the length of
that representation.

The @code{padding-action} slot may also be set to a cons of a padding
character and a padding direction:  @code{nil} for left-justification
(padding on the right), and non-@code{nil} for right-justification.
(You cannot set the @code{padding-action} displayspec slot to a cons by
using a display specification, since display specifications may not
contain whitespace, so the easiest way to right-justify a single field
is to use the @code{right-justify} slotsetter.)  The default, which can
also be obtained just by setting the slot to @code{nil}, is to pad on
the right with space characters.

@need 400
@item actual->display
@itemx display->actual
@cindex @code{actual->display} displayspec slot
@cindex @code{display->actual} displayspec slot
@cindex @code{a->d} display specification parameter
@cindex @code{d->a} display specification parameter
These functions convert between the data's
internal representation and its displayed representation (a string).
Other functions (such as those in the @code{truncation-display-action}
and @code{padding-action} slots) may then be called on the result
returned by the @code{actual->display} function.  These slots may be set
with the @code{a->d} and @code{d->a} slot assigners.

The @code{display->actual} function takes either one argument or four
arguments:  either just the field text or the field text, the previous
field value, the record being operated upon, and the record fieldnumber
of the field in question.  EDB ascertains at runtime how many arguments
the function should be applied to.  The old field value is passed in
case it contains hidden (undisplayed) attributes that need to be
preserved across changes.  The other two arguments permit a particular
@code{display->actual} function to be used for more than one field of a
record, allow the field text parse to depend on other record field
values, and provide for other complicated needs.  Most
@code{display->actual} functions can be specified to take a single
argument.

The @code{actual->display} function takes either one argument or three
arguments:  either just the field value or the field value, the record,
and the record fieldnumber.  EDB ascertains at runtime how many
arguments the function should be applied to.  The reasons the additional
arguments may be specified are similar to those outlined above (for
instance, to permit the displayed representation of a field to depend on
other information in the record); most @code{actual->display} functions
take just one argument---for instance, @code{upcase} is a valid
@code{actual->display} function.

@need 400
@item match-actual->display
@itemx match-display->actual
@cindex @code{match-actual->display} displayspec slot
@cindex @code{match-display->actual} displayspec slot
@vindex dbm-string-prefix-regexp
These functions are like @code{actual->display} and
@code{display->actual}, but are only invoked when reading a displaying a
search specification.  If they are not specified (as is usually the
case), then the ordinary (@code{match-}-less) versions are used for
search specifications too.  For instance, a string type can use
@code{dbm-string-prefix-regexp} to specify a regular expression search
rather than a substring search.

These slots should be set to symbols, not to functions proper; that is,
to specify that function @code{foo} should be used, set the slot to
@code{'foo}, not to @code{(function foo)}.

I don't know that these belong in the displayspec, but I don't quite
know where they do belong.

@item truncation-editing-action
@cindex @code{truncation-editing-action} displayspec slot
@cindex @code{trunc-edit} display specification parameter
This function specifies what to do when a field being edited is too
large for the specified displayspec size; this action may be different
from that taken when simply displaying the offending value.  It may also
be set with the @code{trunc-edit} slot assigner.

@item reachablep
@cindex @code{reachablep} displayspec slot
@cindex uneditable fields in data display buffer
@cindex @code{unreachable} display specification parameter
A Boolean value determining whether movement commands should skip this
display field.  The @code{reachable} and @code{unreachable} slotsetters
are used to assign a value to this slot.

@end table


@node Display specification abbreviations,  , Display specification optional parameters, How information is displayed
@section Display specification abbreviations

@c [[[Too wordy.]]]

Complicated display specifications---those which specify more than a few
optional parameters---can clutter the display format, keeping it from
looking like the data display buffer will look when a database record is
being displayed.  You may tolerate the complicated display
specification, define a new displaytype (which would permit the display
specification to consist of just the fieldname and displaytype), or use
a display specification abbreviation which is defined elsewhere in the
format file.  The display specification abbreviation is a symbol which
expands to a full display specification; when a display specification
consisting of only the abbreviation is encountered, the expansion is
substituted and processing continues.  (Actually, a displayspec
corresponding to the expansion is used, but since displayspecs are
immutable, this doesn't make a difference.)  Display specification
abbreviations can be much more concise than ordinary display
specifications, which contain at least a fieldname and often other
information to boot.

[[[How to define display specification abbreviations.]]]
[[[Poorly-named variable dbf-fieldabbrevs controls this; it isn't
getting set anywhere, though.]]]


@node Customization, Database representation, How information is displayed, Top
@chapter Customization
@cindex customization

@menu
* Auxiliary files::             Auxiliary and format files
* Hooks and customization functions::  Hooks and customization functions
* Local variables::             Local variables
* Global variables::            Global variables
@end menu


@node Auxiliary files, Hooks and customization functions, Customization, Customization
@section Auxiliary and format files
@cindex auxiliary file
@cindex format file
@cindex display format file name
@cindex file name, for auxiliary file
@cindex file name, for display format

A database designer can customize a database by providing code to be
executed when the database is read in (@pxref{Reading from disk}).  The
optional auxiliary file usually contains the code specific to a
particular database, but the format file, which specifies the on-screen
arrangement of fields of a record, can also contain such code.

Since the auxiliary file is read after the format file has been found
but before it has been parsed, neither file can specify the other.  The
format file can, however, load arbitrary files, which is nearly as good
as being able to specify an auxiliary file.

@cindex auxiliary file name
If the @code{aux-file} database slot does not specify the auxiliary
file, EDB looks for a file with the same name as the database file, but
ending with one of the suffixes in @code{db-aux-file-suffixes}.

@table @code
@item db-aux-file-suffixes
@vindex db-aux-file-suffixes
List of auxiliary file suffixes; the basename is that of the database file.
The suffixes are tried in order; the default is (".dba" ".aux" "a").
The . that may precede the extension must be specified explicitly.


@item db-aux-file-path
@vindex db-aux-file-path
List of directories (strings) to search, in order, for auxiliary files not
found in the directory with their associated databases.
@end table

The auxiliary file is evaluated in the data display buffer and so can
set variables local to that buffer, such as hooks (@pxref{Hooks and
customization functions}).  The database itself can be manipulated via
the dynamic variable @code{database} or the buffer-local variable
@code{dbc-database}.  For instance, auxiliary files often set the
@code{print-name} slot of their associated databases.

Code in an auxiliary file should be specific to the particular database;
more general code is best placed in a separate file which is
@code{load}ed (or, better, @code{require}d) by the auxiliary file.  For
instance, if you want to permit EDB to manipulate files of type Foo, you
should put all Emacs Lisp code that applies to every Foo file in one
file (@file{db-foo.el}, say), and then put @code{(require 'db-foo)} in
the auxiliary file associated with a particular Foo file.  (Alternately,
you may autoload a function that will be called in the auxiliary file;
function @code{db-tagged-setup} is autoloaded from @file{db-tagged.el}
in this manner.)  Either technique keeps auxiliary files simple and small
and makes Foo-specific code easier to debug, byte-compile, and load only
once per session.  These advantages easily outweigh the introduction of
an extra file.

Since the format file has not yet been interpreted, the auxiliary file
could even change the contents of the buffer (and so the apparent
contents of the format file); such extreme trickiness is only called for
in special circumstances.

@cindex format file name
@findex db-file->format-file
@vindex db-format-file-suffixes
The format file can  contain Emacs Lisp code in its ``Local
Variables'' section; that code can do anything that code in the
auxiliary file can do.  If the format file is not named explicitly in
the database (in the @code{default-format-file} slot), then function
@code{db-file->format-file} tries to find one based on the database file
name and the suffixes in @code{db-format-file-suffixes}; if that doesn't
work either, you are prompted for a display format to use.

@cindex format file, path to search
@table @code
@item db-format-file-suffixes
@vindex db-format-file-suffixes
List of format file suffixes; the basename is that of the database file.
The suffixes are tried in order; the default is (".dbf" ".fmt" "f").
The . that may precede the extension must be specified explicitly.


@item db-format-file-path
@vindex db-format-file-path
List of directories (strings) to search, in order, for format files not
found in the directory with their associated databases.
@end table

Code in the format file is useful for customizations specific to a
particular format (such as setting variables which are local to the
data display buffer); they can also be used for database-specific
customizations if the database designer is sure that the file will
always be the primary (first-selected) format for the database.


@node Hooks and customization functions, Local variables, Auxiliary files, Customization
@section Hooks and customization functions
@cindex hooks
@cindex customization functions

Hooks are variables whose values are ``hook functions'' (or lists of
hook functions) which are called at particular times, such as when EDB
has finished loading (to permit you to load customization code) or when
a value has just been changed.  Since hook functions can contain
arbitrary code, they permit very powerful customizations.  Customization
functions are similar, but are single functions, never lists.  Sometimes
``hook'' is used to mean either a hook or a customization function.

The following sections describe EDB's hooks and customization functions.
Many of these hooks are change hooks, which permit a function (or
functions) to be run whenever a value changes.  These change hooks may
be divided into two basic types:  format change hooks and
recordfieldspec change hooks.  The former are associated with a
particular display format and are invoked when the value in a particular
field, or in any field, changes.  The latter (which are not yet
implemented) are associated with a recordfieldspec and are invoked
whenever a database record slot of a particular type is changed.


@menu
* Load and read hooks::         Load and read hooks
* Database minor mode hooks::   Database minor mode hooks
* Record display hooks::        Record display hooks
* Edit mode hooks::             Edit mode hooks
* Display format change hooks::  Display format change hooks
* Recordfieldspec change hooks::  Recordfieldspec change hooks
@end menu


@node Load and read hooks, Database minor mode hooks, Hooks and customization functions, Hooks and customization functions
@subsection Load and read hooks

After EDB has finished loading, the following hook is run.  This permits
user customizations to be loaded automatically when EDB is (rather than
being loaded unconditionally in the @file{.emacs} file, for instance),
and permits users to change the definitions of functions defined by EDB, if
desired.

@table @code
@item db-load-hooks
@vindex db-load-hooks
Function or list of functions run after loading EDB.
You can use this to load extensions, redefine EDB functions,
customize key bindings, etc.
@end table

The following two hooks are useful for causing database values seen by
EDB to be different than those in the database file.  The first can be
used to modify the database file before it is read in; the second can
be used to modify the database after it has been read in but before the
user has had a chance to see it.

@table @code
@item db-before-read-hooks
@vindex db-before-read-hooks
Function or list of functions run immediately before a database is first read
but after all local variables are set.
@vindex database
The hooks are run in the data display buffer with variable @code{database} bound.
@vindex db-buffer
Variable @code{db-buffer} is bound to a buffer containing the database file.

This is a global variable.  If you set it to be specific to a particular
database (for instance, in the format or auxiliary file), then consider
having its last action be to reset the variable to @code{nil}.


@item db-after-read-hooks
@vindex db-after-read-hooks
Function or list of functions run after a database is completely read.
@vindex database
The hooks are run in the data display buffer with variable @code{database} bound.
For databases with nonregular layouts, you might put a call to
@findex database-stored->actual
@code{database-stored->actual} here, for instance.

This is a global variable.  If you set it to be specific to a particular
database (for instance, in the format or auxiliary file), then consider
having its last action be to reset the variable to @code{nil}.
@end table


@node Database minor mode hooks, Record display hooks, Load and read hooks, Hooks and customization functions
@subsection Database minor mode hooks
@cindex database minor mode hooks
@cindex hooks, database minor mode

EDB provides hooks that are run whenever the data display buffer is
switched between Database View mode and Database Edit mode and which are run when a
summary buffer is created.

@table @code
@item db-view-mode-hooks
@vindex db-view-mode-hooks
Function or list of functions called when Database View mode is entered.


@item db-edit-mode-hooks
@vindex db-edit-mode-hooks
Function or list of functions called when Database Edit mode is entered.


@item database-summary-mode-hooks
@vindex database-summary-mode-hooks
Function or list of functions run when switching to Database Summary mode.
@end table


@node Record display hooks, Edit mode hooks, Database minor mode hooks, Hooks and customization functions
@subsection Record display hooks
@cindex record display hooks
@cindex hooks, record display
@cindex display format, data-dependent
@cindex data-dependent display format

@findex display-record
The following function is run by the @code{display-record} function, which
places a record's values in a data display buffer, each time a record is
about to be displayed.

@table @code
@item dbf-before-display-record-function
@vindex dbf-before-display-record-function

@findex display-record
A function called before a record is displayed by @code{display-record}.
The function takes one argument, the record.

@findex db-change-format
This is a good place to put calls to @code{db-change-format}.  Depending on
your function's implementation, however, you may silently override any user
calls to that function.
@end table

Here is an example of how you might use this:

@findex db-change-format
@example
(defun set-format-from-data (record)
  (if (< 0 (record-field record 'net-profit dbc-database))
      (db-change-format "loss format" "~/acct/db/loss.fmt")
    (db-change-format "profit format" "~/acct/db/profit.fmt")))

(setq dbf-before-display-record-function 'set-format-from-data)
@end example

@findex db-change-format
@vindex dbf-format-name
This uses two different display formats, depending on the value of one
field of a record.  As you move from record to record in the database,
each one is shown using the appropriate display format.  A preferable
implementation hides the filenames from the calls to
@code{db-change-format} and instead uses, in the format or auxiliary
file,
@example 
(setq dbf-format-name-spec-alist
  '(("loss format" . "~/acct/db/loss.fmt")
    ("profit format" . "~/acct/db/profit.fmt")))
@end example
@noindent
@vindex dbf-format-name-spec-alist
@vindex db-format-file-path
See the example file @file{arb-demo.dba} for an example of this.
@code{dbf-format-name-spec-alist} need not specify the full pathnames if
the format files are located in the same directory as the database or if
@samp{"~/acct/db"} is placed in @code{db-format-file-path}.

It would also be profitable to set @code{dbf-format-name} to whichever
the first format was (this could be done in the format file's ``Local
Variables'' section) so that the first-selected buffer wouldn't get read
in twice (once when the database was read in and once when
@code{display-record} was first called).

Finally, the database designer would probably arrange for there to be a
change hook on the net-profit field so that when its value changed, the
record could be redisplayed in the appropriate format automatically.

Here is an example of how to change the data display format when the
user changes a particular field.
@example
(defun equip-dbf-from-field (fieldname ignore-oldval ignore-newval)
  (let ((dbf-elt (assoc newval dbf-format-name-spec-alist))
        (save-index dbf-this-field-index))
    (db-change-format (if dbf-elt newval "default"))
    (setq dbf-this-field-index save-index) ; otherwise aref on nil
    ;; tell caller to redisplay record
    t))

(setq db-after-read-hooks
  (function (lambda ()
    (dbf-set-change-function 'equip-type 'equip-dbf-from-field))))
@end example


@node Edit mode hooks, Display format change hooks, Record display hooks, Hooks and customization functions
@subsection Edit mode hooks
@cindex edit mode hooks
@cindex hooks, edit mode

These hooks are called whenever you enter a field to edit it, which
provides an easy way to customize the behavior of particular format
fields.

@table @code
@item dbf-enter-field-hook
@vindex dbf-enter-field-hook
A function (of no arguments) called whenever a display field is entered.
@vindex dbf-this-field-index
The displayspec index is @code{dbf-this-field-index}.
@end table


It is sometimes advantageous to have a particular action happen only
once per edit of a record.  For instance, when a record's address, city,
state, or zip-code fields are edited, we might like to copy all the
values to the old-address, old-city, old-state, and old-zip-code fields.
We only want this to happen once, however:  if you edit first the
address, then the city, we don't want to repeat the process, because
then the old-address field would get written over by the new value of
the address field.

One way to prevent this from happening more than once is to set a
variable when the copying is done, and then don't do the copying if that
variable is set.  The variable would be reset whenever a new record was
edited.  The following variable, which contains a list of other
variables to reset each time Database Edit mode is entered, can
accomplish just what is desired, when combined with a judicious use of
change hooks.

@table @code
@item dbf-reset-on-edit-list
@vindex dbf-reset-on-edit-list
An alist of (variable-name . default-value) pairs.
Every time Database Edit mode is entered, these buffer-local variables are
reset to their default values.  This is good for making sure that something
only happens once each time a record is edited.
@end table

Here is an example (taken from an auxiliary file) of how to use @code{dbf-reset-on-edit-list}:
@lisp
(setq db-after-read-hooks
      (function (lambda ()
         (setq dbf-reset-on-edit-list
               '((tep-homephone-oldified . nil)))
         (dbf-set-change-function 'home-phone 'tep-homephone-change-hook)
         (setq db-after-read-hooks nil))))

(defvar tep-homephone-oldified nil)

(defun tep-homephone-change-hook (fieldname oldvalue newvalue)
  (if (not tep-homephone-oldified)
      (dbf-this-record-set-field 'old-home-phone oldvalue))
  ;; return value indicates whether whole record should be redisplayed
  (prog1
      (not tep-homephone-oldified)
    (setq tep-homephone-oldified t)))
@end lisp


@node Display format change hooks, Recordfieldspec change hooks, Edit mode hooks, Hooks and customization functions
@subsection Display format change hooks
@cindex display format change hooks
@cindex change hooks, for display formats
@cindex hooks, change, for display formats

The following hook is run whenever a new record is created.
@table @code
@item db-new-record-function
@vindex db-new-record-function
Function called on empty records before they're inserted in the database.
Takes two arguments, the record and the database.


@cindex new records, setting default information
A typical use is to set default information or add a timestamp.  For
instance:
@example
(defun set-update-date (record database)
  "Provide defaults for new records in the database."
  (record-set-field record 'updatedate
                    (parse-date-string (current-date)) database))
(setq db-new-record-function 'set-update-date)
@end example
@end table

The display format change hooks are called when you change a record
field value.  There are separate change hooks that run the first time
any field is modified, whenever any field is modified, and whenever a
particular field is modified.  They run in the order
@code{dbf-first-change-function}, @code{dbf-every-change-function}, and
finally one of the elements of @code{dbf-change-functions}.  Each change
hook is either @code{nil} or a function of three variables:  the
fieldname of the just-modified field (a symbol) and the pre- and
post-modification field values.  These functions can set variable
@code{dbf-redisplay-entire-record-p} to a non-@code{nil} value in order
to cause the entire record to be redisplayed (for instance, if if the
change hook modifies fields other than that named by its first
argument).
@vindex dbf-redisplay-entire-record-p

@table @code
@item dbf-first-change-function
@vindex dbf-first-change-function
A function called the first time a record field is modified, or @code{nil}.
The function takes the fieldname and the old and new values as arguments,
and returns @code{t} if the record should be redisplayed.


@cindex last modification field
Here is an example of code to update the last modification field of a
record, assuming its type is date:

@example
(defun update-last-modified-date (fieldname oldvalue newvalue)
  "Put the current date in this record's `last modified' field."
  (dbf-this-record-set-field 'last-modified
                             (parse-date-string (current-date))))

(setq dbf-first-change-function 'update-last-modified-date)
@end example

@item dbf-every-change-function
@vindex dbf-every-change-function
A function called whenever a record field is modified, or @code{nil}.
The function takes the fieldname and the old and new values as arguments,
and returns @code{t} if the record should be redisplayed.

@item dbf-change-functions
@vindex dbf-change-functions
A vector of one function (or @code{nil}) per record field (not display field).
The functions take the fieldname and the old and new values as arguments,
and return @code{t} if the record should be redisplayed.
@findex dbf-set-change-function
Use @code{dbf-set-change-function} to set the fields of this vector.

@item dbf-set-change-function
@findex dbf-set-change-function
Set the change function for @var{fieldname} to @var{function} in the current database.
@var{function} takes the fieldname and the old and new values as arguments,
and returns @code{t} if the record should be redisplayed.
@end table

@cindex dependent field values
It is easy to make a field's value dependent on that of another field.
For instance, suppose a salesman's commission should be 10% of the
selling price of an item, and both fields are of type number.  The
database designer might choose to make the commission field unreachable
(@pxref{Display specification optional parameters}) and compute it
whenever the selling price field varies.  The latter operation could be
done as follows:

@example
(defun set-commission-from-selling-price (fieldname oldvalue newvalue)
  (dbf-displayed-record-set-field 'commission (/ newvalue 10)))

(dbf-set-change-function 'selling-price 'set-commission-from-selling-price)
@end example

There are two things to notice about this example.  First, we need not
set @code{dbf-displayed-record-set-field}, as
@code{dbf-redisplay-entire-record} does that automatically.  Second, if
we replaced @code{(/ newvalue 10)} by @code{(/
(dbf-displayed-record-field 'selling-price) 10)}, then the function
would work even if not called as a change function for selling-price.

You may modify records explicitly by calling
@code{dbf-displayed-record-set-field} (@pxref{Manipulating records});
when that is done, the following hook is invoked.  It is different from
the above functions in that they are called when you edit a field,
while it is called when Emacs Lisp code modifies a field (usually as a
result of some user action).

@table @code
@item dbf-set-this-record-modified-function
@vindex dbf-set-this-record-modified-function
A function called when the current record is marked as modified.
The function takes no arguments and its return value is ignored.
@vindex dbf-this-record-original
@vindex dbf-this-record
It is called after @code{dbf-this-record-original} is copied to @code{dbf-this-record}
@vindex dbf-this-record-modified-p
and after @code{dbf-this-record-modified-p} is set to @code{t}.
@end table

Another function is invoked when changes to a record are
committed---that is, when changes to the record which is being displayed
are copied back into its original in the database.

@table @code
@item dbf-after-record-change-function
@vindex dbf-after-record-change-function
Function called whenever changes to a record are recorded semi-permanently
@findex dbf-process-current-record-maybe
by @code{dbf-process-current-record-maybe}.  For convenience, the function
@vindex dbf-this-record
takes the record as an argument, which is guaranteed to be @code{dbf-this-record}.
Its return value is ignored.
@end table


@node Recordfieldspec change hooks,  , Display format change hooks, Hooks and customization functions
@subsection Recordfieldspec change hooks
@cindex recordfieldspec change hooks
@cindex change hooks, for recordfieldspecs
@cindex hooks, change, for recordfieldspecs

Recordfieldspec change hooks are not yet implemented.


@node Local variables, Global variables, Hooks and customization functions, Customization
@section Local variables
@cindex local variables

Variables may be specified to be local to a particular data display
buffer or to a database; that is, when the variable's value is changed
in one data display buffer or in one database, its value elsewhere is
unaffected.


@menu
* Per-data-display-buffer variables::  Per-data-display-buffer variables
* Per-database variables::      Per-database variables
@end menu

@node Per-data-display-buffer variables, Per-database variables, Local variables, Local variables
@subsection Per-data-display-buffer variables
@cindex local variables, per data display buffer
@cindex per-data-display-buffer variables
@cindex variables, per-data-display-buffer
@cindex data-display-buffer-local variables

Per-data-display-buffer variables permit different data display buffers
to have different values for variables.  This feature is heavily used by
the EDB implementation; for instance, the per-buffer variable
@code{dbc-database} records which database the data display buffer is
displaying.  Per-data-display-buffer variables are also useful when
several data display buffers are all displaying the same database.  The
built-in Emacs function @code{make-variable-buffer-local} makes an
ordinary variable local to every buffer.

@comment Does this really belong here?
@table @code
@item db-default-field-type
@vindex db-default-field-type
The type to use for record fields whose type is not explicitly specified.
@end table


@node Per-database variables,  , Per-data-display-buffer variables, Local variables
@subsection Per-database variables
@cindex local variables, per database
@cindex per-database variables
@cindex variables, per-database
@cindex database-local variables

Per-database variables permit every data display buffer viewing a
particular database to share information without making it global or
interfering with other databases and other data display buffers.  When
the database is saved in internal EDB file layout, per-database variables are
also saved, so their values persist from one invocation of the database
to the next.  Use the following functions to create and manipulate
per-database variables.

@table @kbd
@item database-make-local
@findex database-make-local
Declare a database-local variable named by @var{symbol} for @var{database}.
Each such variable should only be declared once.
If optional argument @var{value} is specified, the variable is set to it.

Database designers who are very concerned about speed should arrange to
call this function in increasing order of frequency of variable
reference; that is, add the least-used variables first.

@item database-local-p
@findex database-local-p
Return non-@code{nil} if @var{symbol} is a database-local variable for @var{database}.
@item database-set-local
@findex database-set-local
Set the value of database-local variable @var{symbol}, in @var{database}, to @var{value}.
@findex database-make-local
@var{symbol} must have been declared by a previous call to @code{database-make-local}
unless optional argument @var{no-error} is supplied, in which case the function
does that automatically, if necessary.
@item database-get-local
@findex database-get-local
Return the value of database-local variable @var{symbol} for @var{database}.
@findex database-make-local
If @var{symbol} was not declared by a previous call to @code{database-make-local},
an error is signalled unless optional argument @var{no-error} is non-@code{nil},
in which case @code{nil} is returned.
@end table

To learn how to set local variables automatically whenever a record is
edited, @xref{Edit mode hooks}.

(This section of the manual does not refer to the ``Local Variables''
section of the database format file, which may be used to set variables
and execute arbitrary Emacs Lisp code when a data display buffer is
being set up; that is described in @ref{Reading from disk}.)


@node Global variables,  , Local variables, Customization
@section Global variables
@cindex customization, global variables

This section describes a potpourri of customization variables which you
can use to control EDB's behavior.

When a potentially slow computation is underway, EDB displays a message
in the echo area reporting how many records have been processed.  Use
the following variable to control how often this message is updated.

@table @code
@item db-inform-interval
@vindex db-inform-interval
When doing a lengthy computation, inform the user of progress every this
many records.  If @code{nil}, don't inform.
@end table

@findex with-electric-help
@findex with-output-to-temp-buffer
@cindex ehelp package
@cindex electric help package
To make EDB use @code{with-electric-help} where appropriate instead of
@code{with-output-to-temp-buffer}, set the following variables, which
default to @code{nil}.  You must have @file{ehelp.el} on your load path
or have already loaded it.

@table @code
@item use-electric-help-p
@vindex use-electric-help-p
Non-@code{nil} if Emacs programs should use electric help where possible.
Don't set this to a non-@code{nil} value unless the ehelp package is available.
@end table

EDB does not simply test for @code{(featurep 'ehelp)} because some
packages load @file{ehelp} without determining whether you desire
that behavior.  Even if that has happened, users of EDB have a way to
retain Emacs's traditional behavior.

@table @kbd
@item with-electric-help-maybe
@findex with-electric-help-maybe

@findex with-electric-help
@vindex use-electric-help-p
Similar to @code{with-electric-help} if @code{use-electric-help-p} is non-@code{nil};
@findex with-output-to-temp-buffer
otherwise like @code{with-output-to-temp-buffer} with the "*Help*" buffer.
Ehelp is loaded if necessary.
@findex with-electric-help
@var{body} is not a thunk (a function of no arguments), as with @code{with-electric-help},
but simply a set of forms.
@end table


@node Database representation, Naming conventions, Customization, Top
@chapter Database representation
@cindex database representation
@cindex representation of database

Perhaps the most important information about a database---besides the
records it contains---is the number of fields in each record, and the
type of each field.  As explained in @ref{Terminology}, a database
consists of records with identical numbers of fields; each field has an
associated type such as string or integer.  Each field also has a name
which is used when extracting its value from the record.

A database is basically just a doubly-linked circular list, where each
link contains a single record.  The database contains some additional
supporting information, and so does each link in the list of records.
The database is represented as a structure of type database whose
@code{first-link} slot points to the circular list of links.
Internally, database records are represented by vectors; however, the
programmer should never manipulate those vectors directly, only through
the functions described in this chapter.

Given a record, it is not possible to determine which link (if any)
points to it; similarly, you cannot go from a link to its containing
database.  The database-to-link and link-to-record connections are one-way.


@menu
* The database structure::      The database structure
* Mapping over the database::   Mapping over the database
* Manipulating records::        Manipulating records
@end menu


@node The database structure, Mapping over the database, Database representation, Database representation
@section The database structure
@cindex database structure

The internal representation of a database is as a structure of type
database.  The slots of this structure may be accessed by using the
macro @code{database-}@var{slotname}.  The slots may be set using the
macro @code{database-set-}@var{slotname}, whose second argument is the
value to be stored in the slot.

The slots of the database are as follows:

@table @code
@item print-name
@cindex @code{print-name} database slot
@cindex name of a database
A string which briefly describes the database.  It appears, among other
places, in prompts for questions regarding the database.
It defaults to ``Unnamed database @var{n}'', where the positive integers
are assigned to @var{n} in order.

@item first-link
@cindex @code{first-link} database slot
The first link in the database.  The links are arranged as a
doubly-linked circular list, and each link contains a record, among
other information.  @xref{The link structure}.

@item no-of-records
@cindex @code{no-of-records} database slot
An integer, the number of records (and links) in the database.  The
first link is numbered 1 and the last link is numbered @code{no-of-records}.

@item file
@cindex @code{file} database slot
A string, the name of the file from which this database was read.

@item file-local-variables
@cindex @code{file-local-variables} database slot
A string, the text of the ``Local Variables'' section of the file from
which this database was read, if any.
@cindex local variables section of format file

@item aux-file
@cindex @code{aux-file} database slot
A string, the name of this database's auxiliary file.  If it is
@code{nil}, then a number of default filenames are tried, based on
@code{db-aux-file-suffixes} (@pxref{Auxiliary files}).

@item data-display-buffers
@cindex @code{data-display-buffers} database slot
A list of data display buffers which are displaying this database.
Since every summary buffer is associated with (and subordinate to) a
data display buffer, summary buffers are not listed in the database
structure.

@item default-format-file
@cindex @code{default-format-file} database slot
A string, the name of the default format file for this database.  If it
is @code{nil}, then a number of default filenames are tried by function
@code{db-file->format-file} (@pxref{Auxiliary files}).

@item hide-functions
@cindex @code{hide-functions} database slot
This does not appear to be used at present.

@item no-of-fields
@cindex @code{no-of-fields} database slot
An integer, the number of fields in each record.

@item fieldnames
@cindex @code{fieldnames} database slot
@findex fieldnumber->fieldname
A vector of symbols, the names of the record fields.  Function
@code{fieldnumber->fieldname} (@pxref{Accessing record fields}) uses
this to determine the name of a field, given its index.

You may set this slot to be a list, and EDB will automatically convert
it to a vector, as well as setting other database slots that can be
determined from it.  (When doing so, use
@code{database-set-fieldnames-to-list}, which can safely be placed in
any format file, instead of @code{database-set-fieldnames}; for details,
see @ref{Changing display formats}.)  This information is duplicated in
the recordfieldspecs.

@table @kbd
@item database-set-fieldnames-to-list
@findex database-set-fieldnames-to-list
Set @var{database}'s fieldnames and record field types according to @var{fieldnames-list}.
@findex database-set-fieldnames
Users should not call @code{database-set-fieldnames} directly.
@var{fieldnames-list} is a list of fieldnames (symbols); each list element may
instead be a cons of fieldname and type to specify the field's
recordfieldtype as well.  If no type is specified for a field, the value of
@vindex db-default-field-type
@code{db-default-field-type} is used.

This function sets several database slots besides the fieldnames slot, but
has no effect if the fieldnames slot of the database is already set.
@end table

The following call specifies three fields of types one-line-string,
integer, and string, presuming that variable
@code{db-default-field-type} (@pxref{Per-data-display-buffer variables})
has not been changed from its default of @code{string}:
@vindex db-default-field-type
@example
(database-set-fieldnames-to-list database '((name . one-line-string)
                                            (age . integer)
                                            address))
@end example

@item fieldname-alist
@cindex @code{fieldname-alist} database slot
@findex fieldname->fieldnumber
An alist of fieldnames and indices.  Function
@code{fieldname->fieldnumber} (@pxref{Accessing record fields}) uses
this to determine the index of a field, given its name.

@item recordfieldspecs
@cindex @code{recordfieldspecs} database slot
@vindex db-recordfieldtypes
@findex database-recordfieldspec
@findex recordfieldtype->recordfieldspec
A vector of symbols or recordfieldspecs which specify the type of each
record field.  If the value is a symbol, it is the name of a record
field type name.  The name is converted to a recordfieldspec via function
@code{recordfieldtype->recordfieldspec}, which performs a lookup in
@code{db-recordfieldtypes}.  To access or change a particular
recordfieldspec, use the following functions:

@table @kbd
@item database-recordfieldspec
@findex database-recordfieldspec
Return the recordfieldspec of @var{database} corresponding to @var{record-index}.
@findex recordfieldtype->recordfieldspec
Dereferences via @code{recordfieldtype->recordfieldspec} any symbol found in the
recordfieldspecs slot of @var{database}.

@item database-recordfieldspec-type
@findex database-recordfieldspec-type
Return the type of the recordfieldspec of @var{database} corresponding to @var{record-index}.

@item database-set-recordfieldspec
@findex database-set-recordfieldspec
Set the recordfieldspec of @var{database} corresponding to @var{record-index} to @var{rs}.
Use this to redefine, on a per-field basis, subfields of the recordfieldspec.
@end table

@item field-priorities
@cindex @code{field-priorities} database slot
Determines in which order fields are compared when sorting
records, and which fields are ignored entirely.

@c This is badly put; I should rewrite it.  Perhaps move it into the
@c section on sorting, but I want to keep it in the second half of the manual.

This slot's value is a cons of two lists:  the first list contains
fields that are used for sorting, and the second list is the ignored
fields.  Each list consists of pairs of fieldnumber and order-info.  You
may use @code{nil} for the second list when setting this slot.  EDB
always maintains the list of ignored fields, however, as its order might
be worthwhile---for instance, for reminding the user of what the order
used to be.

The order-info specifies how the field should be sorted:  in increasing
order, in decreasing order, or according to an arbitrary function.  To
choose the default ordering, or its inverse, use the symbol
@code{increasing} or @code{decreasing}.  Otherwise, order-info is a cons
of @var{type} and @var{value}, where @var{type} is a symbol (either
@code{order-function} or @code{sort-function}) and @var{value} specifies
the function.

In the sorting section's example (@pxref{Sorting}), the record fields
were @samp{firstname}, @samp{lastname}, @samp{address}, @samp{city}, and
@samp{zip}.  Records were to be sorted on @samp{lastname} in increasing
order, or on @samp{firstname} in decreasing order if the @samp{lastname}
fields matched, ignoring the other fields entirely for the purposes of
the sort.  The corresponding field priorities list would be

@example
(((1 . increasing) (0 . decreasing)) .
 ((2 . increasing) (3 . increasing) (4 . increasing)))
@end example

@item hidden-to-end-p
@cindex @code{hidden-to-end-p} database slot
A boolean which determines whether, when sorting, hidden records should
be sorted in the usual way or placed at the end of the sorted order.

@item internal-file-layout-p
@cindex @code{internal-file-layout-p} database slot
A boolean which determines whether the database is saved in internal
file layout.  This has no effect when the database is read, but it is
set at read time so that, by default, the database is written out as it
was read in.

Setting this slot, then saving the database to disk, is a good way to
convert the database to or from internal file layout.  It can be set in
the usual way, or interactively via use of the following function:

@table @kbd
@item M-x db-toggle-internal-file-layout
@findex db-toggle-internal-file-layout
Toggle whether the database will be saved in EDB's internal file layout.
With a nonzero prefix argument, set it to use internal file layout.
With a zero prefix argument, set it not to use internal file layout.
@end table

@need 600
@item record-sepinfo
@itemx field-sepinfo
@itemx alternative-sepinfo
@cindex @code{record-sepinfo} database slot
@cindex @code{field-sepinfo} database slot
@cindex @code{alternative-sepinfo} database slot
These sepinfos are used when reading databases with delimited file
layouts.  A sepinfo contains a particular string, a regular expression,
or a function that specifies how pieces of information are separated in
the disk file (for more about the sepinfo structure, @pxref{How to
specify delimited file layouts}).  These sepinfos describe how to separate
records, fields within a record, and alternatives within a field.  (The
latter is not yet fully implemented.)

@item read-record-from-region
@cindex @code{read-record-from-region} database slot
@code{nil} or a function of no arguments which returns a record read from the
current region of the current buffer.  For details, @pxref{Nonregular
file layout}.

@item write-region-from-record
@cindex @code{write-region-from-record} database slot
@code{nil} or a function which takes a record as its argument and inserts the
file representation of that record in the current buffer.  For details,
@pxref{Nonregular file layout}.

@need 400
@item sub-fieldsep-string
@itemx sub-recordsep-string
@cindex @code{sub-fieldsep-string} database slot
@cindex @code{sub-recordsep-string} database slot
When delimiter substitution is required in reading a database, these
strings are temporarily used to delimit fields and records,
respectively.  (These strings replace the actual field and/or record
separators before substitution occurs.)  Their values are chosen
automatically if these slots aren't set.

@item substitutions
@cindex @code{substitutions} database slot
An alist of actual and stored strings which permits translations from
how the data appears in the data file to how it should really look; for
instance, in data files with the tab-separated text layout, fields may
not contain newlines, so any newlines in the data can be converted to
some other character (such as @samp{^K}) when the database is written
and then converted back when it is read in again.  For more about
substitution in reading databases, @pxref{Delimited file layout}.

@item modified-p
@cindex @code{modified-p} database slot
Non-@code{nil} if this database has been modified since it was last read
or written.

@item modifiable-p
@cindex @code{modifiable-p} database slot
Non-@code{nil} if this database may be modified.  It is set to
@code{nil} if the database file is not writable, and occasionally for
other reasons.  This does not prevent you from entering Database Edit mode,
only from making changes while in Database Edit mode.

The slot may be set directly.  The following function, which is bound in
Database View, Database Edit, and Database Summary modes, permits the
slot to be changed interactively.

@table @kbd
@item C-x C-q
@findex db-toggle-modifiable-p
Toggle whether the database may be modified by the user
(@code{db-toggle-modifiable-p}).
With a nonzero prefix argument, set it modifiable.
With a zero prefix argument, set it non-modifiable.
@end table


@item locals
@cindex @code{locals} database slot
An association list of symbols and values for per-database variables.
(For the number of local variables I expect databases to have, an alist is
faster than a hashtable, and it's easier to save to disk besides.)  Such
variables should be created with @code{database-make-local}, set using
@code{database-set-local} (note the singular form) and dereferenced with
@code{database-get-local}; for more information about these functions,
see @ref{Local variables}.
@cindex local variables, per database

@end table


@menu
* The link structure::          The link structure
@end menu


@node The link structure,  , The database structure, The database structure
@subsection The link structure
@cindex link structure

The records of the database---the information that the user cares most
about---are kept in a doubly-linked list, one record per link.  The link
structure also contains some other information about the record which
doesn't belong in the record proper.  The slots of a link are listed
below; a slot may be accessed by using the macro
@code{link-}@var{slotname} and set using the macro
@code{link-set-}@var{slotname}, whose second argument is the value to
be stored in the slot.

@table @code
@item prev
@cindex @code{prev} link slot
The previous link in the circular list.

@item next
@cindex @code{next} link slot
The next link in the circular list.

@need 400
@item hiddenp
@itemx markedp
@cindex @code{hiddenp} link slot
@cindex @code{markedp} link slot
These booleans are non-@code{nil} if this record is marked or hidden,
respectively.  For more information about marking and hiding, see
@ref{Marking and hiding}.

@item summary
@cindex @code{summary} link slot
A string which is used to represent this record in the summary buffer,
or @code{nil} if the record's value has changed since the last summary
buffer was made (or if no summary buffer has been made).

@item record
@cindex @code{record} link slot
The database record proper, a vector with as many elements as the record
has fields.  Setting this slot with the @code{link-set-record} function
also has the effect of setting the @code{summary} slot to @code{nil},
which is usually what is desired; to set only the @code{record} slot,
use the @code{link-set-record-slot} macro instead.
@findex link-set-record
@findex link-set-record-slot

@end table


@node Mapping over the database, Manipulating records, The database structure, Database representation
@section Mapping over the database
@cindex mapping over the database
@cindex looping over the database

Mapping refers to applying a function to each link or record in the
database, or executing a piece of code for each link or record.  Four
functions provided this capability.  The first two, more complicated,
ones, provide access to each link of the database in turn.

@table @kbd
@item maplinks
@findex maplinks
Apply @var{maplinks-func} to every link in @var{database}.
If optional third arg @var{hide} is non-@code{nil}, apply @var{maplinks-func} only to unhidden links.
If optional fourth arg @var{message} is non-@code{nil}, it should be a format string
containing one numeric (%d) specifier.  That message will be issued every
@vindex db-inform-interval
@code{db-inform-interval} links.
If optional fifth arg @var{accumulate} is non-@code{nil}, return a list of the results;
otherwise return @code{nil}.

@vindex maplinks-index
In the body, variable @code{maplinks-index} is bound to the index of the link being
@vindex maplinks-link
operated upon, and @code{maplinks-link} is the argument to @var{maplinks-func}.
@findex maplinks-break
The loop may be short-circuited (aborted) by calling @code{maplinks-break}.
@findex maplinks-macro
To avoid the per-link function call overhead, use @code{maplinks-macro} instead.

@item maplinks-macro
@findex maplinks-macro
Execute @var{maplinks-body} for each link in @var{database}, and return @code{nil}.
If optional third arg @var{hide} is non-@code{nil}, execute @var{maplinks-body} only for unhidden links.
If optional fourth arg @var{message} is non-@code{nil}, it should be a format string
containing one numeric (%d) specifier.  That message will be issued every
@vindex db-inform-interval
@code{db-inform-interval} links.

@vindex maplinks-link
In the body, variable @code{maplinks-link} is bound to the link being operated upon,
@vindex maplinks-index
and @code{maplinks-index} is bound to its index.
@findex maplinks-break
The loop may be short-circuited (aborted) by calling @code{maplinks-break}.
@findex maplinks
Speed demons should call this instead of @code{maplinks} to avoid a function call
overhead per link.

@item maplinks-break
@findex maplinks-break
Cause the maplinks loop to quit after executing the current iteration.
This is not a nonlocal exit!  It sets a flag which prevents future iterations.
@vindex maplinks-link
(Actually, it sets variable @code{maplinks-link}.)
@end table

Two other functions provide a slightly different interface which
simplifies access to each record.  Links and the information contained
in them are not accessible from database records, but when that
information is not of interest, these functions provide direct access to
records.

@table @kbd
@item maprecords
@findex maprecords
Apply @var{maprecords-func} to every record in @var{database}.  Return @code{nil}.
If optional third arg @var{hide} is non-@code{nil}, apply @var{maprecords-func} only to
unhidden records.
If optional fourth arg @var{message} is non-@code{nil}, it should be a format string
containing one numeric (%d) specifier.  That message will be issued every
@vindex db-inform-interval
@code{db-inform-interval} records.
If optional fifth arg @var{accumulate} is non-@code{nil}, return a list of the results;
otherwise return @code{nil}.

@findex maplinks
This is syntactic sugar for a call to @code{maplinks}, which see.
@findex maprecords-macro
See also @code{maprecords-macro}.

@item maprecords-macro
@findex maprecords-macro
Execute @var{maprecords-body} for each record in @var{database}, and return @code{nil}.
If optional third arg @var{hide} is non-@code{nil}, execute @var{maprecords-body} only for
unhidden records.
If optional fourth arg @var{message} is non-@code{nil}, it should be a format string
containing one numeric (%d) specifier.  That message will be issued every
@vindex db-inform-interval
@code{db-inform-interval} links.

In the body, variable  maprecords-record  is bound to the record being operated
upon.
@findex maprecords-break
The loop may be short-circuited (aborted) by calling @code{maprecords-break}.

@findex maplinks-macro
This is syntactic sugar for a call to @code{maplinks-macro}, which see.
@findex maprecords
See also @code{maprecords}.

@item maprecords-break
@findex maprecords-break
Cause the maplinks loop to quit after executing the current iteration.
This is not a nonlocal exit!  It sets a flag which prevents future iterations.
@vindex maplinks-link
(Actually, it sets variable @code{maplinks-link}.)
@end table

For instance, to sum, for all records, the values contained in field
@samp{summand} (of type number), you could use any of the following forms,
presuming that variable @code{database} was set to the database in
question:

@example
(let ((result 0))
  (maplinks-macro
    (setq result (+ result (record-field (link-record maplinks-link)
                                         'summand database)))
    database)
  result)

(let ((result 0))
  (maprecords-macro
    (setq result (+ result (record-field maprecords-record
                                         'summand database)))
    database)
  result)

(let ((result 0))
  (maprecords
    (function (lambda (record)
      (setq result (+ result (record-field record 'summand database)))))
    database)
  result)

(apply (function +)
       (maprecords
         (function (lambda (record) (record-field record 'summand database)))
         database nil nil t))
@end example


@node Manipulating records,  , Mapping over the database, Database representation
@section Manipulating records
@cindex record representation

A database consists of records, each of which has the same makeup:
corresponding fields in a database's records contain data of the same
type.  For instance, the fifth field of each record might contain an
address, and the seventh field, a date.  The particular addresses and
dates would would vary from record to record.  (Different databases will
contain records with different numbers and types of fields.)  Each field
has a name and a type, which specifies what sort of information can be
stored in the field; for more details about record field types, see
@ref{Record field types}.

Records are represented internally as vectors, but should never be
operated on as such; use the abstractions described in this section.  

@subsection Creating and copying records
@cindex creating records
@cindex copying records

@table @kbd
@item make-record
@findex make-record
Return a record with number of fields specified by argument @var{database}.

@findex db-add-record
@vindex db-new-record-function
When you create a new record by using @code{db-add-record}
(@pxref{Adding and removing records}), @code{db-new-record-function} is
invoked (@pxref{Display format change hooks}), the number of records in
the database is modified, and so forth.  @code{make-record}, on the
other hand, performs none of these housekeeping tasks.

@item copy-record
@findex copy-record
Return a copy of @var{record}.
@item copy-record-to-record
@findex copy-record-to-record
Copy the field values of the @var{source} record to the @var{target} record.
@end table


@menu
* Accessing record fields::     Accessing record fields
* Mapping over record fields::  Mapping over record fields
@end menu

@node Accessing record fields, Mapping over record fields, Manipulating records, Manipulating records
@subsection Accessing record fields
@cindex accessing record fields
@cindex setting record fields
@cindex reading record fields
@cindex record fields, accessing
@cindex fields, accessing them in records
@cindex fields, setting them in records
@cindex fields, reading them in records

Ordinarily, record fields are accessed by specifying the name of the
desired field; the database must also be specified so that the
fieldname-to-fieldnumber correspondence can be determined.

@table @kbd
@item record-field
@findex record-field
Return from @var{record} the field with name @var{fieldname}.  Third argument is @var{database}.

@item record-set-field
@findex record-set-field
Set, in @var{record}, field @var{fieldname} to @var{value}.  Fourth argument is @var{database}.
Check constraints first unless optional fifth argument @var{nocheck} is non-@code{nil}.
@end table

There are also special commands for manipulating the current
record---that is, the one that appears in the data display buffer.
These functions require fewer arguments, flag that a redisplay of the
record is necessary, and automatically call
@code{dbf-set-this-record-modified-p}, which is essential if the changes
are to be copied back into the original record in the database from the
one that is being displayed.  (A copy is always displayed so that
changes can be undone.)

@table @kbd
@item dbf-displayed-record
@findex dbf-displayed-record
Return the record currently displayed in this data display buffer.
@vindex dbf-this-record
@vindex dbf-this-record-modified-p
This is @code{dbf-this-record} if @code{dbf-this-record-modified-p} is non-@code{nil} and
@vindex dbf-this-record-original
@code{dbf-this-record-original} otherwise.

@item dbf-displayed-record-field
@findex dbf-displayed-record-field
Return the value of the field named @var{fieldname} from the displayed record.

@item dbf-displayed-record-set-field
@findex dbf-displayed-record-set-field
Set field with name @var{fieldname} in displayed record to @var{value}.
Cause the entire record to be redisplayed soon.

@item dbf-displayed-record-set-field-and-redisplay
@findex dbf-displayed-record-set-field-and-redisplay
Set field with name @var{fieldname} in displayed record to @var{value}.
Cause the entire record to be redisplayed immediately.

@item dbf-set-this-record-modified-p
@findex dbf-set-this-record-modified-p

@vindex dbf-this-record-modified-p
Set the value of @code{dbf-this-record-modified-p} to @var{arg}.
@vindex dbf-this-record-modified-p
If @var{arg} is non-@code{nil} and @code{dbf-this-record-modified-p} is @code{nil}, also do the
@vindex dbf-set-this-record-modified-function
necessary record-copying and call @code{dbf-set-this-record-modified-function}.
@end table


@vindex db-after-read-hooks
It is also possible---and more efficient---to use the fieldnumbers
directly.  The database does this internally, remembering fields by
their numbers and only converting to fieldnames when interacting with
the user.  Adopting such a strategy for all field accesses would be
cumbersome, error-prone, and make reading code difficult, but in some
situations---particularly when @code{record-field} or
@code{record-set-field} is being called with a constant second
argument---it is worthwhile.  The code can be sped up by allocating a
variable for the fieldnumber, looking it up after the database has been
loaded (for instance, by calling @code{fieldname->fieldnumber} after
@code{database-set-fieldnames-to-list} or in
@code{db-after-read-hooks}), and then using that variable along with
@code{record-field-from-index} or @code{record-set-field-from-index}.

Do not confuse the record fieldnumber, which describes in what order
fields happen to occur in the database's internal representation of a
record, with the format fieldnumber, which describes in what order
fields are displayed in the data display buffer.

@table @kbd
@item fieldname->fieldnumber
@findex fieldname->fieldnumber
Given a @var{fieldname} and @var{database}, return a record fieldnumber.
Do not be fooled into thinking this is a format fieldnumber.

@item fieldnumber->fieldname
@findex fieldnumber->fieldname
Given a record @var{fieldnumber} and @var{database}, return a record fieldname.
@vindex dbc-database
If @var{database} is not specified, the value of @code{dbc-database} is used.
The first argument is not a format fieldnumber.

@item record-field-from-index
@findex record-field-from-index
Return from @var{record} the value of the @var{fieldno}th field.

@item record-set-field-from-index
@findex record-set-field-from-index
Set, in @var{record}, the @var{fieldno}th field to @var{value}.
Checks field constraints first if @var{database} is non-@code{nil}.
@end table


@node Mapping over record fields,  , Accessing record fields, Manipulating records
@subsection Mapping over record fields

To perform an action on every field of a record, use the following
function or macro.

@table @kbd
@item mapfields
@findex mapfields

@vindex mapfields-index
Apply @var{func} to each field in @var{record}, with variable @code{mapfields-index} bound.
Third argument is @var{database}.

@item mapfields-macro
@findex mapfields-macro
Execute @var{body} for each field of @var{record}, a record of @var{database},
@vindex mapfields-field
@vindex mapfields-index
with variables @code{mapfields-field} and @code{mapfields-index} bound.
@end table


@node Naming conventions, EDB support, Database representation, Top
@chapter Naming conventions

@menu
* Function and variable naming conventions::  Function and variable naming conventions
* File naming conventions::     File naming conventions
@end menu

@node Function and variable naming conventions, File naming conventions, Naming conventions, Naming conventions
@section Function and variable naming conventions
@cindex naming conventions for functions and variables
@cindex function naming conventions
@cindex variable naming conventions

The names of EDB's functions and variables contain one of the following
prefixes:
@table @code
@item edb-
These variables contain information about EDB such as the version
number, last modification date, or names of the files comprising EDB@.
They do not relate to general database functionality, only to this
particular implementation.

@item db-
In a variable, indicates that the variable is global and affects all
databases.  In a function, indicates that the function is user-visible
and may be called interactively.  It is also used in some situations for
internal database functionality which is not connected with any
particular buffer.

@item database-
These functions operate on (the internal representation of) the database
structure itself.

@item dbc-
Indicates a variable local to the data display buffer which refers to
the current database (the database being manipulated by that data
display buffer), or a non-user-visible function which manipulates such
variables.  The `c' stands for ``current.''

@item dbf-
Indicates a variable local to the data display buffer which controls
some aspect of formatting, or a non-user-visible function which
manipulates such variables.  The `f' stands for ``format''; many such
variables are intimately related to the format, and the data display
buffer used to be called the format buffer.

@item dbs-
Indicates a variable local to the summary buffer, or a summary buffer
function.  Since the summary buffer may disappear at any time, the
summary buffer gets most of its information from the associated data
display buffer's local variables.

@item dbfs-
Indicates a variable which is too important to be kept only in the
summary buffer (which may disappear at any time), but is so often used by
the summary buffer that it would be inefficient to keep it only in the
data display buffer.  Such variables are kept in both the data display
and summary buffers.

@item dbsi-
Indicates a variable local to a sort interface buffer, or a sort
interface function.
@end table


@node File naming conventions,  , Function and variable naming conventions, Naming conventions
@section File naming conventions
@cindex naming conventions for files
@cindex file naming conventions

By convention, database file names contain one of the following suffixes:
@table @code
@item .dat
These are database files proper; they contain the information that makes
up the fields and records of the database.  Database filenames may also
contain no extension at all.

@item .fmt
Format files control the structure of the data display buffer, which
displays one record at a time.

@item .dba
Auxiliary files contain arbitrary Emacs Lisp code; they can be used to
define functions, set variables, or operate directly on the database.
@end table

Other suffixes---or none at all---can be easily used; for instance, 
see variables @code{db-format-file-suffixes} and
@code{db-aux-file-suffixes} (@pxref{Auxiliary files}).

For more information, see @ref{Invoking EDB}.


@node EDB support, Function Index, Naming conventions, Top
@chapter EDB support

@b{EDB is not supported.}

I wrote EDB because the existing tools for manipulating structured
information in Emacs were lacking features I considered important.  EDB
still contains some lacunae.  Feel free to mention which ones are most
important to you, so that the lengthy EDB ``to do'' list can be properly
ordered---but there is no guarantee that any of those project will ever
be undertaken.  Even better, contribute code for features currently
lacking---then you'll be sure of its inclusion in EDB, and you'll be
helping others as well.  Also send bug reports and (if possible) bug
fixes for inclusion in future releases.

@cindex mailing lists for EDB
@cindex @file{edb-list} mailing list
The mailing list @file{edb-list@@theory.lcs.mit.edu} is intended for
discussions relating to EDB:  trading extensions, sharing experiences,
asking questions, reporting bugs and bug fixes, and distributing updates
to EDB@.  Send requests to be added to (or removed from) the list to
@file{edb-list-request@@theory.lcs.mit.edu}.  The list is not archived;
rather, the manual and examples distribution are updated with useful
information that appears on the list.

@cindex @file{edb-developers} mailing list
The mailing list @file{edb-developers@@theory.lcs.mit.edu} is intended
for lengthier technical discussions about to EDB.  @file{edb-list} is
the mailing list of first recourse for EDB users; when discussions
become too detailed to be of interest to most members, the conversations
are moved to @file{edb-developers}.  Discussions of tentative future
plans and of bug fixes appear on this list; its members should have a
good understanding of EDB@.  Send requests to be added to (or removed
from) the list to @file{edb-developers-request@@theory.lcs.mit.edu}.
The list is not archived.


@menu
* Updates to EDB::              
* In case of trouble::          
@end menu

@node Updates to EDB, In case of trouble, EDB support, EDB support
@section Updates to EDB

@vindex edb-directory
@cindex upgrades to EDB
@cindex new versions of EDB
@cindex EDB, upgrades
@cindex EDB, new versions of
@cindex @file{.emacs} file
@cindex Emacs initialization file
Periodically updates to EDB are sent to the mailing list
@file{edb-list@@theory.lcs.mit.edu}. 
You can make it easy to install these updates by putting something like
the following in your @file{.emacs} file:
@example
(setq edb-directory "~/emacs/edb")
(autoload 'edb-update "database" "EDB database package" t)
@end example
@noindent
Then, when you receive a message containing diffs for a new version of EDB,
you only have to type @kbd{M-x edb-update @key{RET}} in order to install
them.

@table @kbd
@item M-x edb-update
@findex edb-update
Install the EDB update found in the current buffer after point.
@vindex edb-directory
EDB is assumed to be in the directory specified by @code{edb-directory}.
(If that variable is not set, the user is prompted for the location of
the files.)

If you have trouble with this command, it is likely that your version of EDB
is not exactly the same as the last release.  You might have an old
release, or you might have a pre-release.
@item edb-directory
@vindex edb-directory
A string, the name of the directory containing the EDB source files.
@end table

@c The diffs don't seem to be there any more.
@c @cindex diff files to upgrade EDB
@c @cindex patching to upgrade EDB
@c The diffs are also available by anonymous ftp from
@c @file{theory.lcs.mit.edu:/pub/emacs/edb/diffs/}.  The filenames are of
@c the form @file{edb-diff-@var{oldversion}-@var{newversion}.Z}, and the
@c files are compressed patch files.  To apply such a patch, uncompress it,
@c connect to your EDB directory, and run the patch program with the diff
@c file as input, like so:  @samp{patch < edb-diff-1.14-1.15}.  If you run
@c EDB compiled, be sure to load EDB and byte-recompile your EDB source
@c directory (use @kbd{@key{M-x} byte-compile-database @key{RET}}), If you
@c have been running a prerelease of this version, you must get the entire
@c distribution from @file{theory.lcs.mit.edu}.


@node In case of trouble,  , Updates to EDB, EDB support
@section In case of trouble

@menu
* Variables::                   Variables
* Exiting Emacs or saving files::  Exiting Emacs or saving files
* Compiling EDB::               Compiling EDB
* Debugging EDB::               Debugging EDB
* Reporting bugs::              Reporting bugs
@end menu

@c @node Data display buffer, Variables,  , In case of trouble
@c @subsection Data display buffer
@c @cindex trouble with data display buffer
@c @cindex data display buffer, trouble with
@c 
@c @vindex inhibit-quit
@c In the data display buffer, if point is not where EDB expects it to be,
@c or if other information gets out of synch, you may get an error message
@c about a string not being found in the buffer where it was expected.  (In
@c order to prevent this sort of confusion, you are prohibited from
@c aborting when a record is being displayed in the database format buffer;
@c this is done by setting @code{inhibit-quit} to @code{t}, if
@c @code{db-debug-p} is non-@code{nil}.)
@c 
@c When it looks like point is not in the field it should be in or the text
@c surrounding the fields has been illegally modified, EDB automatically
@c calls the following function and displays the message ``I was confused
@c about where I was.  Changes to the field might have been lost.''  (This
@c error message is produced by function @code{db-parse-buffer-error}.)  In
@c the unlikely event that the data display buffer does get confused and is
@c not automatically corrected, you can call the function yourself.
@c @vindex db-parse-buffer-error
@c @cindex I was confused about where I was.
@c @cindex Changes to the field might have been lost.
@c 
@c <<<commandtable:  db-emergency-restore-format>>>


@node Variables, Exiting Emacs or saving files, In case of trouble, In case of trouble
@subsection Variables
@cindex variable documentation missing
@cindex variable default value missing
@cindex trouble with undefined variables

In some cases the documentation strings and/or default values of some
variables may be missing---as if the variables were not yet defined.
That's because the variables are not yet defined; they are associated
with part of EDB which hasn't been loaded because it hasn't been needed
yet.  The documentation and default values will appear when that part of
EDB is loaded (if you set such variables, your values will not be
replaced).  Such variables are correctly declared buffer-local (if
appropriate), so you can set them without fear of the changes affecting
other buffers.


@node Exiting Emacs or saving files, Compiling EDB, Variables, In case of trouble
@subsection Exiting Emacs or saving files
@cindex exiting Emacs, trouble with
@cindex trouble with exiting Emacs
@cindex saving files, trouble with
@cindex trouble with saving files

If you are unable to exit Emacs or to execute
@code{db-save-some-buffers} (which replaced @code{save-some-buffers},
which is ordinarily bound to @kbd{C-x s}) because Emacs is trying to
manipulate a database which doesn't exist or because an EDB bug is
triggered by the attempt to save an existing database, you can set the
variable @code{db-databases} to @code{nil}.  This indicates to EDB that
there are no databases read into memory and, therefore, no operations
will be attempted on them as a part of saving all modified Emacs
buffers.
@findex save-some-buffers
@findex db-save-some-buffers
@vindex db-databases

@table @code
@item db-databases
@vindex db-databases
Assoc list of database names and databases.
@end table


@node Compiling EDB, Debugging EDB, Exiting Emacs or saving files, In case of trouble
@subsection Compiling EDB
@cindex compiling EDB, trouble with
@cindex byte-compiling EDB, trouble with
@cindex trouble with compiling EDB

@vindex db-disable-debugging-support
@cindex byte-compiling EDB
@cindex compiling EDB
@findex byte-compile-database
It is strongly recommended that you run EDB byte-compiled, as otherwise
it is very sluggish.  One easy way to byte-compile EDB is to run
@samp{make} from the shell in the EDB directory.  To byte-compile EDB
from within Emacs, type @kbd{M-x byte-compile-database @key{RET}}.  (You
may need to load EDB first, by typing @kbd{M-x load-library @key{RET}
database @key{RET}} or @kbd{M-x load-file @key{RET} database.el
@key{RET}}, in order to define this function.)  If you perform the
byte-compilation yourself rather than using the
@code{byte-compile-database} function, you @strong{must} fully load the
code before compiling it, by typing @kbd{C-u M-x load-database
@key{RET}}.

@findex delete-extent
@findex find-face
@findex make-extent
@findex map-extents
@findex mouse-track
@findex set-extent-face
@findex x-flush-mouse-queue
Compilation of EDB may signal several warnings that the following
functions are not known to be defined:
@code{delete-extent},
@code{find-face},
@code{make-extent},
@code{map-extents},
@code{mouse-track},
@code{set-extent-face}, and
@code{x-flush-mouse-queue}.
You may ignore these warnings, which result from EDB support for
multiple Emacs installations with slightly different feature sets and
function names.


@subsubsection Load EDB before compiling it
@cindex invalid function compilation error
@cindex variable not known to be defined

@findex load-database
@findex byte-compile-database
You must always fully load EDB before attempting to byte-compile it.
The easiest way to ensure this is to compile EDB by using function
@code{byte-compile-database}, which automatically fully loads EDB@.

Otherwise, do @kbd{C-u M-x load-database @key{RET}} to load a full uncompiled
version of EDB before you compile.  You may need to load EDB before
doing this (in order to define the @code{load-database} function), but
do not omit this step even if you have already loaded EDB@.  It is not
enough to simply do @samp{(require 'database)} or call
@code{db-find-file}, since neither of those actions loads all of EDB,
only parts of it.

There are two reasons for loading the code before compiling it.  The
first is that, when the byte-compiler encounters an unknown symbol used
in function position, it assumes that it is a function and attempts to
funcall it.  If the symbol is later defined to be a macro, this leads to
a runtime error.  The second reason is that, if the variable
@code{db-disable-debugging-support} is non-@code{nil} (most users will
want to use the default value, which is @code{t}) when compilation
occurs, then code for assisting debugging will be compiled out and the
code will be slightly smaller and faster, because it will not contain
conditional code for printing status reports and intermediate results.

One symptom of compiling EDB without having loaded it is a message along
the lines of @samp{Invalid function: (macro ...)}.  (EDB's
implementation uses macros for efficiency, so problems result if, when
compiling, an unknown symbol is assumed to be a function but is actually
later defined as a macro.)  Another symptom is that variables defined in
autoloaded files will be reported as ``not known to be defined.''  A
problem with compiling EDB when an old version is loaded is that, if
macro definitions have changed, the old definitions will be compiled
into the new code.

@cindex interpreted code, running
@table @kbd
@item M-x load-database
@findex load-database
Load all the files of EDB, the Emacs database.
With prefix argument, load source, not compiled, code; run EDB interpreted.

@item M-x byte-compile-database
@findex byte-compile-database
Compile source (.el) files in EDB, the Emacs database, which need it.
If optional prefix argument @var{all} is non-@code{nil}, every source file is recompiled.
You are likely to want unconditional recompilation if you have tried to
compile any of the files by hand and want to replace the (possibly incorrect)
results.

@item M-x byte-compile-database-all
@findex byte-compile-database-all
Compile all source (.el) files in EDB, the Emacs database, unconditionally.
@findex byte-compile-database
Calls @code{byte-compile-database}.
@end table


@c This isn't worth spelling out.
@c @node Long file names, Debugging EDB, Compiling EDB, EDB support
@c @subsection Long file names
@c @cindex long file names, trouble with
@c @cindex 14-character file names
@c @cindex fourteen-character file names
@c @cindex trouble with file name length
@c 
@c EDB's files were named to accommodate systems which limit filenames to
@c 14 characters or less; this is why the @file{backtrace-fix} package was
@c renamed @file{backtracef} and other file names (like
@c @file{db-interfa.el} appear to be truncated.  However, some of the
@c example files may have names with more than fourteen characters.


@c Emacs 19.29 reverted to non-Posix regexp routines (by default)
@c @node Emacs 19, Debugging EDB, Long file names, In case of trouble
@c @subsection Emacs 19
@c @cindex Emacs 19, and EDB
@c @cindex hung Emacs 19
@c 
@c EDB is fully compatible with GNU Emacs 19 (and with Lucid GNU Emacs 19),
@c though it does not yet fully take advantage of of Emacs 19's special
@c features (such as pull-down menus, modification hooks, and read-only
@c regions).
@c 
@c GNU Emacs 19 (but not Lucid's version) may appear to hang while reading
@c EDB format files.  Emacs 19's regular expression routines are
@c POSIX-compliant and, in a few cases, much slower than the old version.
@c (Some searches that used to take fractions of a second now take the
@c better part of an hour!)  This Emacs bug evidences itself when EDB is
@c searching for display specifications in the format file.  If no display
@c specifications contain optional parameters (following a comma), then EDB
@c will read the format file quickly.  Format files containing many
@c complicated display specifications may take minutes or even hours to
@c read.  Emacs has not hung, but it will respond extremely slowly to 
@c input, including control-g keystrokes.
@c 
@c Once the format file has been read, EDB usually performs as well under
@c Emacs 19 as it does under Emacs 18, though creating reports, and some
@c searches, may be slow.


@node Debugging EDB, Reporting bugs, Compiling EDB, In case of trouble
@subsection Debugging EDB
@cindex debugging EDB

@subsubsection Enabling debugging messages
@cindex enabling debugging messages
@cindex debugging messages, enabling
@cindex log, of debugging messages
@cindex @samp{*Database-Log*} buffer

Two useful sources of information for locating a problem in EDB are
backtraces and the database log.  If you encounter an EDB error, you
should generate a backtrace and a database log; even if they do not
help you, they may provide information to others who will see your bug
report.  Execute the following command and then repeat the commands that
caused an error.

@table @kbd
@item M-x db-prepare-to-debug
@findex db-prepare-to-debug
Prepare to debug EDB.
@findex debug-on-error
@vindex db-disable-debugging-support
@vindex db-debug-p
Set variables @code{debug-on-error}, @code{db-disable-debugging-support}, and @code{db-debug-p}.
Also load uncompiled EDB source.
@end table

EDB's source code contains calls to debugging macros which print useful
messages and save them in the @samp{*Database-Log*} buffer for later
examination.  By default, the calls to these macros are removed at
compile time; this results in slightly smaller, faster code.  The
following variables control this behavior.

@c To retain them, set @code{db-disable-debugging-support} to @code{nil}.
@c Then the variable @code{db-debug-p} will provide run-time control over
@c whether debugging messages are displayed and logged.
@c 
@c If you are running an uncompiled version of EDB, you still need to set
@c both of these variables in order to get a proper database log.

@table @code
@item db-disable-debugging-support
@vindex db-disable-debugging-support
If non-@code{nil}, then debugging calls will be compiled out of the source and the
@vindex db-debug-p
variable @code{db-debug-p} will have no effect.  Setting this variable at run-time
has no effect if you are running EDB compiled; you must set it when you compile
EDB, or run EDB interpreted.  Defaults to @code{t}.


@item db-debug-p
@vindex db-debug-p
Non-@code{nil} if database debugging is enabled.  Defaults to @code{nil}.
@vindex db-disable-debugging-support
Has no effect on code compiled with @code{db-disable-debugging-support} set.
@end table


@subsubsection Printing circular structures
@cindex printing circular structures
@cindex circular structures, printing
@cindex backtrace, viewing circular structures
@cindex apparently circular structure being printed

EDB's internal representation of the database structure is circular; if
you try to print it, Emacs will signal an error, possibly after running
for a very long time and appearing to hang.  This is a particular
problem when debugging functions that manipulate a database.

@c   EDB
@c provides a partial fix by including the @file{backtracef} (originally
@c @file{backtrace-fix}; the name was changed to accommodate systems with
@c 14-character maximum file name lengths) package, which at least lets
@c @code{backtrace} operate in the presence of circular structures; this
@c can let you know where the specific problem lies.

@cindex custom-print package
@vindex print-level
@vindex print-length
@cindex invalid read syntax
Emacs's custom-print package defines versions of the printing commands
which support printing circular structures.  (The Edebug debugger, which
is worth using in its own right, supports custom-print's redefinitions.)
To install custom-print, place the following in your @file{.emacs} file:
@example
(require 'cust-print)
(custom-print-install)
@end example
@noindent
Then, do something like 
After installing these packages (see their documentation for details),
you can simply do something like
@example
(setq print-level 4)
@end example
@noindent
to make circular structures easily debugable.

@c @cindex invalid read syntax: "#"
@c In Emacs 19.29, byte-compile-from-buffer binds print-length, but not print-level
Be sure to reset
@code{print-level} and @code{print-length} to @code{nil} before
byte-compiling!  (If you do not, the byte-compiled code may contain a
@samp{#} or @samp{...} in place of some of the byte codes, resulting in an error:
@example
@error{} Invalid read syntax: "#"
@end example
@noindent
One way to avoid the problem is to put the following code in your
@file{.emacs} file:
@example
(require 'advice)
(defadvice byte-compile-file (before undo-custom-print activate)
  (setq print-level nil
        print-length nil))
@end example
@noindent


@node Reporting bugs,  , Debugging EDB, In case of trouble
@subsection Reporting bugs
@cindex bugs, reporting
@cindex reporting bugs in EDB
@cindex problems, reporting
@cindex reporting problems with EDB
@cindex trouble, reporting
@cindex reporting trouble with EDB

Report bugs and problems with EDB to
@file{edb-developers@@theory.lcs.mit.edu}; they don't promise to do
anything but might well want to fix it.  Questions about EDB that are
not answered in the manual are welcome as well; if the manual is
unclear, that's a bug in the documentation.  Suggestions for new
features or modifications are always welcome (and implementations of
such features, even more so); input from users determines which features
are moved to the front of EDB's ``to-do'' list and which ones users
apparently don't care about.  The @file{edb-list} mailing list
(@pxref{EDB support}) is also a valuable resource for users of EDB.

@cindex version number, of EDB
Before reporting a bug or trying to fix it yourself, please perform the
following steps.  First, make sure you are using the most recent version
of EDB, since the problem may have already been fixed.  The most recent
version of EDB appears in directory
@file{theory.lcs.mit.edu:/pub/emacs/edb/}; the file
@file{edb-@var{version}.tar.gz} gives the version number.  You can find
out which version of EDB you have by looking in your version of
@file{database.el} or by typing @kbd{C-h v edb-version @key{RET}}.

Second, read the appropriate manual sections, so you understand how EDB
ought to behave (and whether your bug is considered a feature).

@vindex debug-on-error
Third, try to isolate the problem (for instance, by using the smallest
possible data, format, and auxiliary files).  If the problem causes an
error (usually causing Emacs to beep and display a message in the echo
area), then run command @code{db-prepare-to-debug} and then reproduce
the error.  This will produce a backtrace and a database log.  For
further debugging techniques, @pxref{Debugging EDB}.

Send a bug report which includes all of the following information.
@itemize @bullet
@item
A description of how to reproduce the bug and what you expected to
occur.
@item
The version of EDB you are running (do @kbd{M-x edb-version @key{RET}})
and the version of Emacs (do @kbd{M-x emacs-version @key{RET}}).
@item
@b{All files necessary to reproduce the bug}, including the database
file, the format file, and the auxiliary file, if any.  I promise not to
look at the content of your database file or distribute it; if you feel
uncomfortable sending it nonetheless, construct another one that
produces the same error.  Reproducing these files
usually takes longer than tracking down the bug; if they are absent, no
action will be taken.
@item
The backtrace and the database log (found in the @file{*Backtrace*} and
@file{*Database Log*} buffers).
@end itemize


@c @node    Program Index, Data Type Index, How information is displayed, Top
@c @unnumbered Program Index
@c 
@c @printindex pg

@c @node    Data Type Index, Keystroke Index, Program Index, Top
@c @unnumbered Data Type Index
@c 
@c @printindex tp

@c @node    Keystroke Index, Function Index, How information is displayed, Top
@c @unnumbered Keystroke Index
@c 
@c @printindex ky

@node    Function Index, Variable Index, EDB support, Top
@unnumbered Function Index

@printindex fn

@node    Variable Index, Concept Index, Function Index, Top
@unnumbered Variable Index

@printindex vr

@node    Concept Index,  , Variable Index, Top
@unnumbered Concept Index

@printindex cp

@comment To prevent the Concept Index's last page from being numbered "i".
@page

@summarycontents
@contents
@bye
